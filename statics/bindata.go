// Code generated by go-bindata.
// sources:
// statics/topology.html
// DO NOT EDIT!

package statics

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticsTopologyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x19\xfb\x6f\xdb\x36\xfa\x67\xe7\xaf\x60\x95\xde\xec\xa0\xb1\x94\x47\xbb\x1b\x1c\x3b\xc0\x75\x2b\xee\xf2\xc3\xb5\x05\x96\x02\x77\x33\x82\x82\x96\x68\x9b\x89\x2c\xaa\x22\xed\xc4\x2b\xfc\xbf\xef\xfb\xf8\x12\x25\x3f\x1a\x6c\x5d\xd1\xd6\x12\xbf\xf7\x9b\x14\x3b\xc3\x17\xbf\x7c\xf8\xf9\xf6\xff\x1f\xdf\x91\xb9\x5a\xe4\xd7\x47\x9d\x21\xfe\x92\x9c\x16\xb3\x51\xc4\x8a\x48\xaf\x30\x9a\xc1\x6f\x67\xb8\x60\x8a\x92\x74\x4e\x2b\xc9\xd4\x28\x5a\xaa\x69\xff\xa7\x28\xa9\x21\x73\xa5\xca\x3e\xfb\xb2\xe4\xab\x51\xf4\xbf\xfe\xa7\x7f\xf5\x7f\x16\x8b\x92\x2a\x3e\xc9\x59\x44\x52\x51\x28\x56\x00\xd9\xcd\xbb\x11\xcb\x66\x2c\x24\x2c\xe8\x82\x8d\xa2\x15\x67\x8f\xa5\xa8\x54\x80\xfb\xc8\x33\x35\x1f\x65\x6c\xc5\x53\xd6\xd7\x2f\xa7\x84\x17\x5c\x71\x9a\xf7\x65\x4a\x73\x36\x3a\xb7\x7c\x14\x57\x39\xbb\xfe\xf5\x61\x9d\xf1\x15\x23\xb9\x00\x20\x51\xa2\x14\xb9\x98\xad\x87\x89\x81\x22\x5e\xce\x8b\x07\x32\xaf\xd8\x74\x14\xa1\xba\x72\x90\x24\x0b\xfa\x94\x66\x45\x3c\x11\x42\x49\x55\xd1\x12\x5f\x52\xb1\x48\xfc\x42\x72\x19\x5f\xc6\x6f\x92\x54\xca\x7a\x2d\x5e\x70\xc0\x92\x32\x22\x15\xcb\x47\x91\x54\xeb\x9c\xc9\x39\x63\x0a\xf5\x41\x41\x32\xad\x78\xa9\x88\xac\x52\x23\x09\x04\xa5\x22\x63\xf1\xfd\x97\x25\xab\xd6\x5a\x80\x79\xec\x5f\xc4\xe7\xf1\x6b\xcd\xef\x5e\x46\xd7\xc3\xc4\x50\x5e\xef\x63\xb2\x56\x02\x4c\x2f\x59\x3c\xe3\x6a\xbe\x9c\xc4\x5c\x04\x6b\xf7\x32\xa1\x25\x6f\x2c\xf4\x73\xaa\x98\x54\xc1\xda\xb3\x44\xa1\x67\xd0\x13\x15\x7d\x04\x41\x5a\xdf\xb4\x64\x0a\x3c\xa9\x92\x8c\xce\x2a\x96\xac\xce\xe2\x7f\xc6\xaf\x93\x8c\x4b\xbb\xf2\xe7\x19\x3b\xd5\x9a\x8a\x1b\x31\xe7\xe0\x9e\x8b\x1a\x60\x56\x5b\x62\xf6\xf9\x2a\x2b\xee\x65\x9c\xe6\x62\x99\x4d\x73\x0a\x54\x28\x8c\xde\xd3\xa7\x24\xe7\x13\x99\x7c\x51\xbc\xbc\x48\x2e\xe2\x8b\xf8\xcc\xc6\x22\xc6\xa5\xdd\x66\xb4\x12\xe7\xaf\x71\xdf\x99\x38\x44\xad\x4b\x28\x03\xc5\x9e\x54\xa2\x11\x92\xbf\xe8\x3f\x14\xa7\x15\x78\x13\xb8\x4f\xeb\xb0\xc3\x7b\xa8\x07\xca\x9b\x88\x6c\x4d\xbe\xc2\x43\xa7\xa4\x59\xc6\x8b\x59\x1f\xca\x68\x40\xde\x9c\x95\x4f\x57\xb8\x3a\xa1\xe9\xc3\xac\x12\xcb\x22\xeb\xa7\x50\x5d\xd5\x80\x1c\x33\xc6\x10\xb4\x81\x7f\xc7\xa9\x25\xd6\xc5\x3a\x20\xe7\x67\x67\xff\xd0\x64\x73\xc6\x67\x73\x15\x2c\x40\xda\x94\x39\x5d\x0f\xc8\x04\x8a\xf5\x41\x2f\x95\x42\x42\x69\x8b\x62\x40\xe8\x44\x8a\x7c\xa9\x3c\x5b\xd0\xd5\xe8\x57\x3b\x04\x75\xed\xac\x68\x45\xe4\x23\x57\xe9\xfc\x66\x31\x23\x23\xd2\x0d\x1c\x74\x11\x73\xe8\x23\x53\x5e\x64\xac\xd2\x5e\xca\xa8\xa2\x09\xae\xc9\xe4\x11\x56\xc5\xa3\xec\xff\xd4\x87\xfe\x53\x89\xbe\xe6\x9e\xfc\xf8\x3a\x31\xcc\xe2\xb2\x98\x75\xaf\x9c\x00\xec\x49\xdf\x89\xfd\x34\x17\x8f\x9f\xb1\x81\xaa\xa6\x08\x5e\xa8\xe9\x77\x12\xf1\xc8\x2b\x96\x7d\x2e\x98\x7a\x14\xd5\x83\x95\x82\x62\xa6\xcb\x22\x45\xe7\x12\x88\xea\xad\x10\x39\xa4\x41\x2f\x5d\x43\x3b\xcd\x4e\x09\xcb\x4f\x4c\xd4\x3a\x7c\x4a\x7a\x2f\x7a\xd1\x7f\xa1\x2b\xa3\x30\x48\x42\x5e\x20\xf8\x44\x43\x3b\x15\x53\xcb\xaa\x30\x0c\xb5\xe2\x0b\x8b\x88\x9a\x1b\x73\x3a\x53\x51\x91\xde\x83\xa1\x1b\x07\x9c\xee\x9c\x8c\x8e\x27\x7a\x35\x22\x0f\xe4\x15\xe9\x0e\x48\x17\x7e\x5a\xe8\xe3\x87\x3b\x58\x8c\x86\x93\x2a\xb9\x8e\x0c\xeb\x8d\x11\x9c\xae\xe3\x97\xbd\xee\x31\xd2\xf0\xec\x44\x57\x55\xcf\xb2\xb6\x93\x63\xe0\x44\x75\x74\xe7\x1f\x74\x3d\xdf\xee\xa9\x03\x40\x99\x0d\xbc\xfe\x66\x71\x63\x81\xda\x99\x35\x8f\x34\xa7\x52\x32\x09\x5a\xa2\xa8\xbe\x9f\x01\x5d\x4b\x65\x74\x3b\xd1\x3a\x6e\x9a\xce\xce\xa0\x4a\x6f\xed\x18\xea\xb9\x79\xe4\x1c\x81\x0e\x84\x7a\x19\x11\x5f\x9d\xce\x8c\x0a\x26\x2e\x94\x86\x63\xd3\x3b\x71\xaa\x98\xb0\xc7\x9a\x4a\xcd\xb9\xbc\x6a\x2a\x8e\xe6\x53\x5e\x30\xa8\xca\x4c\xa4\xcb\x05\xb8\x22\x9e\x31\xf5\x2e\x67\xf8\xf8\x76\x7d\x93\xf5\xba\xe9\xba\x7b\x62\xd1\x4b\x0a\xb5\xf6\x95\x3c\xe9\xb2\x3c\x25\x20\xf1\x8c\x38\x56\xd0\xa6\x7e\x13\x62\x01\x4b\xf1\x85\x5b\xa2\x4f\x66\xe9\xdc\x2e\xfc\x0e\x6f\xd0\x21\xde\x15\x14\x46\x7c\x36\x20\xaa\x5a\x32\x0b\x5a\x4a\x56\xfd\xb6\x1f\x0c\x92\x8b\x03\x94\x1f\xf7\x83\x27\xe2\xe9\x57\x96\x33\xed\x97\x1d\x70\x02\x7f\x6c\xf8\xc6\x24\x49\xc0\x49\x8c\xd4\x3d\x96\x60\x72\xe2\xd2\x0c\xc2\x37\x37\x0c\x91\xe2\x6b\xfd\xd8\x91\x9a\x3b\x36\xb6\x6e\x01\x03\xdb\x25\x8c\x81\x35\x12\x43\x2f\x75\xba\xed\x8e\x88\xe9\x7c\x3c\x9d\x4e\x1b\x94\x9d\x6e\x4e\x27\x2c\x47\x18\xe6\x5b\x4f\xbf\x9d\xb4\x50\xe4\x1c\x72\x00\x51\x2a\xd0\x00\x76\x60\x39\x6b\x21\x04\xa2\xf8\x82\xce\x98\x67\xc7\x17\xb3\xfd\xcc\x10\x7f\x1f\xc7\x29\x64\x4c\x5f\xf2\xdf\x11\xf3\xe2\x22\x00\x6d\xea\xe7\x4d\xed\xda\x03\xce\x1a\x83\x0e\x2f\x46\x51\x21\x0a\x16\xdd\x7d\xdb\x6b\x7a\x40\x80\xd0\x1f\x5f\x37\x15\x32\x83\x42\x03\x0e\x6a\x73\x28\x6e\x2f\x31\x70\xe4\x9a\x6c\xc5\x0f\xc6\x6a\x5b\x8f\x60\xca\xa1\xb3\xce\x61\xce\xb5\x5c\xe4\x30\x72\x36\x55\xdf\x40\x99\x08\xa5\xc4\xe2\x1b\x48\x95\x35\x70\x17\x0e\x76\xa5\xfe\x8a\xe6\x7c\x56\x20\x06\x2a\xb5\x03\x61\xee\x11\x52\x28\x6b\x56\xed\xcf\x92\x3a\x21\x29\xa5\xcf\x4c\x90\x3f\xed\x76\xdc\xd6\x3f\x3f\xf0\xad\xb8\xc3\xfe\x8a\x05\xea\x5e\x5e\x5e\xb6\xeb\x07\x11\x34\x47\x9f\xf5\xfa\xad\x9d\xf7\x8a\x56\xd0\xf2\xfa\xb4\xaa\xc4\x63\x8b\xe1\x1e\xcb\x7c\x76\xdf\xd5\x89\x0e\x5b\x13\xb1\xf4\x73\x44\x93\xe0\x29\x45\x4b\x86\xfd\x67\xb7\xc6\xec\x4c\xb9\x32\x1d\xe8\xa8\xc9\x11\x27\x82\x7e\x28\x19\xab\x20\xf0\xd0\xb2\xbf\x6e\x4c\xc3\x5e\x2e\x39\x0c\xe1\x9b\x2c\x58\x9a\x54\x1c\xdc\x27\xed\x8a\x5e\x82\xf6\x35\xe5\x95\x54\x70\x90\xd1\x83\x84\xd0\x3c\xd7\xdd\x0b\xf3\x5a\xd6\xc3\x16\xe7\x88\x21\x7f\x0f\x2a\xe2\xe4\x75\x93\x66\x1c\x7d\x58\xc9\xb7\x86\x73\x30\x80\x0d\xb2\x16\x5f\xd3\x1d\x85\xb0\xb7\xe2\x49\x83\xbb\x35\xfd\x67\x9c\xb7\x8e\xd2\xce\x1d\x98\xc4\x90\xd4\xbd\xaf\x18\x0d\xf0\x15\x87\x56\x1c\xd0\x9f\x12\xdd\xe5\x06\x01\x97\x2e\x6c\x38\x16\x33\xdd\x5a\x0b\xd6\xdd\x78\x17\xed\xe7\x14\xb0\xa9\x75\x3d\x25\x25\x6c\xb8\x71\xce\x37\xc4\x69\xd6\x7e\x3f\x18\x70\xc7\x2d\x1c\xba\x76\xb7\x5f\xc6\x35\xe3\xbb\x71\xf4\x11\x71\xa3\x3b\x43\xe8\xfd\x8b\x1c\x9c\x77\x35\x37\xef\x4c\xcd\x3c\xf0\x25\x3c\xbe\xf2\xe8\x47\x6e\x0b\xb1\x6d\x9e\x21\xf3\xc6\x39\x8a\x43\xa6\xd9\x9d\x68\x60\x58\xa7\xb5\x9b\x73\x4c\xb5\x8a\x63\xc7\xf3\xae\xc6\x87\x9c\x32\x7c\x31\xa9\x10\xbe\x5f\xc1\xc0\x9c\x6e\xff\xba\x6b\xad\x42\xee\x52\x2c\xab\x94\x85\x11\x32\x45\x57\x1b\x65\x2b\x3f\x82\x6d\x3c\xcf\xa2\x53\xf2\x68\xb7\xff\x17\x67\xa1\xf2\xb8\xed\xc5\xb0\xb4\xb4\x1d\x47\x37\xd8\xd5\xa6\x34\x65\x3e\x10\x75\x24\x90\xc8\x45\x42\x33\xa8\x23\xa1\x19\xea\x50\xd8\x98\xbc\xf2\xd8\x4e\xa4\x2e\x3d\x40\xd0\x94\x63\x07\x05\x91\x9f\x3e\xdd\xfc\x12\xdd\x5d\x85\x68\x58\xa1\x63\x7c\xb8\xb3\x04\x98\xf7\x0e\x61\x87\xc3\x0c\x8a\x8f\xa8\x63\x7e\x28\xa2\x76\xe3\x1f\x3a\xa5\x1d\x52\xc7\xb5\xa5\x71\x40\x00\x31\x45\x7b\x31\xa2\x08\x3e\xa0\xa1\x77\x8b\x0d\xa8\xe3\xed\x02\xea\xc2\xe7\xc2\xe9\xe1\xcf\x0a\xa7\x3e\x3d\x44\x1f\xa1\xdb\x45\x3e\x38\xb5\xc2\xe4\x87\x1f\xb6\xbd\xae\x91\xef\x82\x08\xea\x66\x89\xb1\xd8\x15\x23\x83\xed\x51\xcd\x61\x45\x07\x14\xab\xd2\x74\xd9\x13\x94\xf3\xa2\xe7\xd9\x04\x90\x13\x4f\xe9\x5a\xb2\x8f\xae\x43\x77\x18\x76\x3c\xb8\xdf\x4d\x78\xfc\xc0\x24\x2c\x30\x6d\xcf\xae\x9a\x3d\xb8\x90\xdb\xfd\xf7\x3d\x53\xef\x65\xd8\x7b\x0b\xa9\x13\xd4\xe0\x5a\xcf\x41\x00\xe5\x03\x2f\x09\x9c\xda\x80\x31\xf4\xaf\x39\x11\x45\xbe\x86\xff\x90\x9b\x2d\x05\x38\xab\x50\xdc\x14\x1b\x10\x8e\x81\x5c\x88\x12\x67\xfd\x91\xf7\xc6\x87\xc9\x3d\x0c\xe3\xf8\x81\xad\x65\x6f\x5b\x87\xb1\x11\xda\xaa\xaf\x93\x38\x67\xc5\x0c\x44\x0e\xc9\x45\x1d\x08\x3c\x49\xf0\x62\xc9\xdc\x01\xc3\x6a\xaa\x5b\xa1\xce\x66\x33\x1e\xec\x99\x4f\x0b\xb7\xe6\xbf\x18\x91\xa8\x82\x23\x52\x14\x30\xdb\xce\x44\x74\x83\xaf\x14\x43\xb9\x3d\x1a\x6c\xac\x6a\x79\x48\xd5\xd2\xc8\xf5\x90\xe7\x9a\x7b\xf4\xec\x6e\xe2\x9b\x89\x0e\x59\xd0\x4a\x9e\xd3\x48\x7c\x8b\xd3\xa7\x7a\x5b\xe6\xce\x22\xf4\xd6\x16\xdd\xed\xba\x84\x8d\x33\x19\x81\xfb\x4c\x9f\x88\xc2\xc6\xa6\xd9\xf8\xd1\x56\x97\x9c\x6d\xe6\x5b\x7a\x34\x4a\x32\xb0\x1f\xed\x34\x34\x61\xd1\x69\x77\xa4\x73\x9e\x67\xce\x17\x06\xa7\x95\x29\x01\x45\x47\x63\xdb\x42\xdd\x85\x3c\xf6\xec\x6a\x9f\x74\x9a\x95\x5b\xb3\xf0\x02\x65\x58\xa4\x6e\x4f\x34\xf6\x88\x58\xaa\xe8\x77\x8f\xb3\xd9\x2e\xd8\xfd\x39\xf7\xcd\xfe\xec\x32\xcd\x35\xe7\x83\xa3\xf6\x9b\x7d\x19\xaa\x1a\xec\xa4\xb9\x3e\xcc\xa3\x89\x62\x25\xf1\xeb\x0b\xa1\x70\x38\x57\x8a\x65\x44\x7f\x53\x94\xbc\x80\xe2\xc6\xc3\x3c\x81\xbf\xfa\xbc\x6a\x62\xe0\xea\x5e\xcd\xa9\x02\x50\xc0\xb5\x20\xd4\x70\xb3\xd1\xa7\x85\xee\x80\xd4\x34\x90\x20\xc9\x5c\x6f\x74\xd3\x2c\x88\xe0\x0e\xff\x68\x6c\x3f\x1b\xf0\xad\x9e\x0c\xcd\x79\xb8\x7f\x42\x18\xcb\x82\x11\x71\x1e\x54\xf2\x26\x28\x9d\x43\xc3\xf5\x3b\xcc\x91\xe7\x8f\x11\x93\x8b\x87\xe7\xc5\xbe\x71\x71\x75\x60\x4c\xf8\x16\xb3\x35\xa0\xac\x92\xc6\xb5\xba\xc3\x34\x1d\x62\xb9\x1a\x17\x37\xe1\x0d\x45\xee\xf6\xef\xc2\x3d\x6f\x1f\x4e\xc7\xad\x0e\xa9\xc3\xa9\x83\x19\xe0\xb8\x70\x52\x39\x6f\x84\xf3\xd2\x87\x73\x9f\x99\xae\x90\x0f\x99\xe9\x0a\xbb\x61\xc6\x2e\x7b\x43\x7f\xfc\x8d\x66\xb6\xf7\x35\xa1\x95\xde\xd4\x97\x3d\xf7\x4d\xed\x24\xd6\x35\xdd\xab\xbf\xcf\x59\x63\x5f\xc6\xf8\xfd\xdf\x7d\xc5\x5b\x56\x78\xf6\x49\xdc\x64\x8a\xef\xa5\x28\xdc\x61\xd5\x1a\x51\x6f\x6e\x17\x14\xe4\x76\x35\x8a\x4d\x26\x8b\xc9\xe0\x20\x5b\x85\xdf\x02\x1d\xd5\x26\x60\x85\xc3\xc3\x91\xbb\x8f\x98\xcb\x14\x1a\xb1\x0c\x28\x11\xb1\x2e\x91\xc6\xa7\x49\x0d\x6a\x7d\x4c\x54\x86\xe7\xbf\xdf\xdd\x76\xfd\x79\xb6\xfe\x69\x5c\x8e\x24\xe6\x8a\x10\x1f\xf1\xfe\x40\x7f\x9b\x1f\x16\x74\x45\xf4\xa7\xd3\x51\x04\x8f\x13\xdc\x20\xe9\x9f\x3e\x2f\x56\xac\x92\xcc\xbd\x4e\xf9\x13\xcb\xf0\xfb\x4b\xa4\xe9\x3a\xc3\x8c\x7b\x42\xff\x41\xd3\xc2\x1a\x40\x4b\x8f\xb2\x6b\x04\xd0\x60\xa9\x94\x28\xec\x6d\x8a\x79\x89\x5a\x24\x4a\xcc\x66\x39\x23\xa9\xc8\x73\x5a\x4a\x48\x70\x82\x0e\xb0\xcb\x28\xd5\xac\xbb\x65\x9d\x2f\xa3\xe8\xd8\x50\x47\x84\x56\x9c\xf6\xd9\x53\x09\x7d\x97\x65\xa3\x68\x4a\x73\xc4\xd5\xab\xa8\x70\x25\x72\x2f\xca\xab\xd5\x19\x4a\xc0\x77\x7a\xc8\xaa\x8f\xdb\xb8\xe8\xfa\xd6\x68\x02\xc8\x7c\x46\x31\x4a\xe0\x57\xc0\xdb\x4d\x85\x9f\xfe\xfb\x9a\xe9\xdf\x87\x35\x4c\x8c\xcb\xfc\x3b\x6d\xf9\x6e\x52\x81\xd9\x91\xbd\x0a\x3b\x8e\xdc\x9d\xeb\x30\xa1\x2e\x44\x09\xbc\x87\xe1\xe2\x99\xf7\x46\x1d\x57\xe3\x61\x97\x03\xde\xe3\x5e\xec\x32\x0f\xe4\x3a\x34\xf8\x09\x1c\x9a\x73\x87\x42\x21\xc1\x57\x40\x0c\xca\x7a\xbd\xfe\x23\x16\x5a\xa9\x61\x92\xf3\xda\xb8\x65\xbe\xad\x65\xfd\x38\x4c\x40\x82\xce\xe3\x5a\xf3\x74\x6d\xaf\x74\x77\x5f\xc5\x61\xc1\xc7\x33\x21\x20\x8a\xb4\xe4\xb2\x75\x09\x68\x2e\xfe\xf0\x0e\xf3\x3c\xbe\x74\xd7\x80\xbb\xee\x17\x77\x33\x7f\xee\xd5\xf4\x7d\xfb\x66\x7a\xeb\xfa\x32\x71\x75\x09\xb5\xaa\x2f\xfa\xff\x08\x00\x00\xff\xff\x8d\x74\x5f\x27\xfa\x1f\x00\x00")

func staticsTopologyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticsTopologyHtml,
		"statics/topology.html",
	)
}

func staticsTopologyHtml() (*asset, error) {
	bytes, err := staticsTopologyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "statics/topology.html", size: 8186, mode: os.FileMode(436), modTime: time.Unix(1448059473, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"statics/topology.html": staticsTopologyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"statics": &bintree{nil, map[string]*bintree{
		"topology.html": &bintree{staticsTopologyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

