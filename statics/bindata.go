// Code generated by go-bindata.
// sources:
// statics/topology.html
// DO NOT EDIT!

package statics

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticsTopologyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x6b\x6f\x1b\x37\xd6\xfe\x2c\xff\x0a\x66\x92\xb7\x92\x11\xcf\x8c\x2f\x69\xdf\xc2\x96\x0c\x6c\xda\x60\xd7\x5f\x92\x00\x75\x80\xdd\x1a\x46\x40\xcd\x50\x12\xed\xd1\x70\x4a\x72\x24\xab\x86\xff\xfb\x9e\xc3\xdb\x50\x37\xc7\x08\xb2\x45\x5b\xcd\xf0\x5c\xf9\x9c\xc3\x87\x1c\xba\x37\x7c\xf5\xfb\xa7\xdf\xae\xff\xf3\xf9\x03\x99\xe9\x79\x75\x79\xd0\x1b\xe2\x2f\xa9\x68\x3d\x1d\x25\xac\x4e\xcc\x08\xa3\x25\xfc\xf6\x86\x73\xa6\x29\x29\x66\x54\x2a\xa6\x47\x49\xab\x27\xe9\xaf\x49\xde\x49\x66\x5a\x37\x29\xfb\xab\xe5\x8b\x51\xf2\xef\xf4\xcb\x3f\xd2\xdf\xc4\xbc\xa1\x9a\x8f\x2b\x96\x90\x42\xd4\x9a\xd5\x60\x76\xf5\x61\xc4\xca\x29\x8b\x0d\x6b\x3a\x67\xa3\x64\xc1\xd9\xb2\x11\x52\x47\xba\x4b\x5e\xea\xd9\xa8\x64\x0b\x5e\xb0\xd4\xbc\x1c\x11\x5e\x73\xcd\x69\x95\xaa\x82\x56\x6c\x74\xe2\xfc\x68\xae\x2b\x76\xf9\xc7\xfd\xaa\xe4\x0b\x46\x2a\x01\x42\xa2\x45\x23\x2a\x31\x5d\x0d\x73\x2b\x45\xbd\x8a\xd7\xf7\x64\x26\xd9\x64\x94\x60\xba\xea\x3c\xcf\xe7\xf4\xa1\x28\xeb\x6c\x2c\x84\x56\x5a\xd2\x06\x5f\x0a\x31\xcf\xc3\x40\x7e\x96\x9d\x65\x3f\xe7\x85\x52\xdd\x58\x36\xe7\xa0\xa5\x54\x42\x24\xab\x46\x89\xd2\xab\x8a\xa9\x19\x63\x1a\xf3\xc1\x40\xaa\x90\xbc\xd1\x44\xc9\xc2\x46\x82\x40\x85\x28\x59\x76\xf7\x57\xcb\xe4\xca\x04\xb0\x8f\xe9\x69\x76\x92\xbd\x33\xfe\xee\x54\x72\x39\xcc\xad\xe5\xe5\x3e\x27\x2b\x2d\x60\xea\x0d\xcb\xa6\x5c\xcf\xda\x71\xc6\x45\x34\x76\xa7\x72\xda\xf0\xb5\x81\xb4\xa2\x9a\x29\x1d\x8d\xbd\x28\x14\x22\x83\x48\x48\xba\x84\x40\x26\xdf\xa2\x61\x1a\x90\xd4\x79\x49\xa7\x92\xe5\x8b\xe3\xec\xff\xb3\x77\x79\xc9\x95\x1b\xf9\x7e\xc7\x3e\xb5\xf5\xc4\x6d\x98\x13\x80\xe7\xb4\x13\xd8\xd1\x8d\x30\x26\x0e\x96\x00\x23\x8e\x45\xb9\x22\x8f\xf0\xd0\x6b\x68\x59\xf2\x7a\x9a\x42\x23\x9c\x93\x9f\x8f\x9b\x87\x0b\x1c\x1d\xd3\xe2\x7e\x2a\x45\x5b\x97\x69\x01\xfd\x21\xcf\xc9\x6b\xc6\x18\x8a\x9e\xe0\xbf\xd7\x85\x33\x36\xed\x76\x4e\x4e\x8e\x8f\xff\xcf\x98\xcd\x18\x9f\xce\x74\x34\x00\x13\x6f\x2a\xba\x3a\x27\x63\x68\xb7\x7b\x33\xd4\x08\x05\xcd\x29\xea\x73\x42\xc7\x4a\x54\xad\x0e\x6e\x21\x57\x9b\x5f\x07\x09\xe6\xda\x5b\x50\x49\xd4\x92\xeb\x62\x76\x35\x9f\x92\x11\xe9\x47\x10\x9d\x66\x1c\x56\xc2\x84\xd7\x25\x93\x06\xa7\x92\x6a\x9a\xe3\x98\xca\x97\x30\x2a\x96\x2a\xfd\x35\x85\x15\x24\x45\x6a\xbc\xe7\xbf\xbc\xcb\xad\xb3\xac\xa9\xa7\xfd\x0b\x1f\x00\x57\xd5\x0f\x72\x3f\xa9\xc4\xf2\x2b\x52\x80\x5e\x0f\xc1\x6b\x3d\xf9\x41\x21\x96\x5c\xb2\xf2\x6b\xcd\xf4\x52\xc8\x7b\x17\x05\xc3\x4c\xda\xba\x40\x70\x49\x09\xad\x73\xed\xd6\xf6\xc0\x2f\xf2\x43\x5b\x35\x93\x0c\x94\x70\x44\x42\xc7\x0c\xac\xa0\x27\x81\xc6\xa0\x5a\xde\xcd\xe0\xd0\x8d\xf7\x6c\x26\x99\xb1\xd2\x33\xae\x2e\xec\xf8\xd3\x91\xfd\x45\x36\xa2\xbc\x66\xd0\x28\xa5\x28\xda\x39\x30\x53\x36\x65\xfa\x43\xc5\xf0\xf1\xfd\xea\xaa\x1c\xf4\x8b\x55\xff\xd0\xa9\x37\x14\xca\xff\x48\x1e\x4c\xa7\x1c\x11\x88\x78\x4c\xbc\x2b\x58\x20\x7f\x0a\x31\x87\xa1\xec\xd4\x0f\xd1\x07\x3b\x74\xe2\x06\xfe\x86\x37\x68\xda\x0f\x35\x05\xde\x2c\xcf\x89\x96\x2d\x73\xa2\x56\x31\xf9\xe7\x7e\x31\x44\xae\x9f\xb1\xfc\xbc\x5f\x3c\x16\x0f\x7f\xb0\x8a\x19\x5c\x76\xc8\x09\xfc\x63\xca\x73\x4e\x6e\x48\x9e\x03\x48\x8c\x74\x8c\x47\x26\x42\x9a\xa1\x29\xf0\xe2\xcc\x3a\x44\x8b\xc7\xee\xb1\xa7\x8c\x77\x5c\x6b\xfd\x1a\x58\xb0\x7f\x14\xcb\xac\xe7\x58\xbd\xd7\xdf\x5c\xa4\x7d\xb0\x7c\x3d\x99\x4c\xd6\x2c\x7b\xfd\x8a\x8e\x59\x85\x32\x6c\xac\x81\x79\x3b\xdc\x50\x51\x33\xe8\x01\x54\x91\x90\x01\x6c\x6b\x15\xdb\x50\x88\x42\xf1\x39\x9d\xb2\xe0\x8e\xcf\xa7\xfb\x9d\xa1\xfe\x3e\x8f\x13\xe8\x98\x54\xf1\xbf\x51\xf3\xf4\x34\x12\x3d\x75\xcf\x4f\x1d\xb4\xcf\x80\x75\x03\x39\xbc\x1a\x25\xb5\xa8\x59\x72\xfb\x6d\xd4\x0c\x67\x41\xd0\x5f\xde\xad\x27\x64\xb9\xcb\x08\x9e\xcd\xe6\xb9\xba\xbd\xc1\xc2\x91\x4b\xb2\x55\x3f\xd8\x05\x37\xf3\x88\x88\x17\xc1\x3a\x01\xea\xdd\x80\xc8\x6b\x54\x6c\xa2\xbf\xa1\x32\x16\x5a\x8b\xf9\x37\x94\xa4\x9b\xe0\x2e\x1d\xcd\x1e\x74\xba\xa0\x15\x9f\xd6\xa8\x81\x49\xed\x50\x98\x05\x85\x02\x96\x35\x93\xfb\xbb\xa4\x6b\x48\x4a\xe9\x0b\x1b\xe4\xbb\x61\xc7\xb3\xd2\xcb\x0b\xbf\x51\x77\x38\xed\xb0\x28\xdd\xb3\xb3\xb3\xcd\xf5\x83\x0a\xc6\x63\xe8\x7a\xf3\xb6\xd9\xf7\x9a\x4a\xa0\xbc\x94\x4a\x29\x96\x1b\x0e\xf7\xcc\x2c\x74\xf7\x6d\xd7\xe8\xb0\x5b\x8a\x56\xfb\xdc\x8d\x09\x1e\xfd\x4c\x64\xd8\xd4\xfb\x9d\x66\x6f\xc2\xb5\x65\xa0\x83\x75\x8f\x4f\x87\x76\x33\xe8\x35\x8c\x49\x28\x3c\x50\xf6\xe3\x93\x25\xec\xb6\xe5\xe5\xb5\xb8\x2a\xdd\x90\x19\x03\xb2\x9a\x70\xa9\x34\x9c\x05\xcd\xb6\x41\x68\x55\x19\xae\xc2\x2e\x56\x46\x05\xd9\x6b\x80\xbb\xc6\x58\x72\xc0\xfa\x23\x24\x04\xbb\x59\x38\x3c\xde\x24\x9f\x16\xea\xbd\x11\xa9\xe4\xd6\xef\x32\x3d\xab\x6c\x82\x75\x76\x07\xb1\xec\xbd\x78\x30\xe2\x7e\x67\xff\xb5\x4f\xde\x12\x6f\xe9\x76\x99\x62\x95\x41\x0b\x0f\x1e\x11\x7b\x40\x86\x03\xf1\x46\xf6\x47\xc4\x70\xda\x79\xe4\xa5\x0f\x47\xe0\xf9\xd4\x10\x69\xcd\xfa\x4f\x01\x90\xfd\x9e\x22\x37\x5d\xae\x47\xa4\xa1\x12\x1a\x7d\x23\x9c\x71\x1d\x0e\x24\x91\x77\x3c\x43\x28\xdc\x20\x77\xe2\x72\xd3\x39\xbe\xbd\x49\x3e\xa3\x6e\x72\x6b\x0d\x03\xbe\xe8\xc1\xa3\x6b\xbc\x05\x30\x8d\xf3\x08\x4b\x78\x7c\x1b\xd4\x5d\xfc\x5d\xd3\xb3\x66\x61\x72\xde\xe2\xb9\xa9\xb9\xa3\x50\x34\x31\xec\x11\xab\x87\x4d\x82\xf2\xfd\x01\xa3\xf4\xfa\xe9\x65\xdf\x65\x89\xce\x95\x68\x65\xc1\x62\xc4\xed\x92\xe9\x92\x74\xeb\x36\x81\x73\x21\x2f\x93\x23\xb2\x74\xe7\xc9\xd3\xe3\x38\x19\x3c\x47\x21\xcc\x06\xa0\x1b\x3f\x23\xc0\xf4\x0a\x39\x69\x42\x0b\x16\x80\xed\x90\x45\x23\x8f\xac\x71\xd0\x21\x6b\x1c\x1a\x68\x1d\xc6\x6f\x83\xb6\x0f\x69\x16\x0e\x28\x18\xcb\x1b\x2f\x85\x90\x5f\xbe\x5c\xfd\x9e\xdc\x5e\xc4\x6a\xb8\xbe\x6e\xf0\xe1\xd6\x19\x60\x1f\x7b\x85\x1d\x80\x59\x95\x50\x21\xef\xfc\xb9\x0a\xb9\x93\x64\x0c\x0a\x96\x08\xd3\xc7\x02\xa1\xf8\x99\x80\x61\x96\xae\x3e\x3e\x01\x5f\x1f\x5f\x0d\x5f\x9d\x20\x7f\x51\x75\x7a\x7c\x42\x06\xc9\x67\xa0\x9e\x24\x60\xdd\x21\x46\x7e\xfa\x69\x1b\x44\xa3\x7c\x1b\x15\xc4\x30\x17\x42\xbb\x0b\x72\xab\x1d\x54\x31\xdc\xab\x81\xa9\x0f\x2e\x1a\x4b\x79\x87\x18\xe7\xd5\x20\xb8\x89\x24\x87\xc1\xd2\xf3\x63\x28\x96\x57\xf7\x1a\x8e\xab\xfd\xaf\x63\xd7\x83\x70\x86\xae\xb1\x0b\x8f\x2f\xd6\x29\xb2\x56\xdb\xf4\xf8\x91\xe9\x8f\x2a\xa6\xc6\x5a\x99\x7e\xb3\xba\x0e\x39\x28\xa0\xba\xe7\x0d\x81\x53\x3d\x38\x06\x7a\x99\x11\x51\x57\x2b\xf8\x1f\x7a\x73\x9d\x4d\xe6\x8c\xe2\x09\xd5\x8a\x90\xa5\x2b\x21\x1a\xdc\x78\x0f\x02\x1a\x9f\xc6\x77\xb0\x33\x66\xf7\x6c\xa5\x06\xdb\x39\xdc\xd8\xa0\x1b\xcb\xe5\x30\xab\x58\x3d\x85\x90\x43\x72\xda\x15\x02\x8f\xf5\xbc\x6e\x99\x3f\xed\xbb\x4c\x0d\x53\x99\xe6\xb4\xec\xdd\xbf\xe8\x82\xbb\xe9\xbf\x1a\x91\x44\x0a\xa1\x93\xc8\xd9\x76\x27\x22\x0c\xa1\xf1\xad\xe5\x36\x73\xbb\x5a\x75\xf1\xd0\x6a\x23\x23\x4f\x09\x2f\x9d\xee\xc1\x8b\xc9\x21\x70\x83\x29\xd9\x36\x33\x7c\xcf\x82\xf6\x73\xd9\xbf\x9a\xa1\x17\x00\x4c\x5a\x99\xef\x31\xcc\x4a\x2c\x14\x81\x38\x84\xc2\xf7\x95\xd6\xac\x24\xe6\x92\x46\xf1\x1a\x5a\x02\xbf\xc7\x08\xfc\x6b\x3e\x39\xec\x2c\x7c\xb7\xe8\x19\xd5\x20\x8a\xbc\xd6\x84\x5a\x6f\x8e\xcf\x69\x6d\xd6\x0d\xb5\x6d\x77\xf0\x12\xb6\x3b\xe8\x16\x9e\x5f\x76\x9e\xf7\xa2\x35\xbc\x03\x18\xa3\x1d\x68\x07\xdf\x3a\xd2\x59\x67\xce\xfd\xe4\x63\xa7\x1f\xb1\xcf\x49\xd4\x24\x4f\x51\xfe\xcf\xd1\xf0\x0f\xa0\xa8\x97\x33\x94\x25\xa8\xe7\xa9\xe8\x1b\x4c\xb4\x8b\x80\x42\xf3\x6e\x51\x9f\xcb\xd1\x22\x6b\x7a\x77\x1d\x0f\x2b\xb6\x00\xaf\x8b\xd7\xd2\xb8\xdd\x7b\x64\x0a\x9e\x43\x2d\xbd\xb3\xae\x9e\x5e\xa7\xab\x64\xa4\xe3\x6b\x49\xe1\xe3\x38\xae\xe5\x59\xa8\xa5\x99\xaa\x9d\xe9\x9b\x81\xbf\x52\x38\xcc\xcc\x7a\x18\x74\xd7\x13\x6e\xae\x6f\x32\x7a\x47\x1f\xfc\x25\x46\x2b\xf1\x30\x98\x7b\x2e\xc8\xee\x94\xa8\xfd\x59\xdd\xcd\xa2\x3b\x1d\xcc\x29\xc4\xed\x1b\x95\xf5\x2b\x0d\x06\xe7\x78\x19\x5f\x85\x78\xab\xa7\xc8\xd5\xf5\xaa\x61\xde\xdc\x0d\xab\xb6\x00\x8a\x51\x91\x25\x2a\x76\x9d\xb3\x76\x33\x63\x44\x1b\x77\x29\xda\xfa\xfc\xe7\x87\xeb\x7e\x38\xce\x77\x3f\x6b\xf7\x86\xb9\xbd\x76\xc6\x47\xbc\xd1\x33\xb7\x65\xc3\x9a\x2e\x48\x51\x51\xa5\xe0\x9b\x98\x2e\xc6\xb8\x25\x99\x9f\x94\xd7\x0b\x26\x15\xf3\xaf\x13\xfe\xc0\x4a\xfc\xfc\x4c\x8c\x5d\x6f\x58\xf2\x60\x18\xee\x73\x9c\x6c\x4d\xe8\xec\x31\x76\xa7\x00\x19\xb4\xf0\x0d\x0a\xbb\x1e\xa4\x3f\x4a\xec\x4b\xb2\x61\xa2\xc5\x14\x3e\xf4\x08\x7c\x1c\x55\xb4\x51\x50\x7a\x82\x00\xb8\x61\x8c\x6a\xc7\xfd\xb0\x69\x98\x51\xf2\xda\x5a\x27\x84\x4a\x4e\x53\xf6\xd0\x00\x67\xb1\x72\x94\x4c\x68\x85\xba\x66\x14\x13\x96\xa2\x0a\xa1\x42\x5a\xbd\xa1\x02\x7d\x9f\x87\x92\x29\x6e\x9c\xc9\xe5\xb5\xcd\x04\x94\xf9\x94\x62\x95\x00\x57\xd0\xdb\x6d\x85\x97\x71\xa9\x71\xfa\xbf\xd3\x1a\xe6\x16\xb2\xf0\x4e\x37\xb0\x1b\x4b\x98\x76\xe2\xee\xe5\x5f\x27\xfe\x1e\x7f\x98\x53\x5f\xa2\x1c\xde\xe3\x72\xf1\x32\xa0\xd1\xd5\xd5\x22\xec\x7b\x20\x20\x1e\xc2\xb6\x55\x14\xd7\xab\xc1\x4f\x04\x68\xc5\xbd\x0a\x85\x06\x5f\x80\x31\x24\x1b\xf2\xfa\x97\x98\x9b\xa4\x86\x79\xc5\xbb\xc9\xb5\xd5\x76\x96\xdd\xe3\x30\x87\x08\xa6\x8f\xbb\xcc\x8b\x95\xfb\x33\xc1\xee\xeb\x71\x5c\xf0\xd9\x54\x08\xa8\x22\x6d\xb8\x32\x37\xa7\x38\x06\x51\xc7\xca\xfd\xd9\x00\xef\xc5\x4f\xb2\x33\xf7\xb6\xf3\xea\x7d\xb7\xf3\x97\xfe\xb9\xe3\x6e\xf3\xaf\x1d\x5b\x37\xfb\xb9\x5f\x97\xb0\x56\xcd\x1f\x8f\xfe\x1b\x00\x00\xff\xff\x80\x9b\x2a\x57\x4e\x1a\x00\x00")

func staticsTopologyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticsTopologyHtml,
		"statics/topology.html",
	)
}

func staticsTopologyHtml() (*asset, error) {
	bytes, err := staticsTopologyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "statics/topology.html", size: 6734, mode: os.FileMode(436), modTime: time.Unix(1447854725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"statics/topology.html": staticsTopologyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"statics": &bintree{nil, map[string]*bintree{
		"topology.html": &bintree{staticsTopologyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

