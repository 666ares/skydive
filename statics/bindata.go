// Code generated by go-bindata.
// sources:
// statics/topology.html
// DO NOT EDIT!

package statics

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticsTopologyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x39\xeb\x6e\xdb\x38\xd6\xbf\x9d\xa7\x60\x95\x7e\x63\x07\x8d\xa4\x5c\x3a\xf3\x0d\x5c\x3b\xc0\xce\x4c\xb1\x9b\x1f\xdb\x16\x98\x14\xd8\x1d\x23\x28\x68\x89\xb6\x99\xc8\xa2\x2a\x52\x4e\x3c\x85\xdf\x7d\xcf\xe1\x4d\xb4\x6c\xa7\xd9\x4e\xb7\x68\x6b\x89\xe7\x7e\x27\xa9\xde\xe8\xc5\x6f\xef\x7f\xbd\xf9\xf7\x87\xb7\x64\xa1\x96\xc5\xd5\x51\x6f\x84\xbf\xa4\xa0\xe5\x7c\x1c\xb1\x32\xd2\x2b\x8c\xe6\xf0\xdb\x1b\x2d\x99\xa2\x24\x5b\xd0\x5a\x32\x35\x8e\x1a\x35\x8b\x7f\x8e\xd2\x16\xb2\x50\xaa\x8a\xd9\xe7\x86\xaf\xc6\xd1\xbf\xe2\x8f\x7f\x8b\x7f\x15\xcb\x8a\x2a\x3e\x2d\x58\x44\x32\x51\x2a\x56\x02\xd9\xf5\xdb\x31\xcb\xe7\x2c\x24\x2c\xe9\x92\x8d\xa3\x15\x67\x0f\x95\xa8\x55\x80\xfb\xc0\x73\xb5\x18\xe7\x6c\xc5\x33\x16\xeb\x97\x53\xc2\x4b\xae\x38\x2d\x62\x99\xd1\x82\x8d\xcf\x2d\x1f\xc5\x55\xc1\xae\x7e\xbf\x5f\xe7\x7c\xc5\x48\x21\x00\x48\x94\xa8\x44\x21\xe6\xeb\x51\x6a\xa0\x88\x57\xf0\xf2\x9e\x2c\x6a\x36\x1b\x47\xa8\xae\x1c\xa6\xe9\x92\x3e\x66\x79\x99\x4c\x85\x50\x52\xd5\xb4\xc2\x97\x4c\x2c\x53\xbf\x90\x5e\x26\x97\xc9\x8f\x69\x26\x65\xbb\x96\x2c\x39\x60\x49\x19\x91\x9a\x15\xe3\x48\xaa\x75\xc1\xe4\x82\x31\x85\xfa\xa0\x20\x99\xd5\xbc\x52\x44\xd6\x99\x91\x04\x82\x32\x91\xb3\xe4\xee\x73\xc3\xea\xb5\x16\x60\x1e\xe3\x8b\xe4\x3c\x79\xad\xf9\xdd\xc9\xe8\x6a\x94\x1a\xca\xab\x43\x4c\xd6\x4a\x80\xe9\x15\x4b\xe6\x5c\x2d\x9a\x69\xc2\x45\xb0\x76\x27\x53\x5a\xf1\xad\x85\xb8\xa0\x8a\x49\x15\xac\x3d\x4b\x14\x7a\x06\x3d\x51\xd3\x07\x10\xa4\xf5\xcd\x2a\xa6\xc0\x93\x2a\xcd\xe9\xbc\x66\xe9\xea\x2c\xf9\xff\xe4\x75\x9a\x73\x69\x57\xbe\x9d\xb1\x53\x6d\x5b\x71\x23\xe6\x1c\xdc\x73\xd1\x02\xcc\x6a\x47\xcc\x21\x5f\xe5\xe5\x9d\x4c\xb2\x42\x34\xf9\xac\xa0\x40\x85\xc2\xe8\x1d\x7d\x4c\x0b\x3e\x95\xe9\x67\xc5\xab\x8b\xf4\x22\xb9\x48\xce\x6c\x2c\x12\x5c\xda\x6f\x46\x27\x71\xfe\x1a\xf7\xbd\x89\x43\xd4\xba\x82\x32\x50\xec\x51\xa5\x1a\x21\xfd\x8b\xfe\x43\x71\x5a\x81\x1f\x03\xf7\x69\x1d\xf6\x78\x0f\xf5\x40\x79\x53\x91\xaf\xc9\x17\x78\xe8\x55\x34\xcf\x79\x39\x8f\xa1\x8c\x86\xe4\xc7\xb3\xea\xf1\x0d\xae\x4e\x69\x76\x3f\xaf\x45\x53\xe6\x71\x06\xd5\x55\x0f\xc9\x31\x63\x0c\x41\x1b\xf8\x77\x9c\x59\x62\x5d\xac\x43\x72\x7e\x76\xf6\x7f\x9a\x6c\xc1\xf8\x7c\xa1\x82\x05\x48\x9b\xaa\xa0\xeb\x21\x99\x42\xb1\xde\xeb\xa5\x4a\x48\x28\x6d\x51\x0e\x09\x9d\x4a\x51\x34\xca\xb3\x05\x5d\x8d\x7e\xad\x43\x50\xd7\xde\x8a\xd6\x44\x3e\x70\x95\x2d\xae\x97\x73\x32\x26\xfd\xc0\x41\x17\x09\x87\x3e\x32\xe3\x65\xce\x6a\xed\xa5\x9c\x2a\x9a\xe2\x9a\x4c\x1f\x60\x55\x3c\xc8\xf8\xe7\x18\xfa\x4f\x2d\x62\xcd\x3d\xfd\xe9\x75\x6a\x98\x25\x55\x39\xef\xbf\x71\x02\xb0\x27\x7d\x27\xf6\xb3\x42\x3c\x7c\xc2\x06\xaa\xb6\x45\xf0\x52\xcd\xbe\x93\x88\x07\x5e\xb3\xfc\x53\xc9\xd4\x83\xa8\xef\xad\x14\x14\x33\x6b\xca\x0c\x9d\x4b\x20\xaa\x37\x42\x14\x90\x06\x83\x6c\x0d\xed\x34\x3f\x25\xac\x38\x31\x51\xeb\xf1\x19\x19\xbc\x18\x44\xff\x84\xae\x8c\xc2\x20\x09\x79\x89\xe0\x13\x0d\xed\xd5\x4c\x35\x75\x69\x18\x6a\xc5\x97\x16\x11\x35\x37\xe6\xf4\x66\xa2\x26\x83\x7b\x43\x37\x09\x38\xdd\x3a\x19\x3d\x4f\xf4\x6a\x4c\xee\xc9\x2b\xd2\x1f\x92\x3e\xfc\x74\xd0\x27\xf7\xb7\x86\xe1\xc6\x88\xcb\xd6\xc9\xcb\x41\xff\x18\x31\x79\x7e\xa2\x6b\x69\x60\x19\xda\x79\x31\x74\x02\x7a\xba\xdf\x0f\xfb\x9e\x5b\xff\xd4\x01\xa0\xb8\x86\x5e\x6b\xb3\xb8\xb1\x40\xed\xc2\x96\x47\x56\x50\x29\x99\x04\xdd\x50\x54\xec\x3b\x7f\xdf\x52\x19\xdd\x4e\xb4\x8e\x9b\x6d\x17\xe7\x50\x9b\x37\x76\xf8\x0c\xdc\x14\x72\xe6\xa3\xdb\xa0\x4a\xc6\xc4\xd7\xa4\x33\xa3\x86\x39\x0b\x05\xe1\xd8\x0c\x4e\x9c\x2a\x26\xd8\x89\xa6\x52\x0b\x2e\xdf\x6c\x2b\x8e\xe6\x53\x5e\x32\xa8\xc5\x5c\x64\xcd\x12\x5c\x91\xcc\x99\x7a\x5b\x30\x7c\xfc\x65\x7d\x9d\x0f\xfa\xd9\xba\x7f\x62\xd1\x2b\x0a\x15\xf6\x85\x3c\xea\x62\x3c\x25\x20\xf1\x8c\x38\x56\xd0\x9c\xfe\x10\x62\x09\x4b\xc9\x85\x5b\xa2\x8f\x66\xe9\xdc\x2e\xfc\x09\x6f\xd0\x17\xde\x96\x14\x06\x7b\x3e\x24\xaa\x6e\x98\x05\x35\x92\xd5\x7f\x1c\x06\x83\xe4\xf2\x09\xca\x0f\x87\xc1\x53\xf1\xf8\x3b\x2b\x98\xf6\xcb\x1e\x38\x81\x3f\x36\x7c\x13\x92\xa6\xe0\x24\x46\xda\xce\x4a\x30\x25\x71\x69\x0e\xe1\x5b\x18\x86\x48\xf1\xa5\x7d\xec\x49\xcd\x1d\xdb\x59\xbf\x84\x31\xed\x12\xc6\xc0\xb6\x12\x43\x2f\xf5\xfa\xdd\x3e\x88\x49\x7c\x3c\x9b\xcd\xb6\x28\x7b\xfd\x82\x4e\x59\x81\x30\xcc\xb7\x81\x7e\x3b\xe9\xa0\xc8\x05\xe4\x00\xa2\xd4\xa0\x01\xec\xbb\x0a\xd6\x41\x08\x44\xf1\x25\x9d\x33\xcf\x8e\x2f\xe7\x87\x99\x21\xfe\x21\x8e\x33\xc8\x98\x58\xf2\x3f\x11\xf3\xe2\x22\x00\x6d\xda\xe7\x4d\xeb\xda\x27\x9c\x35\x01\x1d\x5e\x8c\xa3\x52\x94\x2c\xba\xfd\xba\xd7\xf4\x58\x00\xa1\x3f\xbd\xde\x56\xc8\x8c\x07\x0d\x78\x52\x9b\xa7\xe2\xf6\x12\x03\x47\xae\xc8\x4e\xfc\x60\x98\x76\xf5\x08\x66\x1b\x3a\xeb\x1c\xa6\x5b\xc7\x45\x0e\xa3\x60\x33\xf5\x15\x94\xa9\x50\x4a\x2c\xbf\x82\x54\x5b\x03\xf7\xe1\x60\x57\x8a\x57\xb4\xe0\xf3\x12\x31\x50\xa9\x3d\x08\x0b\x8f\x90\x41\x59\xb3\xfa\x70\x96\xb4\x09\x49\x29\x7d\x66\x82\x7c\xb3\xdb\x71\x33\xff\xfc\xc0\x77\xe2\x0e\xbb\x2a\x16\xa8\x7b\x79\x79\xd9\xad\x1f\x44\xd0\x1c\x7d\xd6\xeb\xb7\x6e\xde\x2b\x5a\x43\xcb\x8b\x69\x5d\x8b\x87\x0e\xc3\x03\x96\xf9\xec\xbe\x6d\x13\x1d\x36\x24\xa2\xf1\x73\x44\x93\xe0\xd9\x44\x4b\x86\x5d\x67\xbf\xc5\xec\xcd\xb8\x32\x1d\xe8\x68\x9b\x23\x4e\x04\xfd\x50\x31\x56\x43\xe0\xa1\x65\x7f\xd9\x98\x86\xdd\x34\x1c\x46\xef\x75\x6e\x97\xf4\x1a\x34\xab\x19\xaf\xa5\x82\xc3\x8a\x1e\x1b\x84\x16\x85\xee\x55\x98\xc5\xb2\x1d\xa8\x38\x35\xa6\x35\x07\x5f\xbf\x03\x85\x70\xba\xba\xb9\x32\x89\xde\xaf\xe4\x2f\x1a\x14\x0e\x59\x83\xac\x85\xb5\x74\x47\x21\xec\x17\xf1\xa8\xc1\xfd\x96\xfe\x13\x4e\x57\x47\x69\xa7\x0c\xcc\x5d\x48\xe1\xc1\x17\xf4\x3d\x78\x86\x43\xe3\x0d\xe8\x4f\x89\xee\x69\xc3\x80\x4b\x1f\x36\x15\xcb\xb9\x6e\xa4\x25\xeb\x6f\xbc\x43\x0e\x73\x0a\xd8\xb4\xba\x9e\x92\x0a\x36\xd5\x38\xd5\xb7\xc4\x69\xd6\x7e\xcf\x17\x70\xc7\x6d\x9a\xc4\x01\xb9\xd7\x2f\x93\x96\xf1\xed\x24\xfa\x80\xb8\xd1\xad\x21\xf4\xfe\x45\x0e\xce\xbb\x9a\x9b\x77\xa6\x66\x1e\xf8\x12\x1e\x5f\x79\xf4\x23\xb7\x61\xd8\x35\xcf\x90\x79\xe3\x1c\xc5\x53\xa6\xd9\xdd\x66\x60\x58\xaf\xb3\x63\x73\x4c\xb5\x8a\x13\xc7\xf3\xb6\xc5\x87\x9c\x32\x7c\x31\xa9\x10\x7e\x58\xc1\xc0\x9c\x7e\x7c\xd5\xb7\x56\x21\x77\x29\x9a\x3a\x63\x61\x84\x4c\x89\xb5\x46\xd9\x3a\x8f\x60\xab\xce\xf3\xe8\x94\x3c\xd8\x2d\xfe\xc5\x59\xa8\x3c\x6e\x6d\x31\x2c\x1d\x6d\x27\xd1\x35\xf6\xb0\x19\xcd\x98\x0f\x44\x1b\x09\x24\x72\x91\xd0\x0c\xda\x48\x68\x86\x3a\x14\x36\x26\xaf\x3c\xb6\x13\xa9\x0b\x0d\x10\x34\xe5\xc4\x41\x41\xe4\xc7\x8f\xd7\xbf\x45\x76\x57\x19\xd4\xe3\x04\x1f\x6e\x2d\x01\xe6\xbd\x43\xd8\xe3\x30\x83\xe2\x23\xea\x98\x3f\x15\x51\xbb\xb9\x0f\x9d\xd2\x0d\xa9\xe3\xda\xd1\x38\x20\x80\x98\xa2\xbd\x18\x51\x04\x3f\xa1\xa1\x77\x8b\x0d\xa8\xe3\xed\x02\xea\xc2\xe7\xc2\xe9\xe1\xcf\x0a\xa7\x3e\x21\x44\x1f\xa0\xb7\x45\x3e\x38\xad\xc2\xe4\x87\x1f\x76\xbd\xae\x91\x6f\x83\x08\xea\xd6\x88\xb1\xd8\x17\x23\x83\xed\x51\xcd\x81\x44\x07\x14\xab\xd2\xf4\xd4\x13\x94\xf3\x62\xe0\xd9\x04\x90\x13\x4f\xe9\x1a\xb0\x8f\xae\x43\x77\x18\x76\x18\xb8\xdf\x4d\x78\xd8\xc0\x24\x2c\x31\x6d\xcf\xde\x6c\xf7\xe0\x52\xee\xf6\xdf\x77\x4c\xbd\x93\x61\xef\x2d\xa5\x4e\x50\x83\x6b\x3d\x07\x01\x94\xf7\xbc\x22\x70\x32\x03\xc6\xd0\xbf\x16\x44\x94\xc5\x1a\xfe\x43\x6e\xb6\x14\xe0\x64\x42\x71\x0b\x6c\x40\x38\x06\x0a\x21\x2a\x9c\xec\x47\xde\x1b\xef\xa7\x77\x30\x7a\x93\x7b\xb6\x96\x83\x5d\x1d\x26\x46\x68\xa7\xbe\x4e\x92\x82\x95\x73\x10\x39\x22\x17\x6d\x20\xf0\xdc\xc0\xcb\x86\xb9\xe3\x84\xd5\x54\xb7\x42\x9d\xcd\x66\x3c\xd8\x73\x9d\x16\x6e\xcd\x7f\x31\x26\x51\x0d\x07\xa2\x28\x60\xb6\x9b\x89\xe8\x06\x5f\x29\x86\x72\x77\x34\xd8\x58\xb5\xf2\x90\xaa\xa3\x91\xeb\x21\xcf\x35\xf7\xe8\xd9\xdd\xc4\x37\x13\x1d\xb2\xdd\x56\xf2\x2d\x1d\xc0\xd9\x72\xb8\xfc\xff\xdb\xea\x87\xdc\x01\xe7\xd3\x42\x1f\x10\xd1\x0a\xb1\x92\x78\x8e\x27\x14\x0e\x7c\x4a\xb1\x9c\xe8\xdb\x29\xc9\x4b\x48\x21\x3c\x20\x12\xf8\xab\xcf\x40\xc6\x6a\x97\x5d\x6a\x41\x15\x80\x02\xae\x25\xa1\x86\x9b\x1d\x18\xb4\xd4\x75\x46\x4d\x9a\x1e\xb5\x7d\xf2\x70\x3b\x3d\x6a\x0b\xd5\x95\xa9\x6b\xac\x41\xcd\xef\x71\xa4\xc6\xf6\x6d\x0a\xdf\xda\x26\xb5\xdd\x9a\x0f\x37\x2b\x63\x7e\xd0\xad\xce\x83\xa4\xda\x04\xfa\x3f\xd5\xe7\xbf\x43\x4b\x7b\x7e\x47\x33\x0d\xed\xe9\xd6\xf5\x95\xce\xb5\xaf\x61\xf9\x64\xdf\x69\x95\x56\x47\xe3\x59\x9d\xeb\xdb\xfe\x30\x60\xe3\xe0\x6d\xf0\x96\x1a\xb7\x07\xf7\x70\x9e\xb3\x8f\xa5\x63\xd6\xc6\xd3\xe1\xb4\x91\x0c\x70\x5c\x2c\x29\x9c\xd6\xc3\x58\x5e\xfa\x58\x82\x91\x47\xde\xd6\x97\x03\x77\xcb\x71\x92\xe8\x8a\x18\xb4\x37\x26\xd6\xda\x97\x09\xde\xc3\xba\x7b\x95\xa6\xc6\xfd\x69\xea\xba\x47\x72\x27\x45\xe9\x8e\x0f\xd6\x8e\x76\x03\xb2\xa4\x20\xb9\xaf\x51\xac\x9b\x2d\x26\x83\xa3\x45\x1d\xde\xce\x38\xaa\x4d\xc0\xea\x66\x5d\x31\x47\xee\xae\x95\x9a\x0c\x9a\x92\x0c\x28\x11\xb1\xcd\x9d\xad\xcb\x22\x0d\xea\x5c\xef\x28\xc3\xf3\xef\x6f\x6f\xfa\xfe\x84\xd1\xfe\x6c\x5d\x52\xa7\xe6\x53\x0d\x3e\xe2\x3d\xae\xbe\x23\x1d\x95\x74\x45\xf4\x65\x16\x1c\xd3\xe9\x6a\x8a\x43\x4c\xff\xc4\xbc\x5c\xb1\x5a\x32\xf7\x3a\xe3\x8f\x2c\xc7\x13\x71\xa4\xe9\x7a\xa3\x9c\x7b\x42\x7f\xc5\x64\x61\x5b\x40\x4b\x8f\xb2\x5b\x04\xd0\xa0\x81\x63\x71\x69\x6f\xb5\xcd\x4b\xd4\x21\x51\x62\x0e\x67\x4f\x02\xe7\xb5\x82\x56\x12\x82\x4f\xd0\x01\x76\x19\xa5\x9a\x75\xb7\xac\x53\x66\x1c\x1d\x1b\xea\x88\xd0\x9a\xd3\x98\x3d\x56\xd0\xb5\x58\x3e\x8e\x66\xb4\x40\x5c\xbd\x8a\x0a\xd7\xa2\xf0\xa2\xbc\x5a\xbd\x91\x04\x7c\xa7\x87\xac\x63\x1c\xb5\xd1\xd5\x8d\xd1\x04\x90\xf9\x9c\x62\x94\xc0\xaf\x80\xb7\x9f\x0a\xaf\x60\x63\xcd\xf4\x7f\x87\x35\x4a\x8d\xcb\xfc\x3b\xed\xf8\x6e\x5a\x83\xd9\x91\xfd\x24\x71\x1c\xb9\x6f\x5f\xa3\x94\xba\x10\xa5\xf0\x1e\x86\x8b\xe7\xde\x1b\x6d\x5c\x8d\x87\x5d\x0e\x78\x8f\x7b\xb1\x4d\x11\xc8\x75\x68\xf0\x13\x38\xb4\xe0\x0e\x85\x42\x82\xaf\x80\x18\x94\xf5\x7a\xfd\x43\x2c\xb5\x52\xa3\xb4\xe0\xad\x71\x4d\xb1\xab\x65\xfb\x38\x4a\x41\x82\xce\xe3\x56\xf3\x6c\x6d\x3f\xad\xed\xff\x24\x82\x05\x9f\xcc\x85\x80\x28\xd2\x8a\xcb\xce\xc7\x18\xf3\x01\x06\xbf\x25\x9d\x27\x97\xee\x73\xcc\xbe\xef\x3c\xfb\x99\x3f\xf7\x13\xe1\x5d\xf7\x0b\xe1\xce\x67\xa4\xd4\xd5\x25\xd4\xaa\xfe\xe0\xfa\x9f\x00\x00\x00\xff\xff\x42\xb8\x28\x99\x82\x1d\x00\x00")

func staticsTopologyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticsTopologyHtml,
		"statics/topology.html",
	)
}

func staticsTopologyHtml() (*asset, error) {
	bytes, err := staticsTopologyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "statics/topology.html", size: 7554, mode: os.FileMode(436), modTime: time.Unix(1448024449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"statics/topology.html": staticsTopologyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"statics": &bintree{nil, map[string]*bintree{
		"topology.html": &bintree{staticsTopologyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

