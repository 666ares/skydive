// Code generated by go-bindata.
// sources:
// statics/topology.html
// DO NOT EDIT!

package statics

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticsTopologyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x5a\x7d\x6f\xdb\x36\x1a\xff\xdb\xfd\x14\xac\xd2\x9b\x1d\x34\x96\xf2\xd2\xed\x06\xd7\x0e\x70\xed\x8a\xbb\xfc\x71\x6d\x81\xa5\xb8\xbb\x19\x41\x41\x4b\xb4\xcd\x84\x16\x55\x91\x76\xe2\x15\xf9\xee\xf7\x3c\x7c\x13\x2d\xdb\x49\xd6\x75\xc3\x36\x4b\xe4\xf3\xc6\xdf\xf3\x46\x8a\xe9\x0c\x9f\xff\xf2\xe1\xed\xe5\xff\x3e\xbe\x23\x73\xbd\x10\xe7\xcf\x3a\x43\xfc\x25\x82\x96\xb3\x51\xc2\xca\xc4\x8c\x30\x5a\xc0\x6f\x67\xb8\x60\x9a\x92\x7c\x4e\x6b\xc5\xf4\x28\x59\xea\x69\xff\xe7\x24\x6b\x66\xe6\x5a\x57\x7d\xf6\x65\xc9\x57\xa3\xe4\xbf\xfd\x4f\xff\xe8\xbf\x95\x8b\x8a\x6a\x3e\x11\x2c\x21\xb9\x2c\x35\x2b\x81\xed\xe2\xdd\x88\x15\x33\x16\x33\x96\x74\xc1\x46\xc9\x8a\xb3\xdb\x4a\xd6\x3a\xa2\xbd\xe5\x85\x9e\x8f\x0a\xb6\xe2\x39\xeb\x9b\x97\x23\xc2\x4b\xae\x39\x15\x7d\x95\x53\xc1\x46\x27\x4e\x8e\xe6\x5a\xb0\xf3\x5f\x6f\xd6\x05\x5f\x31\x22\x24\x4c\x12\x2d\x2b\x29\xe4\x6c\x3d\xcc\xec\x2c\xd2\x09\x5e\xde\x90\x79\xcd\xa6\xa3\x04\xcd\x55\x83\x2c\x5b\xd0\xbb\xbc\x28\xd3\x89\x94\x5a\xe9\x9a\x56\xf8\x92\xcb\x45\x16\x06\xb2\xb3\xf4\x2c\xfd\x31\xcb\x95\x6a\xc6\xd2\x05\x07\x2a\xa5\x12\x52\x33\x31\x4a\x94\x5e\x0b\xa6\xe6\x8c\x69\xb4\x07\x15\xa9\xbc\xe6\x95\x26\xaa\xce\xad\x26\x50\x94\xcb\x82\xa5\xd7\x5f\x96\xac\x5e\x1b\x05\xf6\xb1\x7f\x9a\x9e\xa4\xaf\x8c\xbc\x6b\x95\x9c\x0f\x33\xcb\x79\xbe\x4f\xc8\x5a\x4b\x58\x7a\xc5\xd2\x19\xd7\xf3\xe5\x24\xe5\x32\x1a\xbb\x56\x19\xad\xf8\xc6\x40\x5f\x50\xcd\x94\x8e\xc6\x9e\xa4\x0a\x91\x41\x24\x6a\x7a\x0b\x8a\x8c\xbd\x79\xc5\x34\x20\xa9\xb3\x82\xce\x6a\x96\xad\x8e\xd3\xbf\xa7\xaf\xb2\x82\x2b\x37\xf2\xed\x82\xbd\x69\x9b\x86\x5b\x35\x27\x00\xcf\x69\x33\x61\x47\x5b\x6a\xf6\x61\x55\x94\xd7\x2a\xcd\x85\x5c\x16\x53\x41\x81\x0b\x95\xd1\x6b\x7a\x97\x09\x3e\x51\xd9\x17\xcd\xab\xd3\xec\x34\x3d\x4d\x8f\x9d\x2f\x52\x1c\xda\xbd\x8c\x56\xe0\xfc\x39\xe9\x3b\x03\x87\xe8\x75\x05\x69\xa0\xd9\x9d\xce\x0c\x41\xf6\x27\xf1\x43\x75\xc6\x80\x1f\x23\xf8\x8c\x0d\x3b\xd0\x43\x3b\x50\xdf\x44\x16\x6b\xf2\x15\x1e\x3a\x15\x2d\x0a\x5e\xce\xfa\x90\x46\x03\xf2\xe3\x71\x75\xf7\x1a\x47\x27\x34\xbf\x99\xd5\x72\x59\x16\xfd\x1c\xb2\xab\x1e\x90\x03\xc6\x18\x4e\xdd\xc3\x7f\x07\xb9\x63\x36\xc9\x3a\x20\x27\xc7\xc7\x7f\x33\x6c\x73\xc6\x67\x73\x1d\x0d\x40\xd8\x54\x82\xae\x07\x64\x02\xc9\x7a\x63\x86\x2a\xa9\x20\xb5\x65\x39\x20\x74\xa2\xa4\x58\xea\x20\x16\x6c\xb5\xf6\x35\x80\xa0\xad\x9d\x15\xad\x89\xba\xe5\x3a\x9f\x5f\x2c\x66\x64\x44\xba\x11\x40\xa7\x29\x87\x3a\x32\xe5\x65\xc1\x6a\x83\x52\x41\x35\xcd\x70\x4c\x65\xb7\x30\x2a\x6f\x55\xff\xe7\x3e\xd4\x9f\x5a\xf6\x8d\xf4\xec\xa7\x57\x99\x15\x96\x56\xe5\xac\xfb\xda\x2b\xc0\x9a\xf4\x9d\xc4\x4f\x85\xbc\xfd\x8c\x05\x54\x6f\xaa\xe0\xa5\x9e\x7e\x27\x15\xb7\xbc\x66\xc5\xe7\x92\xe9\x5b\x59\xdf\x38\x2d\xa8\x66\xba\x2c\x73\x04\x97\x80\x57\x2f\xa5\x14\x10\x06\xbd\x7c\x0d\xe5\xb4\x38\x22\x4c\x1c\x5a\xaf\x75\xf8\x94\xf4\x9e\xf7\x92\x7f\x43\x55\x46\x65\x10\x84\xbc\xc4\xe9\x43\x33\xdb\xa9\x99\x5e\xd6\xa5\x15\x68\x0c\x5f\x38\x42\xb4\xdc\x2e\xa7\x33\x95\x35\xe9\xdd\x58\xbe\x71\x24\xe9\xca\xeb\xe8\x04\xa6\x97\x23\x72\x43\x5e\x92\xee\x80\x74\xe1\xa7\x45\x3e\xbe\xb9\x82\xc1\x64\x38\xa9\xb3\xf3\xc4\x8a\xbe\xb7\x8a\xf3\x75\xfa\xa2\xd7\x3d\x40\x1e\x5e\x1c\x9a\xac\xea\x39\xd1\xae\x73\x0c\xbc\xaa\x8e\xa9\xfc\x83\x6e\x90\xdb\x3d\xf2\x13\x90\x66\x83\x60\xbf\x1d\xbc\x77\x93\x06\xcc\x46\x46\x2e\xa8\x52\x4c\x81\x95\xa8\xaa\x1f\x7a\x40\xd7\x71\x59\xdb\x0e\x8d\x8d\xf7\x9b\x60\x17\x90\xa5\x97\xae\x0d\xf5\x7c\x3f\xf2\x40\x20\x80\x90\x2f\x23\x12\xb2\xd3\x2f\xa3\x86\x8e\x0b\xa9\xe1\xc5\xf4\x0e\xbd\x29\xd6\xed\xa9\xe1\xd2\x73\xae\x5e\x6f\x1a\x8e\xcb\xa7\xbc\x64\x90\x95\x85\xcc\x97\x0b\x80\x22\x9d\x31\xfd\x4e\x30\x7c\x7c\xb3\xbe\x28\x7a\xdd\x7c\xdd\x3d\x74\xe4\x15\x85\x5c\xfb\x4a\xee\x4c\x5a\x1e\x11\xd0\x78\x4c\xbc\x28\x28\x53\xbf\x49\xb9\x80\xa1\xf4\xd4\x0f\xd1\x3b\x3b\x74\xe2\x06\x7e\x87\x37\xa8\x10\xef\x4a\x0a\x2d\xbe\x18\x10\x5d\x2f\x99\x9b\x5a\x2a\x56\xff\xb6\x7f\x1a\x34\x97\x0f\x70\x7e\xdc\x3f\x3d\x91\x77\xbf\x32\xc1\x0c\x2e\x3b\xe6\x09\xfc\xe3\xdc\x37\x26\x59\x06\x20\x31\xd2\xd4\x58\x82\xc1\x89\x43\x33\x70\xdf\xdc\x0a\x44\x8e\xaf\xcd\x63\x47\x19\xe9\x58\xd8\xba\x25\x34\x6c\x1f\x30\x76\x6e\x23\x30\xcc\x50\xa7\xdb\xae\x88\x18\xce\x07\xd3\xe9\x74\x83\xb3\xd3\x15\x74\xc2\x04\xce\x61\xbc\xf5\xcc\xdb\x61\x8b\x44\xcd\x21\x06\x90\xa4\x06\x0b\x60\x07\x26\x58\x8b\x20\x52\xc5\x17\x74\xc6\x82\x38\xbe\x98\xed\x17\x86\xf4\xfb\x24\x4e\x21\x62\xfa\x8a\xff\x8e\x94\xa7\xa7\xd1\xd4\x7d\xf3\x7c\xdf\x40\xfb\x00\x58\x63\xb0\xe1\xf9\x28\x29\x65\xc9\x92\xab\xc7\x51\x33\x0d\x02\x94\xfe\xf4\x6a\xd3\x20\xdb\x28\xcc\xc4\x83\xd6\x3c\xe4\xb7\x17\xe8\x38\x72\x4e\xb6\xfc\x07\x6d\xb5\x6d\x47\xd4\xe5\x10\xac\x13\xe8\x73\x2d\x88\x3c\x85\x60\x53\xfd\x08\xc9\x44\x6a\x2d\x17\x8f\x10\xd5\x6e\x81\xbb\x68\xb0\x2a\xf5\x57\x54\xf0\x59\x89\x14\x68\xd4\x0e\x82\x79\x20\xc8\x21\xad\x59\xbd\x3f\x4a\x9a\x80\xa4\x94\x3e\x31\x40\xbe\x19\x76\xdc\xd6\x3f\xdd\xf1\x36\x70\x91\xe7\x3f\x38\xd2\x0e\x5f\xd8\x6f\xb1\xc6\xfc\x40\xfb\x16\x47\x76\xd2\x1a\x65\x81\xd6\xbc\xb5\xe9\x34\xad\xa1\x1a\xf6\x69\x5d\xcb\xdb\x08\x9a\xb3\xb3\xb3\x7d\x8b\x0e\x81\x7f\xd5\xe4\x00\xec\x5a\xe4\x32\xb4\x18\xc3\x82\x07\x18\xa3\x19\xb6\xa6\xdd\x86\xb2\x33\xe5\xda\x16\xa7\x67\x9b\x12\xb1\x59\x98\x87\x8a\xb1\x1a\x62\x02\xaa\xf9\xd7\x7b\x5b\xcb\x97\x4b\x0e\xfd\xf9\xa2\x88\x86\x26\x35\x87\x95\xab\x6d\x22\xd8\x35\xb8\x41\x33\x0a\xe5\x6e\xca\x6b\xa5\xe1\xe0\x63\x1a\x0f\xa1\x42\x98\x6a\x87\x79\xa0\x9a\xe6\x8c\x7d\xc7\xca\x7c\x0f\x76\x63\xa7\xf6\x9d\x69\x9c\x7c\x58\xa9\x37\x56\x5d\xd4\xb0\x2d\xb1\xb1\xa9\xe1\x73\x4a\xdd\xe4\x1b\x79\x67\xe6\xbb\x8d\x80\xcf\xd8\xa0\x3d\xab\x6b\x54\xd0\xba\x21\x0b\x7a\x5f\xd1\x47\x80\x20\x87\xda\x1d\xf1\x1f\x11\x53\x16\x07\x91\x94\x2e\xec\x50\x16\x33\x53\x8b\x4b\xd6\xbd\x0f\xc0\xed\x97\x14\x89\x69\x8c\x3d\x22\x15\xec\xd0\x71\x63\xb0\xa1\xce\x88\x0e\x1b\xc8\x48\x3a\xee\xf9\x10\xf0\xdd\xc0\x8c\x1b\xc1\x57\xe3\xe4\x23\xd2\x26\x57\x96\x31\x00\x8c\x12\x3c\xbc\x46\x5a\x40\xd3\x08\x8f\xc0\x84\xc7\x97\x81\xdc\x1b\xb0\x6b\x7d\x96\x2f\xac\xce\xb3\x3c\xb4\x36\xb7\x77\x8d\x56\xd6\x69\xed\xff\xbc\x50\x63\xe3\xd8\xcb\xbc\x6a\xe8\x21\xaa\xac\x5c\x0c\x2b\x9c\xdf\x6f\x60\xb4\x9e\x6e\xff\xbc\xeb\x96\x85\xd2\x95\x5c\xd6\x39\x8b\x5d\x64\x73\xb1\x59\x94\xab\x15\x09\x6c\xfc\x79\x91\xc0\x9e\xd4\x17\x86\x01\x79\x65\xdf\xde\xda\xe3\x46\x82\xf9\x9a\xc4\x2b\xc2\xdd\x33\x3a\xab\xb5\x84\x71\x72\x81\xc5\x71\x4a\x73\x16\xdc\xd3\xf8\x07\x99\xbc\x7f\x8c\x80\xc6\x3f\x46\xa0\x71\x90\xf3\xd4\xcb\x40\x1d\x74\x9a\x14\x04\x0a\xc3\x3a\xf6\xd3\xa0\xf3\xd3\xa7\x8b\x5f\x92\xab\xd7\x31\x19\xa6\xf3\x18\x1f\xae\x1c\x43\x48\x87\x38\x93\x37\x28\x22\x91\x8d\xca\x1d\x88\x5b\x69\x21\x24\x3c\xd3\x43\x21\xe1\xce\x1a\x31\x80\xed\x98\xf0\x52\x5b\x96\x44\x0c\x10\x14\x88\x0d\x86\x04\x4e\x3f\x60\x61\x80\xd0\x45\x84\x97\xed\x23\xc2\xfb\xdf\xc7\x43\x98\xff\xf6\x78\x30\xa7\x98\xe4\x23\x94\xd6\x24\x78\xb7\x59\x05\xf9\xe1\x87\x6d\xaf\x19\xe2\xab\x28\x04\x4c\x65\x46\x5f\xee\xf2\xb1\xa5\x0e\xa4\xf6\xd0\x64\x02\x02\x93\xdd\x96\xf4\x43\xd4\xf3\xbc\x17\xc4\x44\x33\x87\x81\xd3\xd7\xff\xe0\x7b\x4f\x1e\xe2\xc3\x35\x23\xff\x7b\x1f\x9f\x83\x30\x8c\x4b\x0c\xfc\xe3\xd7\x9b\xc5\xbd\x54\xdb\x85\xfd\x3d\xd3\xef\x55\x5c\xd4\x4b\x65\x42\xdc\xd2\x7a\xec\xc0\xaf\xea\x86\x57\x04\xce\x8f\x20\x19\x0a\xe3\x9c\xc8\x52\xac\xe1\x7f\x28\xce\x65\x13\x9c\x9a\x28\x6e\xcf\xed\x14\x36\x18\x21\x65\x85\xbb\x8e\x67\x01\x8f\x0f\x93\x6b\xd8\x16\xa4\x37\x6c\xad\x7a\xdb\x46\x8c\xad\xd6\x56\x8a\x1e\xa6\x82\x95\x33\x50\x39\x24\xa7\x8d\x2b\xf0\x4c\xc3\xcb\x25\xf3\x47\x1d\x67\xa9\xa9\xb1\x26\xc8\x6d\xdf\x71\xa7\x4f\xa3\xdc\xad\xff\xf9\x88\x24\x35\x1c\xd6\x92\x48\xd8\x76\x80\x22\x0e\x21\x81\x2c\xe7\x76\xcf\x71\xde\x6a\xf4\x21\x57\xcb\x22\x5f\x86\x9e\xba\xdc\x67\x4f\x2e\x48\xa1\x1e\x19\x9f\xc5\xd5\xe8\x69\xb5\xc8\x8b\x31\x5f\x18\x5c\xfe\x7b\x5e\xc4\x6b\x8b\xf1\x72\x5d\xc1\x26\x9e\x8c\x00\x40\x5b\x40\x92\xb8\x3a\x1a\x31\xa1\x6b\x36\x69\xe7\xda\xc4\x96\x21\x1b\x69\x19\x21\x80\x2b\xb5\x3c\x71\xe2\x19\x40\xf2\x39\x17\x85\x47\xc3\xd2\xb4\x62\x25\xe2\xe8\x18\x6a\x97\xac\xbb\x88\xc7\x41\x5c\x00\xa5\x61\xb6\xd9\xdb\x88\x08\x0a\x55\x9c\xa8\x7e\x13\x36\x0e\x84\x98\xae\x08\x7c\x48\xd5\x90\xab\x51\xd2\xee\x0f\xbb\x47\x2b\xb7\x0f\x36\x5f\xb6\x1f\xec\xe2\x8f\x56\x6c\x48\x6c\x58\x28\x15\xe6\xcb\x02\xae\x51\xae\x14\x7e\x0a\x22\x94\x14\x70\x68\x61\x05\x31\x1f\x38\x15\x2f\x21\xbf\xf1\xcb\x02\x81\x7f\xcd\xe1\xd9\x3a\xc1\xa7\xbe\x9e\x53\x0d\x53\x91\xd4\x92\x50\x2b\xcd\xb9\x9f\x96\xa6\x0c\x52\x5b\x43\xa2\x28\xf3\x05\xd2\xb7\xc4\xc8\x85\x3b\xf0\x31\xd4\xa1\x6b\xe0\x5b\xd3\x33\x36\x9b\xea\xfe\xde\x61\x57\xb6\xd9\x3c\x7e\x6a\x35\x8f\xe3\xe3\xe3\x24\x4a\xf1\xfb\x28\xa5\x1e\xe8\xdb\x7f\xa0\x6d\x7f\x87\x66\xf4\xf4\x5e\x64\x83\xf9\xe1\xa6\xf3\x58\xcf\xd9\xd5\x6a\x42\x95\xda\xea\x72\xce\x48\xeb\x1a\x53\xa4\x36\xa1\x73\x52\xad\x8b\x36\xe7\x37\x0c\xb9\xda\x7f\x42\x08\xb2\x43\x38\x78\x69\x4d\x48\x78\x9a\x26\x18\x22\x1a\x1f\x0e\x54\xcd\xdb\xe1\xb0\x77\x2f\xf1\xd0\xe2\x7d\x7d\xf0\x8b\xf7\xd1\x1d\x47\x44\x28\xa2\xd8\x85\x56\x4c\xcf\xa3\x12\xba\x0b\x2c\x5f\x5f\x36\xc0\xd8\x09\x5b\x0c\xeb\x3d\x61\x42\xb1\xe6\x6b\xe7\x0e\xf2\xdd\x82\xf7\xfb\xab\xd5\xd5\xfe\x42\x7f\xfc\x91\xad\x5d\x88\x48\x6b\xd7\x8b\x9e\xff\xbe\x79\x98\x9a\x92\xd6\x6b\xbe\x95\x3a\x34\x5e\xa4\x78\x17\xe3\xbf\xa8\x2e\x6b\x3c\x56\x66\xbe\x37\xa7\xd7\x4a\x96\xfe\xeb\x80\x5b\x5a\x73\x42\x58\x50\xb0\xb7\x6b\x48\x1c\x18\x8e\x92\xd5\x35\xda\xb5\xa5\x2b\x10\xa0\x28\xf4\xbb\x67\xf7\x1f\x94\x97\x39\x34\x22\x15\x71\x22\x61\x13\x10\x1b\x9f\x89\xcd\x54\xeb\xc3\xae\xb6\x32\xff\xf9\xee\xb2\x1b\x3e\x20\x34\x3f\x1b\x17\x55\x99\xbd\xae\xc5\x47\xbc\xcb\x31\xf7\x24\xc3\x92\xae\x88\xf9\x8c\x3d\x4a\xe0\x71\x82\x7b\x44\xf3\xd3\xe7\xe5\x8a\xd5\x10\x41\xee\x75\xca\xef\x58\x81\xdf\xc2\x12\xc3\xd7\x19\x16\x3c\x30\x86\x8f\xcb\x6e\x6e\x63\xd2\xf1\xa3\xee\x86\x00\x2c\x58\x6a\x2d\x4b\x77\xb3\x65\x5f\x92\x16\x8b\x96\xb3\x99\x60\x24\x97\x42\xd0\x4a\x41\x7e\x12\x04\xc0\x0d\xa3\x56\x3b\xee\x87\x4d\x14\x8d\x92\x03\xcb\x9d\x10\x5a\x73\xda\x67\x77\x15\xb4\x1d\x56\x8c\x92\x29\x15\x48\x6b\x46\xd1\xe0\x5a\x8a\xa0\x2a\x98\xd5\x19\x2a\xa0\xf7\x76\xa8\xba\x8f\x1b\xd9\xe4\xfc\xd2\x5a\x02\xc4\x7c\x46\xd1\x4b\x80\x2b\xd0\xed\xe6\xc2\x6b\x98\xbe\x11\xfa\xd7\x51\x0d\x33\x0b\x59\x78\xa7\x2d\xec\x26\x35\x2c\x3b\x71\xd7\x92\x07\x89\xbf\xff\x1e\x66\xd4\xbb\x28\x83\xf7\xd8\x5d\xbc\x08\x68\x34\x7e\xb5\x08\xfb\x18\x08\x88\x07\xb5\x4b\x11\xe9\xf5\x64\xf0\x13\x01\x2a\xb8\x27\xa1\x10\xe0\x2b\x60\x06\x63\x83\x5d\xff\x92\x0b\x63\xd4\x30\x13\xbc\x59\xdc\x52\x6c\x5b\xd9\x3c\x0e\x33\xd0\x60\xe2\xb8\xb1\x3c\x5f\xbb\xeb\xf5\xdd\xd7\xa2\x98\xf0\xe9\x4c\x4a\xf0\x22\xad\xb8\x6a\x5d\xc8\xda\x4b\x58\xbc\x4f\x3e\x49\xcf\xfc\x95\xec\xae\xbb\xde\xdd\xc2\x9f\xfa\x67\x02\xd7\xed\xbf\x12\xd8\xba\x4a\xce\x7c\x5e\x42\xae\x9a\x3f\xba\xf8\x7f\x00\x00\x00\xff\xff\x34\x4c\xb6\xc7\x86\x21\x00\x00")

func staticsTopologyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticsTopologyHtml,
		"statics/topology.html",
	)
}

func staticsTopologyHtml() (*asset, error) {
	bytes, err := staticsTopologyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "statics/topology.html", size: 8582, mode: os.FileMode(436), modTime: time.Unix(1448298823, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"statics/topology.html": staticsTopologyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"statics": &bintree{nil, map[string]*bintree{
		"topology.html": &bintree{staticsTopologyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

