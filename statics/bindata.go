// Code generated by go-bindata.
// sources:
// statics/topology.html
// DO NOT EDIT!

package statics

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticsTopologyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x3c\xfd\x73\xdb\x36\x96\xbf\xef\x5f\xc1\x30\xbd\x9a\xbe\x48\xd4\x87\xe3\x8e\xa3\x58\x9e\xc9\xc5\x69\x9b\x9b\x6b\xda\x9b\x66\xe7\x76\xc7\xd3\xe9\x40\x24\x24\x31\xa6\x08\x2e\x01\xc9\xd2\x75\xf3\xbf\xdf\x7b\x00\x41\xf1\x03\x20\xa9\xd8\xd7\xee\xec\x2c\x67\x12\x8b\xe4\xc3\xc3\xc3\xfb\x06\xf0\x08\x07\xae\xeb\x67\xb7\x3f\xbe\xfd\xf8\xd7\x9f\xde\x39\x6b\xb1\x89\x6f\xfe\x24\x9f\xe1\x4f\x27\x26\xc9\x6a\xee\xd2\xc4\xd5\x0f\x29\x09\xd5\x4f\x79\xbb\xa1\x82\x38\xc1\x9a\x64\x9c\x8a\xb9\xbb\x15\xcb\xe1\x95\x3b\xaa\xbf\x5f\x0b\x91\x0e\xe9\xdf\xb6\xd1\x6e\xee\xfe\x65\xf8\xe7\x37\xc3\xb7\x6c\x93\x12\x11\x2d\x62\xea\x3a\x01\x4b\x04\x4d\xa0\xf1\xfb\x77\x73\x1a\xae\x68\xb3\x79\x42\x36\x74\xee\xee\x22\xfa\x90\xb2\x4c\x94\x5a\x3c\x44\xa1\x58\xcf\x43\xba\x8b\x02\x3a\x94\x37\x03\x27\x4a\x22\x11\x91\x78\xc8\x03\x12\xd3\xf9\xa4\x82\x4d\x44\x22\xa6\x37\x3f\xdf\x1f\xc2\x68\x47\x9d\x8f\x2c\x65\x31\x5b\x1d\xae\x47\xea\xf9\x9f\x8e\x80\x71\x94\xdc\x3b\xeb\x8c\x2e\xe7\x2e\xd2\xce\x67\xa3\xd1\x86\xec\x83\x30\xf1\x17\x8c\x09\x2e\x32\x92\xe2\x4d\xc0\x36\xa3\xe2\xc1\xe8\xc2\xbf\xf0\x2f\x47\x01\xe7\xc7\x67\xfe\x26\x02\x28\xce\x5d\x27\xa3\xf1\xdc\xe5\xe2\x10\x53\xbe\xa6\x54\x20\x59\xc7\xee\x78\x90\x45\xa9\x70\x78\x16\xa8\xfe\xa0\xbb\x80\x85\xd4\xff\xf4\xb7\x2d\xcd\x0e\xb2\x1b\xf5\x73\x38\xf5\x27\xfe\x4b\x89\xf5\x13\x77\x6f\xae\x47\xaa\xe5\x8d\x1d\x15\x92\x0e\xa4\x7e\xe2\x7e\x10\xb3\x6d\xb8\x8c\x49\x46\x25\x42\xf2\x89\xec\x47\x71\xb4\xe0\xa3\xf0\x02\x48\xbf\xf4\x27\x63\xf8\x65\x40\x5d\xc2\x8d\xe4\x1f\xfb\x42\xf5\x18\x38\x0b\x16\x1e\x9c\xdf\x8a\x87\x78\x49\x49\xcc\x26\xe3\xf1\xbf\xbd\xae\x3c\x5f\xd3\x68\xb5\x16\xb5\x17\x9f\x8f\x1d\x18\x50\x6d\x48\xb6\x8a\x92\x99\x43\xb6\x82\x55\x91\xa5\x24\x0c\xa3\x64\x35\x14\x2c\x9d\x39\x97\xe3\x74\x5f\x7d\xbd\x20\xc1\xfd\x2a\x63\xdb\x24\x1c\x06\x20\xe5\x6c\xe6\x3c\xbf\xb8\xb8\x30\x76\xeb\x8b\x5c\x11\x8c\xc3\x70\xac\xe3\x70\xac\x03\xf1\x13\x90\x5e\x0d\xdb\x32\x8a\xe3\x99\x13\x63\x4b\x2e\x28\x8d\x17\xf1\x96\x56\xd1\x82\xc6\xb0\x7b\x0a\x84\x5e\x5d\x5d\x99\xde\x0c\x35\x41\xd5\x97\x2c\x25\x41\x24\x0e\x33\x67\xec\xbf\x32\x53\x13\x44\x59\x10\x9b\xe8\x19\x16\x6d\x27\xfe\xb8\x65\x24\x82\xee\x85\x71\x38\xcf\x27\x93\x1a\x35\x29\x8b\xc0\x38\xb3\x21\xdd\x81\x85\xf2\x99\x93\xb0\xa4\x36\xcc\x25\x58\x2f\x74\x38\x4d\xf7\xce\xf7\x34\xde\x51\x11\x05\x64\xf0\x26\x03\x9b\x1d\x70\x92\xf0\x21\xa7\x59\xb4\x6c\x1b\xbf\x85\x52\x94\x76\x6a\xa6\x72\xb9\x5c\x7e\x21\x95\xdf\x7c\x31\x95\x97\x66\x2a\xa5\x67\xf9\xcd\x2c\x77\x9b\x82\x82\xab\x5c\xfb\xeb\x6d\x1c\x9f\xac\x52\x55\x21\x8f\xfd\x97\x46\xfc\xe0\x0d\xc1\x06\x58\x2c\xa2\x3a\xff\x52\xc6\xc1\x9b\x32\x34\xc0\x05\x67\xf1\x56\xd4\xf0\xa3\x62\x0c\x09\x50\x00\x10\x31\x5d\x0a\xa3\x89\x42\xc7\x75\xeb\xfc\x02\x1d\x38\x1a\x74\xfb\x90\x17\x2c\x0b\x29\x98\xfb\x04\x70\x03\xc9\x51\xe8\x3c\x27\x84\x98\x60\x86\x19\x09\xa3\x2d\x48\x7f\x5a\x26\xaf\xc4\x17\x11\x0e\xc4\xba\xce\x91\xdc\xed\xe0\x68\x41\xc8\xf5\x81\xe9\xd7\x99\xf2\x10\xd6\xf7\xd2\x6b\x4d\x6c\x6f\x17\x4c\x08\xb6\xa9\x01\x94\x09\xab\x53\x65\xf0\x76\x2f\xdf\xbe\xf9\xf6\x72\x5c\xc5\x9f\xbf\x7b\x58\x47\x65\x41\x96\x10\x67\x34\x30\x1b\x7a\xd3\x40\xea\x26\x44\xe2\xb8\x8c\x52\xff\x82\x38\xa2\xa2\x46\x3d\x44\xdd\x54\xb0\xed\x48\xe6\xf0\x87\x48\x04\xeb\xf7\x9b\x95\x33\x77\xce\x4a\xb1\x6b\xea\x47\x10\xf1\x97\x51\x02\x32\x93\xa1\x2b\x24\x82\x8c\xf0\x19\x1f\x3d\xc0\x53\xf6\xc0\x87\x57\x43\xc8\x14\x32\x36\x94\x9d\x8d\xbe\x79\x39\x52\xc8\xfc\x34\x59\x9d\xbd\x6e\xf4\x84\x69\xc4\x13\xf5\xb3\x8c\xd9\xc3\xaf\x98\xff\x08\x4b\x5f\xc0\xa5\xe5\x13\xf5\xf5\x10\x65\x34\xfc\x35\xa1\xe2\x81\x65\xf7\x96\xee\x12\xfe\x44\x9d\xc5\xe4\x40\x33\x6e\xe9\x65\x91\x45\x90\xa9\x3d\x51\x4f\x22\xa3\xf4\x57\x70\x82\xdb\x40\x6c\x21\x39\x51\x3d\x56\x75\x70\x9b\x04\xe8\x86\x9c\x15\x15\x3f\x40\x46\x88\x58\xb9\x87\xa1\xe9\xbc\xa6\xad\x9a\xc0\x8d\x86\x42\x02\xaf\x05\x81\x4c\xf3\xe6\x5a\x64\xf0\x6f\x8d\x56\xc0\x53\x92\xcc\xdd\xa9\x7b\x73\xe6\xbc\x70\x10\x8f\xff\xfe\x16\x7e\x9d\x41\x2a\xb8\x86\xd4\x07\x00\xeb\x24\xe0\x15\x2d\x1d\xcf\xfd\xe1\xcd\x5b\x17\x84\xaa\x5a\x15\xc4\x38\x5f\x7f\x5d\x7b\x72\x27\x21\x7f\x39\x6f\x60\xc1\xeb\x48\xde\x0b\x49\x1f\x12\x16\xde\x5c\x63\x24\x48\x56\x37\xd0\x10\xcd\x46\xfe\x9e\x01\x35\xe1\x8d\x83\xaf\x0b\x5a\xeb\x7d\x38\x2f\xce\x24\x94\x95\xf0\x25\xcb\x1c\x0f\xd9\x72\xdf\xa4\xdc\xc4\x41\x3d\xd8\x7b\xe7\xd9\xdc\x91\x7d\x98\x87\x61\x1f\x0a\xd2\x7a\x8f\x1c\x6d\xa7\xff\x1e\x68\x77\xdc\x23\xf1\xee\xeb\x46\x3f\x9f\x9b\xc3\xa9\x75\x39\x52\xe2\x35\x0d\x3c\xa3\xa0\x52\xc9\xb1\x41\x15\x7d\x0d\x35\x32\xe8\x03\xa6\x3b\xf3\x42\xe1\xbc\xf7\xb7\x26\xfe\x88\x75\xc4\x51\x63\xe6\xce\xfb\xdb\x26\xc5\xf2\xed\x0f\x25\x05\xfc\xed\xb3\x05\xe8\x1d\x18\x91\x09\xc0\x40\x18\x82\xfe\xbf\x13\x66\xe8\xf7\x3b\x98\xc5\xac\x7b\x76\x8c\xcc\xfb\xb2\xf1\xd6\x44\x27\x3b\xf5\xd3\x8c\x09\x26\x0e\x29\xf5\x3f\xd0\x87\x7e\x82\x91\x1e\x50\x41\x26\xf4\x41\x4a\x13\x21\x9b\xe4\x48\x3d\xd4\x63\x43\xda\x0c\xca\x73\x1c\xd3\xdd\xfb\xdb\x5f\x10\x25\xfc\xb6\x2b\x99\x7a\xdb\xc2\xce\xfa\xa8\xbe\xa3\xa2\xdf\xa8\xf2\x0e\xaa\xf4\x9c\xda\x55\x3f\x05\x2a\x77\x25\xa5\x75\x72\x57\x20\xab\x66\x57\x03\x48\x6d\x32\xc8\x13\x06\x4e\xb0\x8e\xe2\xd0\x26\x3a\xaa\x1a\xa2\xe8\x10\x87\x59\x74\x08\xe4\xff\x24\xd1\x01\xac\xc2\x6b\x81\x7a\x8b\x9d\x01\x90\xec\xd4\x02\xd3\x47\x09\x0a\x4e\x00\x1c\x36\x32\xc0\x29\x3a\x0c\x90\x75\x40\x49\x4b\x1f\x8c\xb9\x28\x9a\x58\x3a\x04\x70\x4b\xe3\xba\x5a\xd9\x22\xa5\x8c\x0b\x51\x11\x13\x24\x51\xb6\x78\x20\x19\x01\xb8\xa5\x60\x4a\x5c\x89\x7e\x31\xc8\xc8\xe0\xb4\x43\x1a\x53\x41\xcb\x4a\x9c\xc7\xdd\xd3\xd4\x2b\xa7\xa0\x3c\x3a\xe4\x90\x89\xea\xbc\xc7\x92\xbe\xe4\x24\xcb\x27\x8d\x8e\xf1\xc2\xa0\xd7\x80\xf7\x63\x9a\xac\x20\x6f\x98\xcf\x9d\xb1\x8d\x3b\xcd\xd1\x95\xd1\x18\xfb\xb2\xf3\xe8\xa8\xbb\xfd\x09\x2e\x81\x3f\x82\x5e\x85\xe5\x44\x72\x4b\xca\x60\x26\xd4\x10\x56\x56\x28\xd6\x66\x5e\x09\x08\x37\x38\x9d\x30\xc4\x08\x7c\xbd\x4d\x21\x72\x51\xce\x82\x7b\x2a\x6c\x29\x22\xae\xff\x49\xa5\xf9\x36\x63\x9b\x5b\x08\x74\x1e\x46\x3b\x13\x1f\x56\xb9\xe5\xa3\xbb\x91\x2d\xbc\xf3\xb6\xdc\x09\xc2\x2a\x18\x0a\x22\xbb\x73\x25\xcb\x20\xb9\xb3\x70\xb7\x14\x86\x64\x27\x3a\x80\x99\x1d\x1a\x5e\xb5\x6c\x72\x5e\xed\x07\x1d\x05\xe4\x7a\xfa\xb5\xdb\x4f\x3c\x46\xca\xa5\x9c\xec\x94\xa7\xda\xaf\x2a\xba\xf3\x10\xe5\x55\xda\x2a\x6a\x94\x6a\xbb\x26\xeb\xc7\x2b\xc8\x5d\x6f\x27\x1e\xa9\x72\x12\x8d\x95\x95\x79\x58\x28\x58\x99\xc7\x86\x7a\x50\xb1\x60\x50\x59\x7b\xc1\xbb\x06\x2b\x90\x0c\x7b\x7a\x2b\x35\xba\x29\x98\xca\x10\x3a\x04\x53\xbd\x33\x6b\x2d\x4c\xfc\x25\x83\x6c\x9e\x1a\x07\xa1\xe7\x29\x30\x00\x6d\x27\x66\xba\x55\xe4\xb0\x4c\x60\xea\x33\x88\x8f\xe0\x55\x61\x0a\x01\xce\xc2\x5d\x33\x2e\x2c\x99\xbe\x15\x25\xa2\x83\x59\xe2\x96\xaf\x15\xed\x06\x10\x4d\x6c\xe1\xf0\x31\xda\x66\x5b\x73\xcc\x0b\x33\xf2\xe0\x9d\xb7\xfa\x8f\x82\x69\xa1\x8a\x74\xad\x4c\x7b\x66\x64\xdb\x89\x83\x34\xc6\x49\x9b\x5f\x95\xda\x79\x84\x53\x01\xb2\x03\x65\xeb\x2c\x4c\x02\x00\x1a\x99\xd8\xcf\xf5\x74\xd5\xd6\x02\x2f\x25\x14\x9e\xc6\x51\x40\xbd\x68\xe0\x4c\x2c\x46\x8a\xd7\x22\xa3\xe4\xde\xfc\xfa\xf3\x29\x31\xab\x2e\xe4\x47\x4b\x17\x4c\x42\xb2\xd2\x16\xde\x8b\xd0\xf7\x28\x93\x90\xcb\x41\xda\xe9\x95\x62\xb6\x11\x10\x33\x90\x22\xe7\x6c\x1a\x91\x39\x3c\xab\x46\x5f\x68\x5e\xb8\x5c\x9c\x9b\xd7\x6f\x9c\x6d\xb3\x80\xce\xca\x54\x0e\x1c\x41\xb2\x15\x15\xb3\x52\xce\xf0\xb9\xd5\x06\x75\x84\x7e\x42\x1b\xec\x94\xd2\x33\xa3\x9c\x6c\x0a\xac\x79\x51\x7f\x6e\x8b\x70\xd2\x88\x24\x9f\xda\x8c\x48\x02\x80\x11\xdd\xb9\x8a\x8d\xca\xe5\x95\xe7\x12\x5f\x7f\xed\x1c\x81\x14\x5b\x4b\x40\x92\xb5\xf6\x30\xa1\xe4\xd4\x6e\x71\x3d\x8c\xe7\x98\x3f\x3d\x56\x2c\x00\xab\xf7\x37\xbd\xb6\x99\x32\x3f\x06\x56\xbc\x6b\x52\x5d\xcb\x22\x94\xb7\x32\xf2\xa1\x1c\xc3\xe4\xdc\xc6\xa4\x88\x3a\x9e\x1f\xfb\x95\x5e\xb2\xb3\x5f\x6a\xf7\xb9\x65\x47\xa1\xfb\xed\xc3\x23\x0e\x42\x16\xff\x15\xed\xa8\x66\xd4\x9f\x65\x7a\x69\x64\x57\x39\xf3\xcc\x53\xc6\xff\xa1\x8b\x9f\xe5\xbd\xe7\x3e\xe0\xf2\x67\xcc\x02\x12\xa3\x8d\xcf\xae\xc6\x57\x93\xd1\x03\x1f\xe9\x7d\x45\xd7\xc4\x88\x32\x46\x9f\x25\x2c\xa5\x49\x79\x52\x63\x22\xc2\xa0\x40\x35\x2c\x41\xcc\x38\xed\x42\x83\x17\xa7\xe2\x63\xb4\xa1\x6c\x2b\x3c\x7e\x48\x02\xcd\x81\x01\xee\x69\x8e\xfb\xe9\x6e\xad\xeb\x0d\xe5\x9c\xd4\x26\x66\x6d\xf9\xb1\x6a\x0e\xe0\x9f\xfe\x5b\x6e\x72\xa7\x58\x42\xf0\x9f\x3f\xff\xf8\xc1\xa3\xbe\xcc\xd8\x2d\xe9\x9c\x5a\xd8\xf7\x54\x73\xff\x1d\xee\x3e\xb4\x85\xc2\x80\x00\x43\x64\x1e\xad\xa4\x1b\xba\x33\x2b\xac\x26\xad\x92\xba\xeb\xd4\x35\xef\xf0\xc7\xc5\x27\xdf\x9a\xc5\xeb\xab\x91\xcd\x97\x1a\xff\x60\x5e\x8b\xac\x5f\x66\x73\x2f\x5f\x2d\x81\xbb\x3a\xf0\x37\x61\x78\xfa\xb0\xf5\x8c\xe5\x94\x61\x1b\x32\xed\x63\x73\xbb\xef\xd4\xd7\x13\x70\xad\x92\x46\x3f\x01\xeb\x6e\xa5\x7f\xfe\x5d\x74\x46\xa7\x0a\x6c\x99\xe3\x82\x8c\x61\x9b\x84\x74\x19\x25\x40\x40\x9b\x8a\xeb\xab\x5b\x65\xf4\xd5\x31\x7e\xbc\x9a\xb9\x5f\xf9\xaa\x64\xde\xed\x88\x14\x47\x6e\xfb\x35\xc8\x09\xeb\x90\x0c\x7a\xfb\xfe\xd6\x5c\x99\x3d\xe6\x0b\xa1\x27\x49\xa6\x31\x05\xfc\xc3\xac\x19\x49\xef\x6b\xcd\x96\x99\x7c\x89\x76\x95\xf7\x74\x0c\x1e\x51\x99\xe7\xf2\x25\x4c\x6f\xdb\xe6\xdf\x65\x4c\xc6\x99\x7c\x45\x16\xcd\x49\x7d\x1b\xce\x47\x7a\x9c\x27\x90\x6c\x65\x96\xf2\x04\xe2\xed\xef\x71\x1e\xad\xd7\x25\x8f\xa3\x70\xfd\x83\x7b\x9c\x3e\x7c\xc6\xab\xf0\x38\x8f\x14\x8c\x61\xfa\xdb\x2f\xb1\xcc\x28\xa6\x57\xbf\x73\xf6\x5d\x76\xc9\xbf\x67\xf6\x5d\x16\xcc\x49\xd9\x77\x29\xed\x34\xf2\xe8\x2b\x1f\x4b\x14\x3d\xb3\x16\x6e\xb3\x78\xe6\x9c\x8d\xb2\x34\x28\xb2\xec\xb3\x81\x99\x3e\xb0\xe1\x59\x8b\x2e\xc3\x48\x37\x04\x26\xd0\x67\x9f\x38\x4b\xce\xcc\x8a\x60\xc6\x4c\xb3\x0c\xab\x69\x3a\x73\x6d\xbc\x4e\xcd\xb7\x5b\xba\xc5\x01\xe1\x7a\x83\x26\xd9\x0c\xc5\xb7\x41\x00\x19\x79\x89\x3c\xdb\x32\xb8\xbe\x4a\xee\x40\xad\x8c\x3f\xab\xfa\x83\x8e\x00\x57\x51\xf9\x96\x50\x60\x59\x9f\xb7\x5b\x68\x75\x2a\x6b\x87\xb3\x4e\xe7\x4e\xe2\xae\x50\x9c\xfd\xee\xdd\xc7\xa6\x2e\x7c\x6e\x57\x6d\x34\x17\xb6\x5c\x72\x39\x43\x9c\x4e\x5f\x37\xdf\x82\xae\x05\xd4\x50\xb3\xd3\xb4\x7d\x7c\x2c\xd7\x14\xcc\xd0\x66\xe0\xe6\x53\x2c\x1a\x5c\x99\x1f\x9b\x37\x5f\x0c\xc0\x79\x65\x60\x6d\x38\x5f\x79\x21\x0b\xb6\xb8\x6a\x71\xee\x83\x0b\x0d\x0f\x5e\xab\x1d\xc8\x34\x82\x25\x82\x80\x2e\x65\xc0\x9e\xaf\xbc\x33\xbf\xb8\x3f\x33\x88\x48\x56\x51\xe2\xd6\xad\x06\xf2\xe5\x13\x40\xfe\xef\xce\xc4\xbf\x68\x36\x50\x45\xb9\x95\x16\xea\xd1\xb1\x89\xc9\xcb\x05\x18\x43\xc3\x0b\x3f\x26\x07\x30\x4e\x5f\x3e\xf1\xcc\xba\xee\xf3\xe8\x7f\xa9\x77\x97\xd7\x99\x2b\xe4\x96\x9d\x03\x1f\x2b\xc2\xc0\x29\x0e\x5f\x81\x75\x9b\x21\x50\x60\xb7\x11\x28\x6d\x02\x1d\xbe\xb4\x41\x81\x25\xee\x22\x71\xf0\xc6\xfe\x85\x05\x02\x18\xee\x8a\x28\xb8\x77\x07\x0e\xfe\xb1\x79\x7d\xbe\x5b\xa9\x81\x72\x10\x73\x20\x3c\xd7\x3f\xae\x4e\xf8\x24\x4d\x69\x12\x7a\x2e\x00\x59\xec\xdc\x27\x42\x64\x9e\x2a\xb8\x87\x9e\xce\xb0\xf4\xf9\xac\x15\x54\xf1\xa7\x1f\x2c\x96\xf6\xff\x07\xdb\x03\xb0\x3b\x76\xc6\x8e\xeb\xbc\xc8\xe5\xff\x02\x7e\xe3\x9d\x42\xd6\xc2\x81\x0d\xdb\x72\xba\x61\x3b\x0a\x38\x8a\xdf\x5d\xf0\x21\x7b\x48\x34\x3c\xfe\x36\xf1\x4e\x5a\x10\x70\x0e\x58\x53\xb0\x69\xe5\x9a\xca\x12\xd0\x7a\x4c\x80\x0d\x48\x1d\xf8\xa5\xae\xc9\x02\x6b\x6e\x72\x52\xd2\xfc\x0b\x30\x79\x67\x74\xac\xf9\xcc\x53\xf6\x9f\x4b\xf7\x4d\x1c\x83\x80\xf1\x85\x89\x52\x59\x82\x6c\x6a\x80\x2f\x8c\x14\xeb\xe2\xe0\xaa\x02\x15\x86\x66\xd5\x99\x9c\x0d\x61\xb4\x6b\x57\xab\x20\x26\x9c\xa3\xf4\xf3\x8e\x6c\xd0\xb2\x64\xd0\x73\xf3\x82\x66\x68\x30\x36\x51\x5b\xcd\x2c\x6a\x2e\xbb\xde\xa0\xc8\x47\x0a\xad\x69\xf8\x2f\x5b\x06\x53\xe8\x4d\xef\x16\x68\xa0\xe6\x55\x31\x64\x7d\xce\x8c\xfd\x04\x06\x76\x8c\xda\x00\xad\x4b\x41\x42\x5f\xad\x5d\xfb\xfb\xd7\x30\x90\x36\x86\x1e\xba\x71\x1c\xba\x70\xec\xa7\x76\x1c\x6a\x79\xbc\x07\x1d\xdd\x38\x24\x1d\x16\xb5\xd6\xea\xb1\xb7\x63\xe9\x24\x21\x38\xd8\x1b\xf7\xe8\x5b\x64\x24\xe1\x98\x23\xda\xb0\x28\x88\x18\x33\x0d\xf4\x54\x40\x11\x7a\xad\x81\xfa\x7d\xc0\xdf\xe7\xae\xa5\x1b\xb9\x37\x82\x0e\xc6\xa7\x9b\x14\x9c\xbc\x75\x4b\x44\xc2\x60\x9a\xe4\x81\xcd\xed\xe8\xfe\x7b\xb8\xe7\x9e\xca\x35\x2c\x7b\x99\x25\x0e\x84\x40\x3a\x26\x51\x6f\xe3\x2d\x17\x34\x33\xae\xee\x56\xef\x2c\x19\x3b\x86\x3f\x63\xed\x56\xbe\x26\x1b\x36\xb7\xc4\x6c\x23\x52\x13\x5e\xb6\xe3\xf2\x8b\x2e\xfb\x64\x37\x67\xf2\xe4\xca\x52\x65\xa0\xd1\xa8\x82\xe4\x6e\x44\xd3\xb1\x19\x11\x64\xb9\x64\x1b\x8b\x6e\x42\xbe\xf9\x52\xee\xa1\x4e\xbd\xc5\xfa\xfb\x27\x67\x61\xdf\xb1\xbb\xd9\x6a\xe1\x4d\x5e\x5d\x0d\x9c\xe9\xe4\x15\xfc\x77\xf1\xea\xdc\x50\x6f\x5b\x41\xdd\x4f\x3a\x12\xf1\xf4\xf2\x02\x70\x8e\x01\xfb\xe4\x9b\xa9\x0d\x71\x5f\x36\xe7\xa4\x4a\x2a\x01\xed\xe4\x95\x11\x63\x3f\xc6\xab\xaf\x9f\x7e\x54\x31\xc3\xcc\x7c\x34\x44\x03\xe7\xe5\x8a\x48\x42\x45\xc2\x5b\xb7\x6d\x9d\x31\x7e\x3c\xd5\x00\xd0\x1a\xe3\x8f\xfb\x4d\x88\x71\x02\xdd\x4a\x65\xb1\xa2\xa7\x7d\xb8\xa5\xb8\x50\x42\x28\xef\x6a\x71\x3a\xb6\x0d\xec\xd2\x80\x9d\xbf\xff\x3d\x2f\x55\xfc\x83\xd9\x92\x46\x81\x60\x7f\x90\xdb\xc9\xbf\x13\x69\x33\x92\xbe\xc6\x57\x7c\x31\xf1\x44\x8e\xac\xf8\x58\xa6\x0d\x9f\x12\x52\x27\x2e\xf9\xcd\xc8\xe3\x0c\x36\xff\xca\xe5\x4b\x6d\x14\x54\x55\xad\x46\xb7\x7e\xd4\xa1\x6b\x7d\xed\xab\x55\x3d\x6b\x59\xcb\xb5\xc6\xe5\x42\x1d\x33\x0f\xe4\x22\xb3\xd4\x2b\xbd\x14\xd6\xfd\xf5\x84\xee\x25\xaf\x18\xa9\x36\xb2\xd7\x8b\x94\xbb\x2c\xea\x46\x52\x02\x92\x96\x06\x59\x3c\xda\x51\x98\x86\x75\xad\xd0\x62\x7e\x1e\x25\x5b\x6a\x05\x32\xaf\xb8\x1a\xb6\x7a\xf5\x68\xd2\x6a\x8d\x8c\x9d\x5d\xa9\x2e\x54\xb2\x27\x27\x9a\xba\x96\xba\x3f\x5d\x6e\xd3\xe4\x9c\xb5\xe3\x6a\xb1\x4d\x85\x67\x6d\x1e\x0b\x2f\x6d\xf3\x16\x82\x0a\xef\x9b\xf6\xda\x1d\xd7\xd8\x0c\x8c\x6a\x29\x78\xfa\xc8\xbe\xc3\xaf\x58\xa5\x15\x0c\x1c\xf9\x45\x6b\xfe\xc7\xa8\x69\xf9\x02\x6d\x51\x13\x66\x2e\x40\x52\x1f\xc6\x82\xea\xe6\x88\x8c\xc3\x53\xef\xee\xe4\x9f\x5f\x2a\xdf\x3b\xd4\x21\x69\xcc\xcd\x2a\x55\x41\x81\x15\xbc\xef\x6f\x67\x12\x47\xcf\x65\xf3\x95\xda\x58\x92\x1c\xe0\x5e\x32\x70\x4a\x5c\x30\x0e\x5f\x16\xc7\x3d\x61\x2d\x63\x75\xdb\xec\xe8\x92\x0c\x19\x73\x69\xb1\x54\xb7\xe8\xb1\x5a\xda\x5a\x98\x79\xc4\x63\x37\x9c\x1e\x08\x0c\xfc\xc0\x85\x5c\x1d\xf3\xac\x25\x34\x55\xd5\x4b\x75\xe1\x7a\xc1\x7f\x43\xa7\x55\x81\xe9\x7d\xbb\x8a\xd4\x4e\x92\x3c\xcf\x31\xd9\x54\x5d\xe1\xcc\x6b\xc3\x3b\x82\x40\x69\x57\xa5\x7f\x95\x76\x5e\x68\x69\xf6\x6b\x25\x8f\x64\xae\xa1\x35\xfb\x8d\xd1\xc8\x09\x32\x8a\xa5\x2e\x04\xc2\xa4\xe0\x34\x5e\xaa\x81\x74\xfb\xb0\x63\x3a\x70\x92\x23\x6b\x08\x33\xf7\x0e\x6d\xa2\xc4\xab\x66\x7f\x45\x53\x8b\x30\xf1\xb2\x3b\x3e\xd5\xa4\x9f\xf8\x0d\x93\x5a\x8b\x06\xe0\x44\xd8\xaa\x00\x15\x15\xa9\xab\x94\x01\xfe\x28\x19\xf9\x2d\x33\xee\xd1\x70\xbb\x56\xa9\x8d\x30\xbb\x33\xaa\x00\x27\x47\x58\xb9\x25\xd6\x91\x25\x14\x5a\xa8\x1b\xdc\x25\xa6\x12\x40\x7d\xa1\x92\x44\xfc\x03\xf9\xe0\xc9\xa2\xa9\x6f\x63\x46\x54\xe2\xe4\xef\xcf\x5b\x96\x03\xf0\xea\x88\xba\x9a\xa0\x18\xa8\x91\xbc\x96\x91\x00\x94\xcf\x3b\xde\xcd\x9d\x3b\x5b\xd1\x3f\x5e\xb1\xaa\x56\x55\x75\xc0\x7b\x67\x98\x6f\x89\xe4\x5a\x78\x28\x1e\x3c\x06\xc7\x8b\xd3\x71\xbc\x78\x02\x3a\x1a\x38\xba\xe8\xe8\x55\x40\x7d\x54\x43\x65\x07\x8a\xf1\x76\xf5\x97\xdb\x4b\x77\x06\x27\x55\x53\x55\x09\xdc\xb6\xa2\x04\x98\xf2\xca\x62\xa9\x78\x33\x47\x55\x5f\xe0\xe1\x15\xe1\x85\xbf\xa2\x6c\x23\x0f\x9d\x38\x8a\xfe\xbc\xbe\x01\x66\x19\x51\xee\x02\xf2\x3e\x3a\xf7\xcc\x82\x6d\xb6\xcb\x77\x61\x70\xf1\x3c\x86\x00\x6a\xd8\x81\xf1\xe5\x71\x03\x29\x53\x2b\x6d\x01\xc9\xc2\x28\x21\xf1\x50\x56\x3c\x9a\xe2\xad\x2f\x68\xc2\x71\xb1\xce\xbf\xba\xb4\x2e\xfa\x96\x96\xc5\xcc\x53\xcc\x7c\x28\x92\x44\x98\x68\x22\x77\x7a\xc6\x34\x5d\x1b\x61\x59\xec\x85\xf1\xca\x35\x5f\xb9\xaa\x27\x17\xf7\xbb\x16\x6c\xe5\x17\xea\xee\x50\x2d\x2c\xe6\x8b\xa7\x90\xf2\x35\x76\x25\x75\x0f\x3e\x45\x86\x79\xe7\xc0\x38\x4e\x33\xe1\xb9\xc8\x58\x5c\x64\xcf\x37\x06\x8c\x7a\xd1\x5c\x62\x2f\x2d\x4b\xf4\x5b\xc3\xd7\xbb\x08\x66\x9a\xf6\x91\xf0\x70\xc7\x50\xad\xb4\xdb\xb7\x33\xa4\x85\x49\xe6\xc8\x0d\x12\x2b\x73\x6c\x1c\xd0\x6e\xf5\x1d\x32\x41\xe3\xd3\x1c\x29\xed\xcf\xf4\x1a\x52\x1b\xc3\x02\x02\x26\xa2\xf6\x68\x40\xe0\x2b\xdb\xb7\xc6\xfd\x06\x2e\xa9\x2d\xc8\x53\x2b\x57\xed\x34\x66\x40\x1f\x2e\xcc\xf6\x1b\x48\x3b\xc6\x86\xec\x2b\x4b\x67\xed\x8d\xf0\x98\x10\x77\x70\x5c\xe5\xec\xda\x7b\x03\x2e\x64\xf5\x25\x75\xab\x1f\xce\xb7\x85\x7c\xb9\xd4\x1e\xa9\x4d\xe6\xd6\x30\xe7\x87\xdb\x8c\x48\xb8\xa9\x6d\x03\xd6\x3e\xea\x89\xdf\xb3\x49\x18\xf1\x34\x26\xd0\xc4\x5d\xc4\x2c\x30\x2a\x7d\x7d\x04\x78\x66\x96\x57\x39\xc5\x22\xec\x88\xd8\xba\x33\x3c\x70\x06\x88\xf3\xc0\x4b\xca\x23\x57\xc0\x17\xad\xe8\x5f\xc0\x19\x4c\xc7\xe7\xe8\x18\xd2\x7d\x47\x89\x86\x46\x24\x58\xda\xc0\xf3\x57\x08\x87\xd3\xab\x02\x8f\x25\x9a\x75\xca\x74\x2b\x7a\x8b\xf4\x31\x32\xbd\x3c\x5d\xa6\x27\x4b\x14\x0f\xbc\xb1\x33\xa2\x97\xf9\x46\x1b\xe0\x6c\xbb\xf5\xee\xd1\x29\xce\xf0\xa0\x39\xa0\x51\xae\x74\xb6\x83\x03\xd4\x70\x62\xab\x15\xc8\xb7\xdc\x7a\xc0\xe8\x6d\xfc\x69\x3b\x58\xb1\x85\x6f\x85\xfb\x97\x39\xff\xcb\x9c\x2b\x0c\xf9\xe7\xb5\x66\x3c\xea\xac\xdd\x98\x43\x34\xcf\xe9\xb4\x1d\xe6\x20\x33\xb0\x8b\x4b\xba\xb1\x21\xc3\x8e\xbc\x7e\x5c\xb7\xed\x5b\x3d\xeb\xb1\x4a\x80\x57\x91\x45\x95\x50\x7c\x20\x1b\xdb\x02\x2b\x5e\xd6\xd5\xbf\x1a\x4e\xd7\xb2\x03\x68\xe4\xb6\x9e\xdb\x60\x39\xa0\xaa\xe0\xaa\xaf\x07\xd8\x2a\x73\xca\xf5\x2b\xc5\x31\x79\x6e\x39\xcf\x32\x35\xcb\x67\xb7\xb6\xd6\x66\xb9\xc8\x64\x54\x53\x69\x81\xa9\x27\x98\x88\xb4\x67\x8e\xd9\xd6\xb5\x02\x8d\x42\x7b\x25\x83\x9c\xc1\x75\x95\x42\x34\x0b\x01\xba\x99\x8a\xda\xa8\xb0\x77\x72\xd5\xda\xee\xd1\xfc\xb4\x0c\xaa\xb7\x65\x16\x4c\x6e\x25\xa8\x64\xa1\xf6\xc0\x58\xea\xf3\xa7\x4e\xe1\x56\xc2\xbb\x51\x72\x67\xcf\xcf\xe4\x7c\xae\x43\x7e\x4d\x9f\x70\x5c\x67\xab\x9c\xaf\xa0\x10\x9d\x37\x0d\xda\x52\x82\xa2\x26\x2e\xb2\x74\xb6\xf9\x69\xa9\xfe\x55\x3d\x66\xf6\x7a\xa4\x8e\x00\x56\x37\x78\x66\x6b\xe9\xf8\xd9\x84\xec\x1c\xc9\xed\xb9\x0b\x3f\x17\x38\x09\x93\x7f\x86\x11\x98\x74\xc6\xa9\xbe\x5d\x46\x7b\x1a\xe2\x29\x88\x6e\xf5\x1c\xc0\xeb\x30\x2a\x10\x1c\xeb\xcb\x6e\x1a\x74\x97\xe1\x72\x94\x48\x95\x11\x56\xd1\xb9\x15\x02\x2b\xb0\xc0\x41\xce\x5d\x75\xe3\xd6\x10\x08\xb6\x5a\xc5\xb8\x0a\x13\xc7\x24\xc5\x45\x05\x59\x6a\x9d\x3f\x46\x72\xd4\x73\xfd\x58\xce\xc0\xe7\xee\x73\xd5\xda\x75\x48\x16\x91\x21\xdd\xa7\x24\x09\x69\x38\x77\x97\x24\x46\x58\xf9\x14\x47\x92\xb1\xb8\xe8\xca\x42\xa4\x24\x14\x8f\xa6\xd3\x84\xf1\x6c\xc8\x92\xf8\xe0\xde\x7c\x54\xa4\x41\xeb\x68\x25\xa3\x26\x88\x04\xe0\x7a\xa2\xc1\xf3\xf7\x86\xb2\xdb\x7f\x9c\x66\xd7\x23\x25\x04\xcb\x5b\x52\x93\xcd\x02\xf2\x0a\x10\x88\x3a\x92\xf9\xb9\xab\xcf\x70\xbe\x1e\x11\x83\x6e\x8c\xe0\x95\x45\x65\xa2\xb0\x90\xc1\x51\xcd\x94\x5c\xb5\x6a\x16\x72\xb6\x90\xb6\x8d\x4b\xb4\xe9\x46\xf0\xa7\x4d\xa8\x71\xa4\xdb\x10\x30\xe1\x1d\xe0\x86\x11\x16\x83\xf9\x9e\x6d\xe4\x48\xae\x47\x71\x64\xe3\xd6\x36\xee\x35\xd0\xda\xa3\xeb\x11\x10\x56\x3e\x7b\xb3\x64\x36\x45\xfd\xef\x4d\xbd\x91\xe9\x0c\x69\xfc\x16\xc3\x5f\x31\x06\x6a\x48\xd2\x88\xd7\x8e\x90\x56\xa7\x53\x8f\x26\xfe\x64\xe2\x5f\xe4\x77\xa7\x9e\x52\xdd\xf7\x80\xed\x4f\xf5\xf3\xb5\x9b\x7d\x80\x72\x15\x6e\x09\xdc\x95\x3c\xd1\xfc\xff\x02\x00\x00\xff\xff\xc9\xb0\x1e\x27\xe6\x5c\x00\x00")

func staticsTopologyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticsTopologyHtml,
		"statics/topology.html",
	)
}

func staticsTopologyHtml() (*asset, error) {
	bytes, err := staticsTopologyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "statics/topology.html", size: 23782, mode: os.FileMode(436), modTime: time.Unix(1450185208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"statics/topology.html": staticsTopologyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"statics": &bintree{nil, map[string]*bintree{
		"topology.html": &bintree{staticsTopologyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

