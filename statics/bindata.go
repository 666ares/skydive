// Code generated by go-bindata.
// sources:
// statics/topology.html
// DO NOT EDIT!

package statics

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticsTopologyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x39\xeb\x6e\xdb\x38\xd6\xbf\x9d\xa7\x60\x95\x7e\x63\x07\x8d\xa4\x5c\x3a\xf3\x0d\x5c\x3b\xc0\xce\x4c\xb1\x9b\x1f\xdb\x16\x98\x14\xd8\x1d\x23\x28\x68\x89\xb6\x99\xc8\xa2\x2a\x52\x4e\x3c\x85\xdf\x7d\xcf\xe1\x4d\xb4\x6c\xa7\xd9\x4e\xb7\x68\x6b\xe9\xdc\x79\xae\x24\xd5\x1b\xbd\xf8\xed\xfd\xaf\x37\xff\xfe\xf0\x96\x2c\xd4\xb2\xb8\x3a\xea\x8d\xf0\x97\x14\xb4\x9c\x8f\x23\x56\x46\x1a\xc2\x68\x0e\xbf\xbd\xd1\x92\x29\x4a\xb2\x05\xad\x25\x53\xe3\xa8\x51\xb3\xf8\xe7\x28\x6d\x31\x0b\xa5\xaa\x98\x7d\x6e\xf8\x6a\x1c\xfd\x2b\xfe\xf8\xb7\xf8\x57\xb1\xac\xa8\xe2\xd3\x82\x45\x24\x13\xa5\x62\x25\xb0\x5d\xbf\x1d\xb3\x7c\xce\x42\xc6\x92\x2e\xd9\x38\x5a\x71\xf6\x50\x89\x5a\x05\xb4\x0f\x3c\x57\x8b\x71\xce\x56\x3c\x63\xb1\x7e\x39\x25\xbc\xe4\x8a\xd3\x22\x96\x19\x2d\xd8\xf8\xdc\xca\x51\x5c\x15\xec\xea\xf7\xfb\x75\xce\x57\x8c\x14\x02\x90\x44\x89\x4a\x14\x62\xbe\x1e\xa5\x06\x8b\x74\x05\x2f\xef\xc9\xa2\x66\xb3\x71\x84\xe6\xca\x61\x9a\x2e\xe9\x63\x96\x97\xc9\x54\x08\x25\x55\x4d\x2b\x7c\xc9\xc4\x32\xf5\x80\xf4\x32\xb9\x4c\x7e\x4c\x33\x29\x5b\x58\xb2\xe4\x40\x25\x65\x44\x6a\x56\x8c\x23\xa9\xd6\x05\x93\x0b\xc6\x14\xda\x83\x8a\x64\x56\xf3\x4a\x11\x59\x67\x46\x13\x28\xca\x44\xce\x92\xbb\xcf\x0d\xab\xd7\x5a\x81\x79\x8c\x2f\x92\xf3\xe4\xb5\x96\x77\x27\xa3\xab\x51\x6a\x38\xaf\x0e\x09\x59\x2b\x01\x4b\xaf\x58\x32\xe7\x6a\xd1\x4c\x13\x2e\x02\xd8\x9d\x4c\x69\xc5\xb7\x00\x71\x41\x15\x93\x2a\x80\x3d\x4b\x15\x7a\x06\x3d\x51\xd3\x07\x50\xa4\xed\xcd\x2a\xa6\xc0\x93\x2a\xcd\xe9\xbc\x66\xe9\xea\x2c\xf9\xff\xe4\x75\x9a\x73\x69\x21\xdf\x2e\xd8\x99\xb6\x6d\xb8\x51\x73\x0e\xee\xb9\x68\x11\x06\xda\x51\x73\xc8\x57\x79\x79\x27\x93\xac\x10\x4d\x3e\x2b\x28\x70\xa1\x32\x7a\x47\x1f\xd3\x82\x4f\x65\xfa\x59\xf1\xea\x22\xbd\x48\x2e\x92\x33\x1b\x8b\x04\x41\xfb\x97\xd1\x49\x9c\xbf\x26\x7d\x6f\xe2\x10\xb5\xae\xa0\x0c\x14\x7b\x54\xa9\x26\x48\xff\xa2\xff\x50\x9d\x36\xe0\xc7\xc0\x7d\xda\x86\x3d\xde\x43\x3b\x50\xdf\x54\xe4\x6b\xf2\x05\x1e\x7a\x15\xcd\x73\x5e\xce\x63\x28\xa3\x21\xf9\xf1\xac\x7a\x7c\x83\xd0\x29\xcd\xee\xe7\xb5\x68\xca\x3c\xce\xa0\xba\xea\x21\x39\x66\x8c\x21\x6a\x03\xff\x8e\x33\xcb\xac\x8b\x75\x48\xce\xcf\xce\xfe\x4f\xb3\x2d\x18\x9f\x2f\x54\x00\x80\xb4\xa9\x0a\xba\x1e\x92\x29\x14\xeb\xbd\x06\x55\x42\x42\x69\x8b\x72\x48\xe8\x54\x8a\xa2\x51\x5e\x2c\xd8\x6a\xec\x6b\x1d\x82\xb6\xf6\x56\xb4\x26\xf2\x81\xab\x6c\x71\xbd\x9c\x93\x31\xe9\x07\x0e\xba\x48\x38\xf4\x91\x19\x2f\x73\x56\x6b\x2f\xe5\x54\xd1\x14\x61\x32\x7d\x00\xa8\x78\x90\xf1\xcf\x31\xf4\x9f\x5a\xc4\x5a\x7a\xfa\xd3\xeb\xd4\x08\x4b\xaa\x72\xde\x7f\xe3\x14\x60\x4f\xfa\x4e\xe2\x67\x85\x78\xf8\x84\x0d\x54\x6d\xab\xe0\xa5\x9a\x7d\x27\x15\x0f\xbc\x66\xf9\xa7\x92\xa9\x07\x51\xdf\x5b\x2d\xa8\x66\xd6\x94\x19\x3a\x97\x40\x54\x6f\x84\x28\x20\x0d\x06\xd9\x1a\xda\x69\x7e\x4a\x58\x71\x62\xa2\xd6\xe3\x33\x32\x78\x31\x88\xfe\x09\x5d\x19\x95\x41\x12\xf2\x12\xd1\x27\x1a\xdb\xab\x99\x6a\xea\xd2\x08\xd4\x86\x2f\x2d\x21\x5a\x6e\x96\xd3\x9b\x89\x9a\x0c\xee\x0d\xdf\x24\x90\x74\xeb\x74\xf4\x3c\xd3\xab\x31\xb9\x27\xaf\x48\x7f\x48\xfa\xf0\xd3\x21\x9f\xdc\xdf\x02\x30\x1a\x4d\xeb\xf4\x2a\x32\xa2\x37\x46\x71\xb6\x4e\x5e\x0e\xfa\xc7\xc8\xc3\xf3\x13\x5d\x55\x03\x2b\xda\x4e\x8e\xa1\x53\xd5\xd3\x9d\x7f\xd8\xf7\x72\xfb\xa7\x0e\x01\x65\x36\xf4\xf6\x1b\xe0\xc6\x22\xb5\x33\x5b\x19\x59\x41\xa5\x64\x12\xac\x44\x55\xb1\x9f\x01\x7d\xcb\x65\x6c\x3b\xd1\x36\x6e\xb6\x9d\x9d\x43\x95\xde\xd8\x31\x34\x70\xf3\xc8\x39\x02\x1d\x08\xf5\x32\x26\xbe\x3a\xdd\x32\x6a\x98\xb8\x50\x1a\x4e\xcc\xe0\xc4\x99\x62\xc2\x9e\x68\x2e\xb5\xe0\xf2\xcd\xb6\xe1\xb8\x7c\xca\x4b\x06\x55\x99\x8b\xac\x59\x82\x2b\x92\x39\x53\x6f\x0b\x86\x8f\xbf\xac\xaf\xf3\x41\x3f\x5b\xf7\x4f\x2c\x79\x45\xa1\xd6\xbe\x90\x47\x5d\x96\xa7\x04\x34\x9e\x11\x27\x0a\xda\xd4\x1f\x42\x2c\x01\x94\x5c\x38\x10\x7d\x34\xa0\x73\x0b\xf8\x13\xde\xa0\x43\xbc\x2d\x29\x8c\xf8\x7c\x48\x54\xdd\x30\x8b\x6a\x24\xab\xff\x38\x8c\x06\xcd\xe5\x13\x9c\x1f\x0e\xa3\xa7\xe2\xf1\x77\x56\x30\xed\x97\x3d\x78\x02\x7f\x6c\xf8\x26\x24\x4d\xc1\x49\x8c\xb4\x3d\x96\x60\x72\x22\x68\x0e\xe1\x5b\x18\x81\xc8\xf1\xa5\x7d\xec\x49\x2d\x1d\x1b\x5b\xbf\x84\x81\xed\x12\xc6\xe0\xb6\x12\x43\x83\x7a\xfd\x6e\x47\xc4\x74\x3e\x9e\xcd\x66\x5b\x9c\xbd\x7e\x41\xa7\xac\x40\x1c\xe6\xdb\x40\xbf\x9d\x74\x48\xe4\x02\x72\x00\x49\x6a\xb0\x00\x76\x60\x05\xeb\x10\x04\xaa\xf8\x92\xce\x99\x17\xc7\x97\xf3\xc3\xc2\x90\xfe\x90\xc4\x19\x64\x4c\x2c\xf9\x9f\x48\x79\x71\x11\xa0\x36\xed\xf3\xa6\x75\xed\x13\xce\x9a\x80\x0d\x2f\xc6\x51\x29\x4a\x16\xdd\x7e\xdd\x6b\x7a\x40\x80\xd2\x9f\x5e\x6f\x1b\x64\x06\x85\x46\x3c\x69\xcd\x53\x71\x7b\x89\x81\x23\x57\x64\x27\x7e\x30\x56\xbb\x76\x04\x53\x0e\x9d\x75\x0e\x73\xae\xe3\x22\x47\x51\xb0\x99\xfa\x0a\xc9\x54\x28\x25\x96\x5f\x21\xaa\xed\x02\xf7\xd1\x60\x57\x8a\x57\xb4\xe0\xf3\x12\x29\xd0\xa8\x3d\x04\x0b\x4f\x90\x41\x59\xb3\xfa\x70\x96\xb4\x09\x49\x29\x7d\x66\x82\x7c\xb3\xdb\x71\x5b\xff\xfc\xc0\x77\xe2\x0e\xfb\x2b\x16\x98\x7b\x79\x79\xd9\xad\x1f\x24\xd0\x12\x7d\xd6\xeb\xb7\x6e\xde\x2b\x5a\x43\xcb\x8b\x69\x5d\x8b\x87\x8e\xc0\x03\x2b\xf3\xd9\x7d\xdb\x26\x3a\x6c\x4d\x44\xe3\xe7\x88\x66\xc1\x53\x8a\xd6\x0c\xfb\xcf\x7e\x4b\xd9\x9b\x71\x65\x3a\xd0\xd1\xb6\x44\x9c\x08\xfa\xa1\x62\xac\x86\xc0\x43\xcb\xfe\xb2\x31\x0d\xbb\x69\x38\x0c\xe1\xeb\xdc\x82\x34\x0c\x9a\xd5\x8c\xd7\x52\xc1\xb1\x45\x8f\x0d\x42\x8b\x42\xf7\x2a\xcc\x62\xd9\x8e\x56\x9c\x1a\xd3\x9a\x83\xaf\xdf\x81\x41\x38\x67\xdd\x5c\x99\x44\xef\x57\xf2\x17\x8d\x0a\xc7\xad\x21\xd6\xca\x5a\xbe\xa3\x10\xf7\x8b\x78\xd4\xe8\x7e\xcb\xff\x09\xa7\xab\xe3\xb4\x53\x06\xe6\x2e\xa4\xf0\xe0\x0b\xfa\x1e\x3c\xc3\xa1\xf1\x06\xfc\xa7\x44\xf7\xb4\x61\x20\xa5\x0f\xdb\x8b\xe5\x5c\x37\xd2\x92\xf5\x37\xde\x21\x87\x25\x05\x62\x5a\x5b\x4f\x49\x05\xdb\x6b\x9c\xea\x5b\xea\xb4\x68\xbf\xfb\x0b\xa4\xe3\x86\x4d\xe2\x80\xdc\xeb\x97\x49\x2b\xf8\x76\x12\x7d\x40\xda\xe8\xd6\x30\x7a\xff\xa2\x04\xe7\x5d\x2d\xcd\x3b\x53\x0b\x0f\x7c\x09\x8f\xaf\x3c\xf9\x91\xdb\x30\xec\x2e\xcf\xb0\xf9\xc5\x39\x8e\xa7\x96\x66\xf7\x9d\xc1\xc2\x7a\x9d\xbd\x9b\x13\xaa\x4d\x9c\x38\x99\xb7\x2d\x3d\xe4\x94\x91\x8b\x49\x85\xf8\xc3\x06\x06\xcb\xe9\xc7\x57\x7d\xbb\x2a\x94\x2e\x45\x53\x67\x2c\x8c\x90\x29\xb1\x76\x51\xb6\xce\x23\xd8\xb4\xf3\x3c\x3a\x25\x0f\x76\xb3\x7f\x71\x16\x1a\x8f\x9b\x5c\x0c\x4b\xc7\xda\x49\x74\x8d\x3d\x6c\x46\x33\xe6\x03\xd1\x46\x02\x99\x5c\x24\xb4\x80\x36\x12\x5a\xa0\x0e\x85\x8d\xc9\x2b\x4f\xed\x54\xea\x42\x03\x02\xcd\x39\x71\x58\x50\xf9\xf1\xe3\xf5\x6f\xd1\xed\x9b\x90\x0c\xeb\x71\x82\x0f\xb7\x96\x01\xf3\xde\x11\xec\x71\x98\x21\xf1\x11\x75\xc2\x9f\x8a\xa8\xdd\xe6\x87\x4e\xe9\x86\xd4\x49\xed\x58\x1c\x30\x40\x4c\x71\xbd\x18\x51\x44\x3f\x61\xa1\x77\x8b\x0d\xa8\x93\xed\x02\xea\xc2\xe7\xc2\xe9\xf1\xcf\x0a\xa7\x3e\x2b\x44\x1f\xa0\xb7\x45\x3e\x38\xad\xc1\xe4\x87\x1f\x76\xbd\xae\x89\x6f\x83\x08\xea\xd6\x88\xb1\xd8\x17\x23\x43\xed\x49\xcd\xd1\x44\x07\x14\xab\xd2\xf4\xd4\x13\xd4\xf3\x62\xe0\xc5\x04\x98\x13\xcf\xe9\x1a\xb0\x8f\xae\x23\x77\x14\x76\x18\xb8\xdf\x4d\x78\xd8\xc0\x24\x2c\x31\x6d\xcf\xde\x6c\xf7\xe0\x52\xee\xf6\xdf\x77\x4c\xbd\x93\x61\xef\x2d\xa5\x4e\x50\x43\x6b\x3d\x07\x01\x94\xf7\xbc\x22\x70\x46\x03\xc1\xd0\xbf\x16\x44\x94\xc5\x1a\xfe\x43\x69\xb6\x14\xe0\x64\x42\x71\x0b\x6c\x50\x38\x06\x0a\x21\x2a\x9c\xec\x47\xde\x1b\xef\xa7\x77\x30\x7a\x93\x7b\xb6\x96\x83\x5d\x1b\x26\x46\x69\xa7\xbe\x4e\x92\x82\x95\x73\x50\x39\x22\x17\x6d\x20\xf0\xdc\xc0\xcb\x86\xb9\xe3\x84\xb5\x54\xb7\x42\x9d\xcd\x66\x3c\xd8\x13\x9e\x56\x6e\x97\xff\x62\x4c\xa2\x1a\x0e\x44\x51\x20\x6c\x37\x13\xd1\x0d\xbe\x52\x0c\xe7\xee\x68\xb0\xb1\x6a\xf5\x21\x57\xc7\x22\xd7\x43\x9e\xbb\xdc\xa3\x67\x77\x13\xdf\x4c\x74\xc8\x76\x5b\xc9\xb7\x74\x00\xb7\x96\xc3\xe5\xff\xdf\x56\x3f\xe4\x0e\x38\x9f\x16\xfa\x80\x88\xab\x10\x2b\x89\x27\x7a\x42\xe1\xc0\xa7\x14\xcb\x89\xbe\xa7\x92\xbc\x84\x14\xc2\x03\x22\x81\xbf\xfa\x0c\x64\x56\xed\xb2\x4b\x2d\xa8\x02\x54\x20\xb5\x24\xd4\x48\xb3\x03\x83\x96\xba\xce\xa8\x49\xd3\xa3\xb6\x4f\x1e\x6e\xa7\x47\x6d\xa1\xba\x32\x75\x8d\x35\xa8\xf9\x3d\x8e\xd4\xd4\xbe\x4d\xe1\x5b\xdb\xa4\xb6\x5b\xf3\xe1\x66\x65\x96\x1f\x74\xab\xf3\x20\xa9\x36\x81\xfd\x4f\xf5\xf9\xef\xd0\xd2\x9e\xdf\xd1\x4c\x43\x7b\xba\x75\x7d\xa5\x73\xed\x6b\x58\x3e\xd9\x77\x5a\xa5\xb5\xd1\x78\x56\xe7\xfa\xb6\x3f\x0c\xda\x38\x78\x1b\xbd\x65\xc6\xed\xc1\x3d\x9c\x97\xec\x63\xe9\x84\xb5\xf1\x74\x34\x6d\x24\x03\x1a\x17\x4b\x0a\xa7\xf5\x30\x96\x97\x3e\x96\xb0\xc8\x23\xbf\xd6\x97\x03\x77\xcb\x71\x92\xe8\x8a\x18\xb4\x37\x26\x76\xb5\x2f\x13\xbc\x91\x75\xf7\x2a\x4d\x8d\xfb\xd3\xd4\x75\x8f\xe4\x4e\x8a\xd2\x1d\x1f\xec\x3a\xda\x0d\xc8\x92\x82\xe6\xbe\x26\xb1\x6e\xb6\x94\x0c\x8e\x16\x75\x78\x3b\xe3\xb8\x36\x81\xa8\x9b\x75\xc5\x1c\xbb\xbb\x56\x6a\x32\x68\x4a\x32\xe0\x44\xc2\x36\x77\xb6\x2e\x8b\x34\xaa\x73\xbd\xa3\x8c\xcc\xbf\xbf\xbd\xe9\xfb\x13\x46\xfb\xb3\x75\x5d\x9d\x9a\x8f\x36\xf8\x88\x37\xba\xfa\xb6\x74\x54\xd2\x15\xd1\x97\x59\x70\x4c\xa7\xab\x29\x0e\x31\xfd\x13\xf3\x72\xc5\x6a\xc9\xdc\xeb\x8c\x3f\xb2\x1c\x4f\xc4\x91\xe6\xeb\x8d\x72\xee\x19\xfd\x15\x93\xc5\x6d\x21\x2d\x3f\xea\x6e\x09\xc0\x82\x06\x8e\xc5\xa5\xbd\xdf\x36\x2f\x51\x87\x45\x89\x39\x9c\x3d\x09\x9c\xd7\x0a\x5a\x49\x08\x3e\x41\x07\x58\x30\x6a\x35\x70\x07\xd6\x29\x33\x8e\x8e\x0d\x77\x44\x68\xcd\x69\xcc\x1e\x2b\xe8\x5a\x2c\x1f\x47\x33\x5a\x20\xad\x86\xa2\xc1\xb5\x28\xbc\x2a\x6f\x56\x6f\x24\x81\xde\xd9\x21\xeb\x18\x47\x6d\x74\x75\x63\x2c\x01\x62\x3e\xa7\x18\x25\xf0\x2b\xd0\xed\xe7\xc2\xcb\xd8\x58\x0b\xfd\xdf\x51\x8d\x52\xe3\x32\xff\x4e\x3b\xbe\x9b\xd6\xb0\xec\xc8\x7e\x9c\x38\x8e\xdc\x57\xb0\x51\x4a\x5d\x88\x52\x78\x0f\xc3\xc5\x73\xef\x8d\x36\xae\xc6\xc3\x2e\x07\xbc\xc7\xbd\xda\xa6\x08\xf4\x3a\x32\xf8\x09\x1c\x5a\x70\x47\x42\x21\xc1\x57\xc0\x0c\xc6\x7a\xbb\xfe\x21\x96\xda\xa8\x51\x5a\xf0\x76\x71\x4d\xb1\x6b\x65\xfb\x38\x4a\x41\x83\xce\xe3\xd6\xf2\x6c\x6d\x3f\xb2\xed\xff\x38\x82\x05\x9f\xcc\x85\x80\x28\xd2\x8a\xcb\xce\x67\x19\xf3\x29\x06\xbf\x2a\x9d\x27\x97\xee\xc3\xcc\xbe\x2f\x3e\xfb\x85\x3f\xf7\x63\xe1\x5d\xf7\x5b\xe1\xce\x07\xa5\xd4\xd5\x25\xd4\xaa\xfe\xf4\xfa\x9f\x00\x00\x00\xff\xff\xb2\x99\x8e\x18\x8c\x1d\x00\x00")

func staticsTopologyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticsTopologyHtml,
		"statics/topology.html",
	)
}

func staticsTopologyHtml() (*asset, error) {
	bytes, err := staticsTopologyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "statics/topology.html", size: 7564, mode: os.FileMode(436), modTime: time.Unix(1448029371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"statics/topology.html": staticsTopologyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"statics": &bintree{nil, map[string]*bintree{
		"topology.html": &bintree{staticsTopologyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

