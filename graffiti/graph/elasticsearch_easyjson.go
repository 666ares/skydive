// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package graph

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveGraffitiGraph(in *jlexer.Lexer, out *rawData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_Type":
			out.Type = string(in.String())
		case "ID":
			out.ID = string(in.String())
		case "Host":
			out.Host = string(in.String())
		case "Origin":
			out.Origin = string(in.String())
		case "CreatedAt":
			out.CreatedAt = int64(in.Int64())
		case "UpdatedAt":
			out.UpdatedAt = int64(in.Int64())
		case "Metadata":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Metadata).UnmarshalJSON(data))
			}
		case "Revision":
			out.Revision = int64(in.Int64())
		case "DeletedAt":
			out.DeletedAt = int64(in.Int64())
		case "ArchivedAt":
			out.ArchivedAt = int64(in.Int64())
		case "Parent":
			out.Parent = string(in.String())
		case "Child":
			out.Child = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveGraffitiGraph(out *jwriter.Writer, in rawData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"_Type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"Origin\":"
		out.RawString(prefix)
		out.String(string(in.Origin))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreatedAt))
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdatedAt))
	}
	{
		const prefix string = ",\"Metadata\":"
		out.RawString(prefix)
		out.Raw((in.Metadata).MarshalJSON())
	}
	{
		const prefix string = ",\"Revision\":"
		out.RawString(prefix)
		out.Int64(int64(in.Revision))
	}
	if in.DeletedAt != 0 {
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeletedAt))
	}
	if in.ArchivedAt != 0 {
		const prefix string = ",\"ArchivedAt\":"
		out.RawString(prefix)
		out.Int64(int64(in.ArchivedAt))
	}
	if in.Parent != "" {
		const prefix string = ",\"Parent\":"
		out.RawString(prefix)
		out.String(string(in.Parent))
	}
	if in.Child != "" {
		const prefix string = ",\"Child\":"
		out.RawString(prefix)
		out.String(string(in.Child))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v rawData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71f4917EncodeGithubComSkydiveProjectSkydiveGraffitiGraph(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rawData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71f4917EncodeGithubComSkydiveProjectSkydiveGraffitiGraph(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rawData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71f4917DecodeGithubComSkydiveProjectSkydiveGraffitiGraph(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rawData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71f4917DecodeGithubComSkydiveProjectSkydiveGraffitiGraph(l, v)
}
