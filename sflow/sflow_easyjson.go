// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sflow

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow(in *jlexer.Lexer, out *VlanMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VlanOctets":
			out.VlanOctets = int64(in.Int64())
		case "VlanUcastPkts":
			out.VlanUcastPkts = int64(in.Int64())
		case "VlanMulticastPkts":
			out.VlanMulticastPkts = int64(in.Int64())
		case "VlanBroadcastPkts":
			out.VlanBroadcastPkts = int64(in.Int64())
		case "VlanDiscards":
			out.VlanDiscards = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow(out *jwriter.Writer, in VlanMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.VlanOctets != 0 {
		const prefix string = ",\"VlanOctets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VlanOctets))
	}
	if in.VlanUcastPkts != 0 {
		const prefix string = ",\"VlanUcastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VlanUcastPkts))
	}
	if in.VlanMulticastPkts != 0 {
		const prefix string = ",\"VlanMulticastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VlanMulticastPkts))
	}
	if in.VlanBroadcastPkts != 0 {
		const prefix string = ",\"VlanBroadcastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VlanBroadcastPkts))
	}
	if in.VlanDiscards != 0 {
		const prefix string = ",\"VlanDiscards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VlanDiscards))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VlanMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VlanMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VlanMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VlanMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow(l, v)
}
func easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow1(in *jlexer.Lexer, out *SFlow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IfMetrics":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.IfMetrics = make(map[int64]*IfMetric)
				} else {
					out.IfMetrics = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v1 *IfMetric
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(IfMetric)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.IfMetrics)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Metric":
			if in.IsNull() {
				in.Skip()
				out.Metric = nil
			} else {
				if out.Metric == nil {
					out.Metric = new(SFMetric)
				}
				(*out.Metric).UnmarshalEasyJSON(in)
			}
		case "LastUpdateMetric":
			if in.IsNull() {
				in.Skip()
				out.LastUpdateMetric = nil
			} else {
				if out.LastUpdateMetric == nil {
					out.LastUpdateMetric = new(SFMetric)
				}
				(*out.LastUpdateMetric).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow1(out *jwriter.Writer, in SFlow) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.IfMetrics) != 0 {
		const prefix string = ",\"IfMetrics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.IfMetrics {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					(*v2Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if in.Metric != nil {
		const prefix string = ",\"Metric\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metric).MarshalEasyJSON(out)
	}
	if in.LastUpdateMetric != nil {
		const prefix string = ",\"LastUpdateMetric\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LastUpdateMetric).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SFlow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SFlow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SFlow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow1(l, v)
}
func easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow2(in *jlexer.Lexer, out *SFMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Start":
			out.Start = int64(in.Int64())
		case "Last":
			out.Last = int64(in.Int64())
		case "EthAlignmentErrors":
			out.EthAlignmentErrors = int64(in.Int64())
		case "EthFCSErrors":
			out.EthFCSErrors = int64(in.Int64())
		case "EthSingleCollisionFrames":
			out.EthSingleCollisionFrames = int64(in.Int64())
		case "EthMultipleCollisionFrames":
			out.EthMultipleCollisionFrames = int64(in.Int64())
		case "EthSQETestErrors":
			out.EthSQETestErrors = int64(in.Int64())
		case "EthDeferredTransmissions":
			out.EthDeferredTransmissions = int64(in.Int64())
		case "EthLateCollisions":
			out.EthLateCollisions = int64(in.Int64())
		case "EthExcessiveCollisions":
			out.EthExcessiveCollisions = int64(in.Int64())
		case "EthInternalMacReceiveErrors":
			out.EthInternalMacReceiveErrors = int64(in.Int64())
		case "EthInternalMacTransmitErrors":
			out.EthInternalMacTransmitErrors = int64(in.Int64())
		case "EthCarrierSenseErrors":
			out.EthCarrierSenseErrors = int64(in.Int64())
		case "EthFrameTooLongs":
			out.EthFrameTooLongs = int64(in.Int64())
		case "EthSymbolErrors":
			out.EthSymbolErrors = int64(in.Int64())
		case "VlanOctets":
			out.VlanOctets = int64(in.Int64())
		case "VlanUcastPkts":
			out.VlanUcastPkts = int64(in.Int64())
		case "VlanMulticastPkts":
			out.VlanMulticastPkts = int64(in.Int64())
		case "VlanBroadcastPkts":
			out.VlanBroadcastPkts = int64(in.Int64())
		case "VlanDiscards":
			out.VlanDiscards = int64(in.Int64())
		case "OvsDpNHit":
			out.OvsDpNHit = int64(in.Int64())
		case "OvsDpNMissed":
			out.OvsDpNMissed = int64(in.Int64())
		case "OvsDpNLost":
			out.OvsDpNLost = int64(in.Int64())
		case "OvsDpNMaskHit":
			out.OvsDpNMaskHit = int64(in.Int64())
		case "OvsDpNFlows":
			out.OvsDpNFlows = int64(in.Int64())
		case "OvsDpNMasks":
			out.OvsDpNMasks = int64(in.Int64())
		case "OvsAppFdOpen":
			out.OvsAppFdOpen = int64(in.Int64())
		case "OvsAppFdMax":
			out.OvsAppFdMax = int64(in.Int64())
		case "OvsAppConnOpen":
			out.OvsAppConnOpen = int64(in.Int64())
		case "OvsAppConnMax":
			out.OvsAppConnMax = int64(in.Int64())
		case "OvsAppMemUsed":
			out.OvsAppMemUsed = int64(in.Int64())
		case "OvsAppMemMax":
			out.OvsAppMemMax = int64(in.Int64())
		case "IfInOctets":
			out.IfInOctets = int64(in.Int64())
		case "IfInUcastPkts":
			out.IfInUcastPkts = int64(in.Int64())
		case "IfInMulticastPkts":
			out.IfInMulticastPkts = int64(in.Int64())
		case "IfInBroadcastPkts":
			out.IfInBroadcastPkts = int64(in.Int64())
		case "IfInDiscards":
			out.IfInDiscards = int64(in.Int64())
		case "IfInErrors":
			out.IfInErrors = int64(in.Int64())
		case "IfInUnknownProtos":
			out.IfInUnknownProtos = int64(in.Int64())
		case "IfOutOctets":
			out.IfOutOctets = int64(in.Int64())
		case "IfOutUcastPkts":
			out.IfOutUcastPkts = int64(in.Int64())
		case "IfOutMulticastPkts":
			out.IfOutMulticastPkts = int64(in.Int64())
		case "IfOutBroadcastPkts":
			out.IfOutBroadcastPkts = int64(in.Int64())
		case "IfOutDiscards":
			out.IfOutDiscards = int64(in.Int64())
		case "IfOutErrors":
			out.IfOutErrors = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow2(out *jwriter.Writer, in SFMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Start != 0 {
		const prefix string = ",\"Start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Start))
	}
	if in.Last != 0 {
		const prefix string = ",\"Last\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Last))
	}
	if in.EthAlignmentErrors != 0 {
		const prefix string = ",\"EthAlignmentErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthAlignmentErrors))
	}
	if in.EthFCSErrors != 0 {
		const prefix string = ",\"EthFCSErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthFCSErrors))
	}
	if in.EthSingleCollisionFrames != 0 {
		const prefix string = ",\"EthSingleCollisionFrames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthSingleCollisionFrames))
	}
	if in.EthMultipleCollisionFrames != 0 {
		const prefix string = ",\"EthMultipleCollisionFrames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthMultipleCollisionFrames))
	}
	if in.EthSQETestErrors != 0 {
		const prefix string = ",\"EthSQETestErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthSQETestErrors))
	}
	if in.EthDeferredTransmissions != 0 {
		const prefix string = ",\"EthDeferredTransmissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthDeferredTransmissions))
	}
	if in.EthLateCollisions != 0 {
		const prefix string = ",\"EthLateCollisions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthLateCollisions))
	}
	if in.EthExcessiveCollisions != 0 {
		const prefix string = ",\"EthExcessiveCollisions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthExcessiveCollisions))
	}
	if in.EthInternalMacReceiveErrors != 0 {
		const prefix string = ",\"EthInternalMacReceiveErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthInternalMacReceiveErrors))
	}
	if in.EthInternalMacTransmitErrors != 0 {
		const prefix string = ",\"EthInternalMacTransmitErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthInternalMacTransmitErrors))
	}
	if in.EthCarrierSenseErrors != 0 {
		const prefix string = ",\"EthCarrierSenseErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthCarrierSenseErrors))
	}
	if in.EthFrameTooLongs != 0 {
		const prefix string = ",\"EthFrameTooLongs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthFrameTooLongs))
	}
	if in.EthSymbolErrors != 0 {
		const prefix string = ",\"EthSymbolErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthSymbolErrors))
	}
	if in.VlanOctets != 0 {
		const prefix string = ",\"VlanOctets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VlanOctets))
	}
	if in.VlanUcastPkts != 0 {
		const prefix string = ",\"VlanUcastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VlanUcastPkts))
	}
	if in.VlanMulticastPkts != 0 {
		const prefix string = ",\"VlanMulticastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VlanMulticastPkts))
	}
	if in.VlanBroadcastPkts != 0 {
		const prefix string = ",\"VlanBroadcastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VlanBroadcastPkts))
	}
	if in.VlanDiscards != 0 {
		const prefix string = ",\"VlanDiscards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.VlanDiscards))
	}
	if in.OvsDpNHit != 0 {
		const prefix string = ",\"OvsDpNHit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsDpNHit))
	}
	if in.OvsDpNMissed != 0 {
		const prefix string = ",\"OvsDpNMissed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsDpNMissed))
	}
	if in.OvsDpNLost != 0 {
		const prefix string = ",\"OvsDpNLost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsDpNLost))
	}
	if in.OvsDpNMaskHit != 0 {
		const prefix string = ",\"OvsDpNMaskHit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsDpNMaskHit))
	}
	if in.OvsDpNFlows != 0 {
		const prefix string = ",\"OvsDpNFlows\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsDpNFlows))
	}
	if in.OvsDpNMasks != 0 {
		const prefix string = ",\"OvsDpNMasks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsDpNMasks))
	}
	if in.OvsAppFdOpen != 0 {
		const prefix string = ",\"OvsAppFdOpen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsAppFdOpen))
	}
	if in.OvsAppFdMax != 0 {
		const prefix string = ",\"OvsAppFdMax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsAppFdMax))
	}
	if in.OvsAppConnOpen != 0 {
		const prefix string = ",\"OvsAppConnOpen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsAppConnOpen))
	}
	if in.OvsAppConnMax != 0 {
		const prefix string = ",\"OvsAppConnMax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsAppConnMax))
	}
	if in.OvsAppMemUsed != 0 {
		const prefix string = ",\"OvsAppMemUsed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsAppMemUsed))
	}
	if in.OvsAppMemMax != 0 {
		const prefix string = ",\"OvsAppMemMax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsAppMemMax))
	}
	if in.IfInOctets != 0 {
		const prefix string = ",\"IfInOctets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInOctets))
	}
	if in.IfInUcastPkts != 0 {
		const prefix string = ",\"IfInUcastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInUcastPkts))
	}
	if in.IfInMulticastPkts != 0 {
		const prefix string = ",\"IfInMulticastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInMulticastPkts))
	}
	if in.IfInBroadcastPkts != 0 {
		const prefix string = ",\"IfInBroadcastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInBroadcastPkts))
	}
	if in.IfInDiscards != 0 {
		const prefix string = ",\"IfInDiscards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInDiscards))
	}
	if in.IfInErrors != 0 {
		const prefix string = ",\"IfInErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInErrors))
	}
	if in.IfInUnknownProtos != 0 {
		const prefix string = ",\"IfInUnknownProtos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInUnknownProtos))
	}
	if in.IfOutOctets != 0 {
		const prefix string = ",\"IfOutOctets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfOutOctets))
	}
	if in.IfOutUcastPkts != 0 {
		const prefix string = ",\"IfOutUcastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfOutUcastPkts))
	}
	if in.IfOutMulticastPkts != 0 {
		const prefix string = ",\"IfOutMulticastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfOutMulticastPkts))
	}
	if in.IfOutBroadcastPkts != 0 {
		const prefix string = ",\"IfOutBroadcastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfOutBroadcastPkts))
	}
	if in.IfOutDiscards != 0 {
		const prefix string = ",\"IfOutDiscards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfOutDiscards))
	}
	if in.IfOutErrors != 0 {
		const prefix string = ",\"IfOutErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfOutErrors))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SFMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SFMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SFMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SFMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow2(l, v)
}
func easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow3(in *jlexer.Lexer, out *OvsMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OvsDpNHit":
			out.OvsDpNHit = int64(in.Int64())
		case "OvsDpNMissed":
			out.OvsDpNMissed = int64(in.Int64())
		case "OvsDpNLost":
			out.OvsDpNLost = int64(in.Int64())
		case "OvsDpNMaskHit":
			out.OvsDpNMaskHit = int64(in.Int64())
		case "OvsDpNFlows":
			out.OvsDpNFlows = int64(in.Int64())
		case "OvsDpNMasks":
			out.OvsDpNMasks = int64(in.Int64())
		case "OvsAppFdOpen":
			out.OvsAppFdOpen = int64(in.Int64())
		case "OvsAppFdMax":
			out.OvsAppFdMax = int64(in.Int64())
		case "OvsAppConnOpen":
			out.OvsAppConnOpen = int64(in.Int64())
		case "OvsAppConnMax":
			out.OvsAppConnMax = int64(in.Int64())
		case "OvsAppMemUsed":
			out.OvsAppMemUsed = int64(in.Int64())
		case "OvsAppMemMax":
			out.OvsAppMemMax = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow3(out *jwriter.Writer, in OvsMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OvsDpNHit != 0 {
		const prefix string = ",\"OvsDpNHit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsDpNHit))
	}
	if in.OvsDpNMissed != 0 {
		const prefix string = ",\"OvsDpNMissed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsDpNMissed))
	}
	if in.OvsDpNLost != 0 {
		const prefix string = ",\"OvsDpNLost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsDpNLost))
	}
	if in.OvsDpNMaskHit != 0 {
		const prefix string = ",\"OvsDpNMaskHit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsDpNMaskHit))
	}
	if in.OvsDpNFlows != 0 {
		const prefix string = ",\"OvsDpNFlows\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsDpNFlows))
	}
	if in.OvsDpNMasks != 0 {
		const prefix string = ",\"OvsDpNMasks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsDpNMasks))
	}
	if in.OvsAppFdOpen != 0 {
		const prefix string = ",\"OvsAppFdOpen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsAppFdOpen))
	}
	if in.OvsAppFdMax != 0 {
		const prefix string = ",\"OvsAppFdMax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsAppFdMax))
	}
	if in.OvsAppConnOpen != 0 {
		const prefix string = ",\"OvsAppConnOpen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsAppConnOpen))
	}
	if in.OvsAppConnMax != 0 {
		const prefix string = ",\"OvsAppConnMax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsAppConnMax))
	}
	if in.OvsAppMemUsed != 0 {
		const prefix string = ",\"OvsAppMemUsed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsAppMemUsed))
	}
	if in.OvsAppMemMax != 0 {
		const prefix string = ",\"OvsAppMemMax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OvsAppMemMax))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OvsMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OvsMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OvsMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OvsMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow3(l, v)
}
func easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow4(in *jlexer.Lexer, out *IfMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IfInOctets":
			out.IfInOctets = int64(in.Int64())
		case "IfInUcastPkts":
			out.IfInUcastPkts = int64(in.Int64())
		case "IfInMulticastPkts":
			out.IfInMulticastPkts = int64(in.Int64())
		case "IfInBroadcastPkts":
			out.IfInBroadcastPkts = int64(in.Int64())
		case "IfInDiscards":
			out.IfInDiscards = int64(in.Int64())
		case "IfInErrors":
			out.IfInErrors = int64(in.Int64())
		case "IfInUnknownProtos":
			out.IfInUnknownProtos = int64(in.Int64())
		case "IfOutOctets":
			out.IfOutOctets = int64(in.Int64())
		case "IfOutUcastPkts":
			out.IfOutUcastPkts = int64(in.Int64())
		case "IfOutMulticastPkts":
			out.IfOutMulticastPkts = int64(in.Int64())
		case "IfOutBroadcastPkts":
			out.IfOutBroadcastPkts = int64(in.Int64())
		case "IfOutDiscards":
			out.IfOutDiscards = int64(in.Int64())
		case "IfOutErrors":
			out.IfOutErrors = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow4(out *jwriter.Writer, in IfMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IfInOctets != 0 {
		const prefix string = ",\"IfInOctets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInOctets))
	}
	if in.IfInUcastPkts != 0 {
		const prefix string = ",\"IfInUcastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInUcastPkts))
	}
	if in.IfInMulticastPkts != 0 {
		const prefix string = ",\"IfInMulticastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInMulticastPkts))
	}
	if in.IfInBroadcastPkts != 0 {
		const prefix string = ",\"IfInBroadcastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInBroadcastPkts))
	}
	if in.IfInDiscards != 0 {
		const prefix string = ",\"IfInDiscards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInDiscards))
	}
	if in.IfInErrors != 0 {
		const prefix string = ",\"IfInErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInErrors))
	}
	if in.IfInUnknownProtos != 0 {
		const prefix string = ",\"IfInUnknownProtos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfInUnknownProtos))
	}
	if in.IfOutOctets != 0 {
		const prefix string = ",\"IfOutOctets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfOutOctets))
	}
	if in.IfOutUcastPkts != 0 {
		const prefix string = ",\"IfOutUcastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfOutUcastPkts))
	}
	if in.IfOutMulticastPkts != 0 {
		const prefix string = ",\"IfOutMulticastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfOutMulticastPkts))
	}
	if in.IfOutBroadcastPkts != 0 {
		const prefix string = ",\"IfOutBroadcastPkts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfOutBroadcastPkts))
	}
	if in.IfOutDiscards != 0 {
		const prefix string = ",\"IfOutDiscards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfOutDiscards))
	}
	if in.IfOutErrors != 0 {
		const prefix string = ",\"IfOutErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IfOutErrors))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IfMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IfMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IfMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IfMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow4(l, v)
}
func easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow5(in *jlexer.Lexer, out *EthMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "EthAlignmentErrors":
			out.EthAlignmentErrors = int64(in.Int64())
		case "EthFCSErrors":
			out.EthFCSErrors = int64(in.Int64())
		case "EthSingleCollisionFrames":
			out.EthSingleCollisionFrames = int64(in.Int64())
		case "EthMultipleCollisionFrames":
			out.EthMultipleCollisionFrames = int64(in.Int64())
		case "EthSQETestErrors":
			out.EthSQETestErrors = int64(in.Int64())
		case "EthDeferredTransmissions":
			out.EthDeferredTransmissions = int64(in.Int64())
		case "EthLateCollisions":
			out.EthLateCollisions = int64(in.Int64())
		case "EthExcessiveCollisions":
			out.EthExcessiveCollisions = int64(in.Int64())
		case "EthInternalMacReceiveErrors":
			out.EthInternalMacReceiveErrors = int64(in.Int64())
		case "EthInternalMacTransmitErrors":
			out.EthInternalMacTransmitErrors = int64(in.Int64())
		case "EthCarrierSenseErrors":
			out.EthCarrierSenseErrors = int64(in.Int64())
		case "EthFrameTooLongs":
			out.EthFrameTooLongs = int64(in.Int64())
		case "EthSymbolErrors":
			out.EthSymbolErrors = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow5(out *jwriter.Writer, in EthMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EthAlignmentErrors != 0 {
		const prefix string = ",\"EthAlignmentErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthAlignmentErrors))
	}
	if in.EthFCSErrors != 0 {
		const prefix string = ",\"EthFCSErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthFCSErrors))
	}
	if in.EthSingleCollisionFrames != 0 {
		const prefix string = ",\"EthSingleCollisionFrames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthSingleCollisionFrames))
	}
	if in.EthMultipleCollisionFrames != 0 {
		const prefix string = ",\"EthMultipleCollisionFrames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthMultipleCollisionFrames))
	}
	if in.EthSQETestErrors != 0 {
		const prefix string = ",\"EthSQETestErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthSQETestErrors))
	}
	if in.EthDeferredTransmissions != 0 {
		const prefix string = ",\"EthDeferredTransmissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthDeferredTransmissions))
	}
	if in.EthLateCollisions != 0 {
		const prefix string = ",\"EthLateCollisions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthLateCollisions))
	}
	if in.EthExcessiveCollisions != 0 {
		const prefix string = ",\"EthExcessiveCollisions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthExcessiveCollisions))
	}
	if in.EthInternalMacReceiveErrors != 0 {
		const prefix string = ",\"EthInternalMacReceiveErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthInternalMacReceiveErrors))
	}
	if in.EthInternalMacTransmitErrors != 0 {
		const prefix string = ",\"EthInternalMacTransmitErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthInternalMacTransmitErrors))
	}
	if in.EthCarrierSenseErrors != 0 {
		const prefix string = ",\"EthCarrierSenseErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthCarrierSenseErrors))
	}
	if in.EthFrameTooLongs != 0 {
		const prefix string = ",\"EthFrameTooLongs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthFrameTooLongs))
	}
	if in.EthSymbolErrors != 0 {
		const prefix string = ",\"EthSymbolErrors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EthSymbolErrors))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EthMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EthMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson51bca34dEncodeGithubComSkydiveProjectSkydiveSflow5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EthMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EthMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson51bca34dDecodeGithubComSkydiveProjectSkydiveSflow5(l, v)
}
