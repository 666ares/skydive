// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package topology

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1dbef17bDecodeGithubComSkydiveProjectSkydiveTopology(in *jlexer.Lexer, out *Hosts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IP":
			out.IP = string(in.String())
		case "Hostname":
			out.Hostname = string(in.String())
		case "ByIP":
			(out.ByIP).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1dbef17bEncodeGithubComSkydiveProjectSkydiveTopology(out *jwriter.Writer, in Hosts) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IP != "" {
		const prefix string = ",\"IP\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	if in.Hostname != "" {
		const prefix string = ",\"Hostname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hostname))
	}
	if len(in.ByIP) != 0 {
		const prefix string = ",\"ByIP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ByIP).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Hosts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1dbef17bEncodeGithubComSkydiveProjectSkydiveTopology(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Hosts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1dbef17bEncodeGithubComSkydiveProjectSkydiveTopology(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Hosts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1dbef17bDecodeGithubComSkydiveProjectSkydiveTopology(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Hosts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1dbef17bDecodeGithubComSkydiveProjectSkydiveTopology(l, v)
}
func easyjson1dbef17bDecodeGithubComSkydiveProjectSkydiveTopology1(in *jlexer.Lexer, out *ContainerMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Image":
			out.Image = string(in.String())
		case "ImageID":
			out.ImageID = string(in.String())
		case "Runtime":
			out.Runtime = string(in.String())
		case "Status":
			out.Status = string(in.String())
		case "InitProcessPID":
			out.InitProcessPID = int64(in.Int64())
		case "Hosts":
			(out.Hosts).UnmarshalEasyJSON(in)
		case "Labels":
			(out.Labels).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1dbef17bEncodeGithubComSkydiveProjectSkydiveTopology1(out *jwriter.Writer, in ContainerMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Image != "" {
		const prefix string = ",\"Image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	if in.ImageID != "" {
		const prefix string = ",\"ImageID\":"
		out.RawString(prefix)
		out.String(string(in.ImageID))
	}
	{
		const prefix string = ",\"Runtime\":"
		out.RawString(prefix)
		out.String(string(in.Runtime))
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"InitProcessPID\":"
		out.RawString(prefix)
		out.Int64(int64(in.InitProcessPID))
	}
	if true {
		const prefix string = ",\"Hosts\":"
		out.RawString(prefix)
		(in.Hosts).MarshalEasyJSON(out)
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"Labels\":"
		out.RawString(prefix)
		(in.Labels).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContainerMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1dbef17bEncodeGithubComSkydiveProjectSkydiveTopology1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContainerMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1dbef17bEncodeGithubComSkydiveProjectSkydiveTopology1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContainerMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1dbef17bDecodeGithubComSkydiveProjectSkydiveTopology1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContainerMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1dbef17bDecodeGithubComSkydiveProjectSkydiveTopology1(l, v)
}
