//go:generate go run github.com/skydive-project/skydive/graffiti/gendecoder -package github.com/skydive-project/skydive/topology/probes/ovn/ovnmodel
//go:generate go run github.com/mailru/easyjson/easyjson $GOFILE

// Code generated by ovnmetagen
// DO NOT EDIT.

package ovnmodel

import (
	"encoding/json"
	"fmt"

	"github.com/skydive-project/skydive/graffiti/getter"
	"github.com/skydive-project/skydive/graffiti/graph"
)

// NBGlobal defines the type used by both libovsdb and skydive for table NB_Global
// easyjson:json
// gendecoder
type NBGlobal struct {
	UUID           string            `ovsdb:"_uuid" json:",omitempty" `
	Connections    []string          `ovsdb:"connections" json:",omitempty" `
	ExternalIDs    map[string]string `ovsdb:"external_ids" json:",omitempty" `
	HvCfg          int               `ovsdb:"hv_cfg" json:",omitempty" `
	HvCfgTimestamp int               `ovsdb:"hv_cfg_timestamp" json:",omitempty" `
	Ipsec          bool              `ovsdb:"ipsec" json:",omitempty" `
	Name           string            `ovsdb:"name" json:",omitempty" `
	NbCfg          int               `ovsdb:"nb_cfg" json:",omitempty" `
	NbCfgTimestamp int               `ovsdb:"nb_cfg_timestamp" json:",omitempty" `
	Options        map[string]string `ovsdb:"options" json:",omitempty" `
	SbCfg          int               `ovsdb:"sb_cfg" json:",omitempty" `
	SbCfgTimestamp int               `ovsdb:"sb_cfg_timestamp" json:",omitempty" `
	SSL            []string          `ovsdb:"ssl" json:",omitempty" `

	ExternalIDsMeta graph.Metadata `json:",omitempty" field:"Metadata"`
	OptionsMeta     graph.Metadata `json:",omitempty" field:"Metadata"`
}

func (t *NBGlobal) Metadata() graph.Metadata {
	// Generate Metadata from maps
	t.ExternalIDsMeta = graph.NormalizeValue(t.ExternalIDs).(map[string]interface{})
	t.OptionsMeta = graph.NormalizeValue(t.Options).(map[string]interface{})

	return graph.Metadata{
		"Type":    "NBGlobal",
		"Manager": "ovn",
		"UUID":    t.GetUUID(),
		"Name":    t.GetName(),
		"OVN":     t,
	}
}

func (t *NBGlobal) GetUUID() string {
	return t.UUID
}

func (t *NBGlobal) GetName() string {
	if name := t.Name; name != "" {
		return name
	}
	return t.GetUUID()
}

// NBGlobalDecoder implements a json message raw decoder
func NBGlobalDecoder(raw json.RawMessage) (getter.Getter, error) {
	var t NBGlobal
	if err := json.Unmarshal(raw, &t); err != nil {
		return nil, fmt.Errorf("unable to unmarshal NBGlobal metadata %s: %s", string(raw), err)
	}
	return &t, nil
}
