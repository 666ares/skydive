// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ovnmodel

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson98569cc5DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(in *jlexer.Lexer, out *LogicalRouterPort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		case "Enabled":
			if in.IsNull() {
				in.Skip()
				out.Enabled = nil
			} else {
				in.Delim('[')
				if out.Enabled == nil {
					if !in.IsDelim(']') {
						out.Enabled = make([]bool, 0, 64)
					} else {
						out.Enabled = []bool{}
					}
				} else {
					out.Enabled = (out.Enabled)[:0]
				}
				for !in.IsDelim(']') {
					var v1 bool
					v1 = bool(in.Bool())
					out.Enabled = append(out.Enabled, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExternalIDs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ExternalIDs = make(map[string]string)
				} else {
					out.ExternalIDs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.ExternalIDs)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "GatewayChassis":
			if in.IsNull() {
				in.Skip()
				out.GatewayChassis = nil
			} else {
				in.Delim('[')
				if out.GatewayChassis == nil {
					if !in.IsDelim(']') {
						out.GatewayChassis = make([]string, 0, 4)
					} else {
						out.GatewayChassis = []string{}
					}
				} else {
					out.GatewayChassis = (out.GatewayChassis)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.GatewayChassis = append(out.GatewayChassis, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "HaChassisGroup":
			if in.IsNull() {
				in.Skip()
				out.HaChassisGroup = nil
			} else {
				in.Delim('[')
				if out.HaChassisGroup == nil {
					if !in.IsDelim(']') {
						out.HaChassisGroup = make([]string, 0, 4)
					} else {
						out.HaChassisGroup = []string{}
					}
				} else {
					out.HaChassisGroup = (out.HaChassisGroup)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.HaChassisGroup = append(out.HaChassisGroup, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Ipv6Prefix":
			if in.IsNull() {
				in.Skip()
				out.Ipv6Prefix = nil
			} else {
				in.Delim('[')
				if out.Ipv6Prefix == nil {
					if !in.IsDelim(']') {
						out.Ipv6Prefix = make([]string, 0, 4)
					} else {
						out.Ipv6Prefix = []string{}
					}
				} else {
					out.Ipv6Prefix = (out.Ipv6Prefix)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Ipv6Prefix = append(out.Ipv6Prefix, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Ipv6RaConfigs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ipv6RaConfigs = make(map[string]string)
				} else {
					out.Ipv6RaConfigs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.Ipv6RaConfigs)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "MAC":
			out.MAC = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Networks":
			if in.IsNull() {
				in.Skip()
				out.Networks = nil
			} else {
				in.Delim('[')
				if out.Networks == nil {
					if !in.IsDelim(']') {
						out.Networks = make([]string, 0, 4)
					} else {
						out.Networks = []string{}
					}
				} else {
					out.Networks = (out.Networks)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Networks = append(out.Networks, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Options":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Options = make(map[string]string)
				} else {
					out.Options = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.Options)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Peer":
			if in.IsNull() {
				in.Skip()
				out.Peer = nil
			} else {
				in.Delim('[')
				if out.Peer == nil {
					if !in.IsDelim(']') {
						out.Peer = make([]string, 0, 4)
					} else {
						out.Peer = []string{}
					}
				} else {
					out.Peer = (out.Peer)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Peer = append(out.Peer, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExternalIDsMeta":
			(out.ExternalIDsMeta).UnmarshalEasyJSON(in)
		case "Ipv6RaConfigsMeta":
			(out.Ipv6RaConfigsMeta).UnmarshalEasyJSON(in)
		case "OptionsMeta":
			(out.OptionsMeta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson98569cc5EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(out *jwriter.Writer, in LogicalRouterPort) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UUID != "" {
		const prefix string = ",\"UUID\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	if len(in.Enabled) != 0 {
		const prefix string = ",\"Enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Enabled {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.Bool(bool(v11))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExternalIDs) != 0 {
		const prefix string = ",\"ExternalIDs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.ExternalIDs {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				out.String(string(v12Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.GatewayChassis) != 0 {
		const prefix string = ",\"GatewayChassis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.GatewayChassis {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if len(in.HaChassisGroup) != 0 {
		const prefix string = ",\"HaChassisGroup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.HaChassisGroup {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ipv6Prefix) != 0 {
		const prefix string = ",\"Ipv6Prefix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Ipv6Prefix {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ipv6RaConfigs) != 0 {
		const prefix string = ",\"Ipv6RaConfigs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.Ipv6RaConfigs {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				out.String(string(v19Value))
			}
			out.RawByte('}')
		}
	}
	if in.MAC != "" {
		const prefix string = ",\"MAC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MAC))
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Networks) != 0 {
		const prefix string = ",\"Networks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Networks {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"Options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Options {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				out.String(string(v22Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Peer) != 0 {
		const prefix string = ",\"Peer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Peer {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExternalIDsMeta) != 0 {
		const prefix string = ",\"ExternalIDsMeta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ExternalIDsMeta).MarshalEasyJSON(out)
	}
	if len(in.Ipv6RaConfigsMeta) != 0 {
		const prefix string = ",\"Ipv6RaConfigsMeta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Ipv6RaConfigsMeta).MarshalEasyJSON(out)
	}
	if len(in.OptionsMeta) != 0 {
		const prefix string = ",\"OptionsMeta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.OptionsMeta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogicalRouterPort) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson98569cc5EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogicalRouterPort) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson98569cc5EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogicalRouterPort) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson98569cc5DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogicalRouterPort) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson98569cc5DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(l, v)
}
