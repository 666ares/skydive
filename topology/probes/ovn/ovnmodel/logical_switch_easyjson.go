// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ovnmodel

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson774f72ecDecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(in *jlexer.Lexer, out *LogicalSwitch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		case "ACLs":
			if in.IsNull() {
				in.Skip()
				out.ACLs = nil
			} else {
				in.Delim('[')
				if out.ACLs == nil {
					if !in.IsDelim(']') {
						out.ACLs = make([]string, 0, 4)
					} else {
						out.ACLs = []string{}
					}
				} else {
					out.ACLs = (out.ACLs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.ACLs = append(out.ACLs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DNSRecords":
			if in.IsNull() {
				in.Skip()
				out.DNSRecords = nil
			} else {
				in.Delim('[')
				if out.DNSRecords == nil {
					if !in.IsDelim(']') {
						out.DNSRecords = make([]string, 0, 4)
					} else {
						out.DNSRecords = []string{}
					}
				} else {
					out.DNSRecords = (out.DNSRecords)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.DNSRecords = append(out.DNSRecords, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExternalIDs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ExternalIDs = make(map[string]string)
				} else {
					out.ExternalIDs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.ExternalIDs)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ForwardingGroups":
			if in.IsNull() {
				in.Skip()
				out.ForwardingGroups = nil
			} else {
				in.Delim('[')
				if out.ForwardingGroups == nil {
					if !in.IsDelim(']') {
						out.ForwardingGroups = make([]string, 0, 4)
					} else {
						out.ForwardingGroups = []string{}
					}
				} else {
					out.ForwardingGroups = (out.ForwardingGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.ForwardingGroups = append(out.ForwardingGroups, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "LoadBalancer":
			if in.IsNull() {
				in.Skip()
				out.LoadBalancer = nil
			} else {
				in.Delim('[')
				if out.LoadBalancer == nil {
					if !in.IsDelim(']') {
						out.LoadBalancer = make([]string, 0, 4)
					} else {
						out.LoadBalancer = []string{}
					}
				} else {
					out.LoadBalancer = (out.LoadBalancer)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.LoadBalancer = append(out.LoadBalancer, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Name":
			out.Name = string(in.String())
		case "OtherConfig":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.OtherConfig = make(map[string]string)
				} else {
					out.OtherConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.OtherConfig)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Ports":
			if in.IsNull() {
				in.Skip()
				out.Ports = nil
			} else {
				in.Delim('[')
				if out.Ports == nil {
					if !in.IsDelim(']') {
						out.Ports = make([]string, 0, 4)
					} else {
						out.Ports = []string{}
					}
				} else {
					out.Ports = (out.Ports)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Ports = append(out.Ports, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "QOSRules":
			if in.IsNull() {
				in.Skip()
				out.QOSRules = nil
			} else {
				in.Delim('[')
				if out.QOSRules == nil {
					if !in.IsDelim(']') {
						out.QOSRules = make([]string, 0, 4)
					} else {
						out.QOSRules = []string{}
					}
				} else {
					out.QOSRules = (out.QOSRules)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.QOSRules = append(out.QOSRules, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExternalIDsMeta":
			(out.ExternalIDsMeta).UnmarshalEasyJSON(in)
		case "OtherConfigMeta":
			(out.OtherConfigMeta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson774f72ecEncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(out *jwriter.Writer, in LogicalSwitch) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UUID != "" {
		const prefix string = ",\"UUID\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	if len(in.ACLs) != 0 {
		const prefix string = ",\"ACLs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.ACLs {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if len(in.DNSRecords) != 0 {
		const prefix string = ",\"DNSRecords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.DNSRecords {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExternalIDs) != 0 {
		const prefix string = ",\"ExternalIDs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.ExternalIDs {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				out.String(string(v13Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.ForwardingGroups) != 0 {
		const prefix string = ",\"ForwardingGroups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.ForwardingGroups {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if len(in.LoadBalancer) != 0 {
		const prefix string = ",\"LoadBalancer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.LoadBalancer {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.OtherConfig) != 0 {
		const prefix string = ",\"OtherConfig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.OtherConfig {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				out.String(string(v18Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Ports) != 0 {
		const prefix string = ",\"Ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.Ports {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	if len(in.QOSRules) != 0 {
		const prefix string = ",\"QOSRules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.QOSRules {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExternalIDsMeta) != 0 {
		const prefix string = ",\"ExternalIDsMeta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ExternalIDsMeta).MarshalEasyJSON(out)
	}
	if len(in.OtherConfigMeta) != 0 {
		const prefix string = ",\"OtherConfigMeta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.OtherConfigMeta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogicalSwitch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson774f72ecEncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogicalSwitch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson774f72ecEncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogicalSwitch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson774f72ecDecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogicalSwitch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson774f72ecDecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(l, v)
}
