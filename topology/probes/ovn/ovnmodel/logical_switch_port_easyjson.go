// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ovnmodel

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFff15e88DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(in *jlexer.Lexer, out *LogicalSwitchPort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		case "Addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]string, 0, 4)
					} else {
						out.Addresses = []string{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Addresses = append(out.Addresses, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Dhcpv4Options":
			if in.IsNull() {
				in.Skip()
				out.Dhcpv4Options = nil
			} else {
				in.Delim('[')
				if out.Dhcpv4Options == nil {
					if !in.IsDelim(']') {
						out.Dhcpv4Options = make([]string, 0, 4)
					} else {
						out.Dhcpv4Options = []string{}
					}
				} else {
					out.Dhcpv4Options = (out.Dhcpv4Options)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Dhcpv4Options = append(out.Dhcpv4Options, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Dhcpv6Options":
			if in.IsNull() {
				in.Skip()
				out.Dhcpv6Options = nil
			} else {
				in.Delim('[')
				if out.Dhcpv6Options == nil {
					if !in.IsDelim(']') {
						out.Dhcpv6Options = make([]string, 0, 4)
					} else {
						out.Dhcpv6Options = []string{}
					}
				} else {
					out.Dhcpv6Options = (out.Dhcpv6Options)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Dhcpv6Options = append(out.Dhcpv6Options, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DynamicAddresses":
			if in.IsNull() {
				in.Skip()
				out.DynamicAddresses = nil
			} else {
				in.Delim('[')
				if out.DynamicAddresses == nil {
					if !in.IsDelim(']') {
						out.DynamicAddresses = make([]string, 0, 4)
					} else {
						out.DynamicAddresses = []string{}
					}
				} else {
					out.DynamicAddresses = (out.DynamicAddresses)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.DynamicAddresses = append(out.DynamicAddresses, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Enabled":
			if in.IsNull() {
				in.Skip()
				out.Enabled = nil
			} else {
				in.Delim('[')
				if out.Enabled == nil {
					if !in.IsDelim(']') {
						out.Enabled = make([]bool, 0, 64)
					} else {
						out.Enabled = []bool{}
					}
				} else {
					out.Enabled = (out.Enabled)[:0]
				}
				for !in.IsDelim(']') {
					var v5 bool
					v5 = bool(in.Bool())
					out.Enabled = append(out.Enabled, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExternalIDs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ExternalIDs = make(map[string]string)
				} else {
					out.ExternalIDs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.ExternalIDs)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "HaChassisGroup":
			if in.IsNull() {
				in.Skip()
				out.HaChassisGroup = nil
			} else {
				in.Delim('[')
				if out.HaChassisGroup == nil {
					if !in.IsDelim(']') {
						out.HaChassisGroup = make([]string, 0, 4)
					} else {
						out.HaChassisGroup = []string{}
					}
				} else {
					out.HaChassisGroup = (out.HaChassisGroup)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.HaChassisGroup = append(out.HaChassisGroup, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Name":
			out.Name = string(in.String())
		case "Options":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Options = make(map[string]string)
				} else {
					out.Options = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.Options)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ParentName":
			if in.IsNull() {
				in.Skip()
				out.ParentName = nil
			} else {
				in.Delim('[')
				if out.ParentName == nil {
					if !in.IsDelim(']') {
						out.ParentName = make([]string, 0, 4)
					} else {
						out.ParentName = []string{}
					}
				} else {
					out.ParentName = (out.ParentName)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.ParentName = append(out.ParentName, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PortSecurity":
			if in.IsNull() {
				in.Skip()
				out.PortSecurity = nil
			} else {
				in.Delim('[')
				if out.PortSecurity == nil {
					if !in.IsDelim(']') {
						out.PortSecurity = make([]string, 0, 4)
					} else {
						out.PortSecurity = []string{}
					}
				} else {
					out.PortSecurity = (out.PortSecurity)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.PortSecurity = append(out.PortSecurity, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Tag":
			if in.IsNull() {
				in.Skip()
				out.Tag = nil
			} else {
				in.Delim('[')
				if out.Tag == nil {
					if !in.IsDelim(']') {
						out.Tag = make([]int, 0, 8)
					} else {
						out.Tag = []int{}
					}
				} else {
					out.Tag = (out.Tag)[:0]
				}
				for !in.IsDelim(']') {
					var v11 int
					v11 = int(in.Int())
					out.Tag = append(out.Tag, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TagRequest":
			if in.IsNull() {
				in.Skip()
				out.TagRequest = nil
			} else {
				in.Delim('[')
				if out.TagRequest == nil {
					if !in.IsDelim(']') {
						out.TagRequest = make([]int, 0, 8)
					} else {
						out.TagRequest = []int{}
					}
				} else {
					out.TagRequest = (out.TagRequest)[:0]
				}
				for !in.IsDelim(']') {
					var v12 int
					v12 = int(in.Int())
					out.TagRequest = append(out.TagRequest, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Type":
			out.Type = string(in.String())
		case "Up":
			if in.IsNull() {
				in.Skip()
				out.Up = nil
			} else {
				in.Delim('[')
				if out.Up == nil {
					if !in.IsDelim(']') {
						out.Up = make([]bool, 0, 64)
					} else {
						out.Up = []bool{}
					}
				} else {
					out.Up = (out.Up)[:0]
				}
				for !in.IsDelim(']') {
					var v13 bool
					v13 = bool(in.Bool())
					out.Up = append(out.Up, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExternalIDsMeta":
			(out.ExternalIDsMeta).UnmarshalEasyJSON(in)
		case "OptionsMeta":
			(out.OptionsMeta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFff15e88EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(out *jwriter.Writer, in LogicalSwitchPort) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UUID != "" {
		const prefix string = ",\"UUID\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	if len(in.Addresses) != 0 {
		const prefix string = ",\"Addresses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Addresses {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if len(in.Dhcpv4Options) != 0 {
		const prefix string = ",\"Dhcpv4Options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Dhcpv4Options {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	if len(in.Dhcpv6Options) != 0 {
		const prefix string = ",\"Dhcpv6Options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Dhcpv6Options {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	if len(in.DynamicAddresses) != 0 {
		const prefix string = ",\"DynamicAddresses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.DynamicAddresses {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	if len(in.Enabled) != 0 {
		const prefix string = ",\"Enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.Enabled {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.Bool(bool(v23))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExternalIDs) != 0 {
		const prefix string = ",\"ExternalIDs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.ExternalIDs {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				out.String(string(v24Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.HaChassisGroup) != 0 {
		const prefix string = ",\"HaChassisGroup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v25, v26 := range in.HaChassisGroup {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"Options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v27First := true
			for v27Name, v27Value := range in.Options {
				if v27First {
					v27First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v27Name))
				out.RawByte(':')
				out.String(string(v27Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.ParentName) != 0 {
		const prefix string = ",\"ParentName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.ParentName {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	if len(in.PortSecurity) != 0 {
		const prefix string = ",\"PortSecurity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.PortSecurity {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	if len(in.Tag) != 0 {
		const prefix string = ",\"Tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Tag {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v33))
			}
			out.RawByte(']')
		}
	}
	if len(in.TagRequest) != 0 {
		const prefix string = ",\"TagRequest\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v34, v35 := range in.TagRequest {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v35))
			}
			out.RawByte(']')
		}
	}
	if in.Type != "" {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.Up) != 0 {
		const prefix string = ",\"Up\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.Up {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.Bool(bool(v37))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExternalIDsMeta) != 0 {
		const prefix string = ",\"ExternalIDsMeta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ExternalIDsMeta).MarshalEasyJSON(out)
	}
	if len(in.OptionsMeta) != 0 {
		const prefix string = ",\"OptionsMeta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.OptionsMeta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogicalSwitchPort) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFff15e88EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogicalSwitchPort) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFff15e88EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogicalSwitchPort) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFff15e88DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogicalSwitchPort) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFff15e88DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(l, v)
}
