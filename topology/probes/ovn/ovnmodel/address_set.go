//go:generate go run github.com/skydive-project/skydive/graffiti/gendecoder -package github.com/skydive-project/skydive/topology/probes/ovn/ovnmodel
//go:generate go run github.com/mailru/easyjson/easyjson $GOFILE

// Code generated by ovnmetagen
// DO NOT EDIT.

package ovnmodel

import (
	"encoding/json"
	"fmt"

	"github.com/skydive-project/skydive/graffiti/getter"
	"github.com/skydive-project/skydive/graffiti/graph"
)

// AddressSet defines the type used by both libovsdb and skydive for table Address_Set
// easyjson:json
// gendecoder
type AddressSet struct {
	UUID        string            `ovsdb:"_uuid" json:",omitempty" `
	Addresses   []string          `ovsdb:"addresses" json:",omitempty" `
	ExternalIDs map[string]string `ovsdb:"external_ids" json:",omitempty" `
	Name        string            `ovsdb:"name" json:",omitempty" `

	ExternalIDsMeta graph.Metadata `json:",omitempty" field:"Metadata"`
}

func (t *AddressSet) Metadata() graph.Metadata {
	// Generate Metadata from maps
	t.ExternalIDsMeta = graph.NormalizeValue(t.ExternalIDs).(map[string]interface{})

	return graph.Metadata{
		"Type":    "AddressSet",
		"Manager": "ovn",
		"UUID":    t.GetUUID(),
		"Name":    t.GetName(),
		"OVN":     t,
	}
}

func (t *AddressSet) GetUUID() string {
	return t.UUID
}

func (t *AddressSet) GetName() string {
	if name := t.Name; name != "" {
		return name
	}
	return t.GetUUID()
}

// AddressSetDecoder implements a json message raw decoder
func AddressSetDecoder(raw json.RawMessage) (getter.Getter, error) {
	var t AddressSet
	if err := json.Unmarshal(raw, &t); err != nil {
		return nil, fmt.Errorf("unable to unmarshal AddressSet metadata %s: %s", string(raw), err)
	}
	return &t, nil
}
