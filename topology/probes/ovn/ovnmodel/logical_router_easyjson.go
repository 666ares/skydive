// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ovnmodel

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB38f4bf7DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(in *jlexer.Lexer, out *LogicalRouter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		case "Enabled":
			if in.IsNull() {
				in.Skip()
				out.Enabled = nil
			} else {
				in.Delim('[')
				if out.Enabled == nil {
					if !in.IsDelim(']') {
						out.Enabled = make([]bool, 0, 64)
					} else {
						out.Enabled = []bool{}
					}
				} else {
					out.Enabled = (out.Enabled)[:0]
				}
				for !in.IsDelim(']') {
					var v1 bool
					v1 = bool(in.Bool())
					out.Enabled = append(out.Enabled, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExternalIDs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ExternalIDs = make(map[string]string)
				} else {
					out.ExternalIDs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.ExternalIDs)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "LoadBalancer":
			if in.IsNull() {
				in.Skip()
				out.LoadBalancer = nil
			} else {
				in.Delim('[')
				if out.LoadBalancer == nil {
					if !in.IsDelim(']') {
						out.LoadBalancer = make([]string, 0, 4)
					} else {
						out.LoadBalancer = []string{}
					}
				} else {
					out.LoadBalancer = (out.LoadBalancer)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.LoadBalancer = append(out.LoadBalancer, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Name":
			out.Name = string(in.String())
		case "Nat":
			if in.IsNull() {
				in.Skip()
				out.Nat = nil
			} else {
				in.Delim('[')
				if out.Nat == nil {
					if !in.IsDelim(']') {
						out.Nat = make([]string, 0, 4)
					} else {
						out.Nat = []string{}
					}
				} else {
					out.Nat = (out.Nat)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Nat = append(out.Nat, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Options":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Options = make(map[string]string)
				} else {
					out.Options = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 string
					v5 = string(in.String())
					(out.Options)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Policies":
			if in.IsNull() {
				in.Skip()
				out.Policies = nil
			} else {
				in.Delim('[')
				if out.Policies == nil {
					if !in.IsDelim(']') {
						out.Policies = make([]string, 0, 4)
					} else {
						out.Policies = []string{}
					}
				} else {
					out.Policies = (out.Policies)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Policies = append(out.Policies, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Ports":
			if in.IsNull() {
				in.Skip()
				out.Ports = nil
			} else {
				in.Delim('[')
				if out.Ports == nil {
					if !in.IsDelim(']') {
						out.Ports = make([]string, 0, 4)
					} else {
						out.Ports = []string{}
					}
				} else {
					out.Ports = (out.Ports)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Ports = append(out.Ports, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "StaticRoutes":
			if in.IsNull() {
				in.Skip()
				out.StaticRoutes = nil
			} else {
				in.Delim('[')
				if out.StaticRoutes == nil {
					if !in.IsDelim(']') {
						out.StaticRoutes = make([]string, 0, 4)
					} else {
						out.StaticRoutes = []string{}
					}
				} else {
					out.StaticRoutes = (out.StaticRoutes)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.StaticRoutes = append(out.StaticRoutes, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExternalIDsMeta":
			(out.ExternalIDsMeta).UnmarshalEasyJSON(in)
		case "OptionsMeta":
			(out.OptionsMeta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB38f4bf7EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(out *jwriter.Writer, in LogicalRouter) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UUID != "" {
		const prefix string = ",\"UUID\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	if len(in.Enabled) != 0 {
		const prefix string = ",\"Enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Enabled {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Bool(bool(v10))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExternalIDs) != 0 {
		const prefix string = ",\"ExternalIDs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.ExternalIDs {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.String(string(v11Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.LoadBalancer) != 0 {
		const prefix string = ",\"LoadBalancer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.LoadBalancer {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Nat) != 0 {
		const prefix string = ",\"Nat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Nat {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"Options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Options {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				out.String(string(v16Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Policies) != 0 {
		const prefix string = ",\"Policies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Policies {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ports) != 0 {
		const prefix string = ",\"Ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.Ports {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	if len(in.StaticRoutes) != 0 {
		const prefix string = ",\"StaticRoutes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.StaticRoutes {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExternalIDsMeta) != 0 {
		const prefix string = ",\"ExternalIDsMeta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ExternalIDsMeta).MarshalEasyJSON(out)
	}
	if len(in.OptionsMeta) != 0 {
		const prefix string = ",\"OptionsMeta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.OptionsMeta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogicalRouter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB38f4bf7EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogicalRouter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB38f4bf7EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogicalRouter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB38f4bf7DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogicalRouter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB38f4bf7DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(l, v)
}
