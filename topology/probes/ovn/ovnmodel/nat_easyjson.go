// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ovnmodel

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE3fd93b7DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(in *jlexer.Lexer, out *NAT) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		case "AllowedExtIPs":
			if in.IsNull() {
				in.Skip()
				out.AllowedExtIPs = nil
			} else {
				in.Delim('[')
				if out.AllowedExtIPs == nil {
					if !in.IsDelim(']') {
						out.AllowedExtIPs = make([]string, 0, 4)
					} else {
						out.AllowedExtIPs = []string{}
					}
				} else {
					out.AllowedExtIPs = (out.AllowedExtIPs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.AllowedExtIPs = append(out.AllowedExtIPs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExemptedExtIPs":
			if in.IsNull() {
				in.Skip()
				out.ExemptedExtIPs = nil
			} else {
				in.Delim('[')
				if out.ExemptedExtIPs == nil {
					if !in.IsDelim(']') {
						out.ExemptedExtIPs = make([]string, 0, 4)
					} else {
						out.ExemptedExtIPs = []string{}
					}
				} else {
					out.ExemptedExtIPs = (out.ExemptedExtIPs)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.ExemptedExtIPs = append(out.ExemptedExtIPs, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExternalIDs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ExternalIDs = make(map[string]string)
				} else {
					out.ExternalIDs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.ExternalIDs)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ExternalIP":
			out.ExternalIP = string(in.String())
		case "ExternalMAC":
			if in.IsNull() {
				in.Skip()
				out.ExternalMAC = nil
			} else {
				in.Delim('[')
				if out.ExternalMAC == nil {
					if !in.IsDelim(']') {
						out.ExternalMAC = make([]string, 0, 4)
					} else {
						out.ExternalMAC = []string{}
					}
				} else {
					out.ExternalMAC = (out.ExternalMAC)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.ExternalMAC = append(out.ExternalMAC, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExternalPortRange":
			out.ExternalPortRange = string(in.String())
		case "LogicalIP":
			out.LogicalIP = string(in.String())
		case "LogicalPort":
			if in.IsNull() {
				in.Skip()
				out.LogicalPort = nil
			} else {
				in.Delim('[')
				if out.LogicalPort == nil {
					if !in.IsDelim(']') {
						out.LogicalPort = make([]string, 0, 4)
					} else {
						out.LogicalPort = []string{}
					}
				} else {
					out.LogicalPort = (out.LogicalPort)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.LogicalPort = append(out.LogicalPort, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Options":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Options = make(map[string]string)
				} else {
					out.Options = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.Options)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Type":
			out.Type = string(in.String())
		case "ExternalIDsMeta":
			(out.ExternalIDsMeta).UnmarshalEasyJSON(in)
		case "OptionsMeta":
			(out.OptionsMeta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE3fd93b7EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(out *jwriter.Writer, in NAT) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UUID != "" {
		const prefix string = ",\"UUID\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	if len(in.AllowedExtIPs) != 0 {
		const prefix string = ",\"AllowedExtIPs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.AllowedExtIPs {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExemptedExtIPs) != 0 {
		const prefix string = ",\"ExemptedExtIPs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.ExemptedExtIPs {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExternalIDs) != 0 {
		const prefix string = ",\"ExternalIDs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.ExternalIDs {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.String(string(v11Value))
			}
			out.RawByte('}')
		}
	}
	if in.ExternalIP != "" {
		const prefix string = ",\"ExternalIP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExternalIP))
	}
	if len(in.ExternalMAC) != 0 {
		const prefix string = ",\"ExternalMAC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.ExternalMAC {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	if in.ExternalPortRange != "" {
		const prefix string = ",\"ExternalPortRange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExternalPortRange))
	}
	if in.LogicalIP != "" {
		const prefix string = ",\"LogicalIP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LogicalIP))
	}
	if len(in.LogicalPort) != 0 {
		const prefix string = ",\"LogicalPort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.LogicalPort {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"Options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Options {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				out.String(string(v16Value))
			}
			out.RawByte('}')
		}
	}
	if in.Type != "" {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.ExternalIDsMeta) != 0 {
		const prefix string = ",\"ExternalIDsMeta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ExternalIDsMeta).MarshalEasyJSON(out)
	}
	if len(in.OptionsMeta) != 0 {
		const prefix string = ",\"OptionsMeta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.OptionsMeta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NAT) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE3fd93b7EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NAT) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE3fd93b7EncodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NAT) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE3fd93b7DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NAT) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE3fd93b7DecodeGithubComSkydiveProjectSkydiveTopologyProbesOvnOvnmodel(l, v)
}
