package main

import (
	"sort"
	"text/template"

	"github.com/ovn-org/libovsdb/modelgen"
	"github.com/ovn-org/libovsdb/ovsdb"

	"github.com/skydive-project/skydive/topology/probes/ovn/ovnmodel"
)

const LINKS_TEMPLATE = `
// Code generated by ovnmetagen
// DO NOT EDIT.

package {{ .PackageName }}

func GetLinks() []OVNLink {
    return []OVNLink {
	{{ range .Links}}
    	{
    	    SourceTable: "{{ .SourceTable }}",
    	    SourceField: "{{ .SourceField }}",
    	    DestTable: "{{ .DestTable }}",
    	    DestField: "UUID",
    	    Relationship: "{{ .Relationship }}",
    	},
    	{{ end }}
    }
}

`

type LinkTemplateData struct {
	PackageName string
	Links       []ovnmodel.OVNLink
}

func linksTemplate(pkgName string, db *ovsdb.DatabaseSchema) (*template.Template, LinkTemplateData) {
	var links []ovnmodel.OVNLink

	// Keep a deterministic order
	var tableOrder sort.StringSlice
	for tableName := range db.Tables {
		tableOrder = append(tableOrder, tableName)
	}
	tableOrder.Sort()

	for _, tableName := range tableOrder {
		tableSchema := db.Table(tableName)
		var columnOrder sort.StringSlice
		for columnName := range db.Table(tableName).Columns {
			columnOrder = append(columnOrder, columnName)
		}
		columnOrder.Sort()

		for _, columnName := range columnOrder {
			columnSchema := tableSchema.Columns[columnName]
			if (columnSchema.Type == ovsdb.TypeUUID && columnSchema.TypeObj != nil) ||
				(columnSchema.Type == ovsdb.TypeSet && columnSchema.TypeObj.Key.Type == ovsdb.TypeUUID) {
				refTable, err := columnSchema.TypeObj.Key.RefTable()
				if err == nil && refTable != "" {
					links = append(links, ovnmodel.OVNLink{
						SourceTable:  tableName,
						SourceField:  modelgen.FieldName(columnName),
						DestTable:    refTable,
						Relationship: "ovn",
					})
				}
			}
		}
	}
	tdata := LinkTemplateData{
		PackageName: pkgName,
		Links:       links,
	}

	ltemplate := template.Must(template.New("links").Parse(LINKS_TEMPLATE))
	return ltemplate, tdata
}
