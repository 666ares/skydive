package main

import (
	"log"
	"sort"
	"text/template"

	"github.com/ovn-org/libovsdb/modelgen"
	"github.com/ovn-org/libovsdb/ovsdb"
)

const TABLE_HEADER = ` {{ define "header" }}
//go:generate go run github.com/skydive-project/skydive/graffiti/gendecoder -package github.com/skydive-project/skydive/topology/probes/ovn/ovnmodel
//go:generate go run github.com/mailru/easyjson/easyjson $GOFILE

// Code generated by ovnmetagen
// DO NOT EDIT.
{{ end }}
`

const TABLE_IMPORTS = `{{ define "preStructDefinitions" }}
import (
	"fmt"
	"encoding/json"

	"github.com/skydive-project/skydive/graffiti/graph"
	"github.com/skydive-project/skydive/graffiti/getter"
){{ end }}
`

const TABLE_EXTRA_TAGS = `{{ define "extraTags" }} json:",omitempty" {{ end }}`
const TABLE_EXTRA_FIELDS = `{{ define "extraFields" }} {{ range index . "MetadataFields" }} {{ .Name }} graph.Metadata ` + "`" + `json:",omitempty" field:"Metadata"` + "`" + `
{{ end }}{{ end }}`

const TABLE_COMMENTS = `{{ define "structComment" }}// {{  index . "StructName" }} defines the type used by both libovsdb and skydive for table {{ index . "TableName" }}
// easyjson:json
// gendecoder{{ end }}`

const TABLE_POST_DEFS = `{{ define "postStructDefinitions" }}
func (t *{{ index . "StructName" }} ) Metadata() graph.Metadata {
	// Generate Metadata from maps
	{{ range index . "MetadataFields" }} t.{{ .Name }} = graph.NormalizeValue(t.{{ .FieldName }}).(map[string]interface{})
	{{ end }}
	return graph.Metadata{
		"Type": "{{ index . "StructName" }}",
		"Manager": "ovn",
		"UUID":    t.GetUUID(),
		"Name":    t.GetName(),
		"OVN":     t,
	}
}

func (t *{{ index . "StructName" }}) GetUUID() string {
	return t.UUID
}

func (t *{{ index . "StructName" }}) GetName() string {
	if name := t.{{ index . "NameField" }}; name != "" {
	    return name
	}
	return t.GetUUID()
}

// {{ index . "StructName" }}Decoder implements a json message raw decoder
func {{ index . "StructName" }}Decoder(raw json.RawMessage) (getter.Getter, error) {
	var t {{ index . "StructName" }}
	if err := json.Unmarshal(raw, &t); err != nil {
		return nil, fmt.Errorf("unable to unmarshal {{ index . "StructName" }} metadata %s: %s", string(raw), err)
	}
	return &t, nil
}
{{ end }}
`

type MetadataField struct {
	Name      string
	FieldName string
}

func tableTemplate(pkgName, tableName string, db *ovsdb.DatabaseSchema) (*template.Template, map[string]interface{}) {
	base := modelgen.NewTableTemplate()
	data := modelgen.GetTableTemplateData(pkgName, tableName, db.Table(tableName))
	_, err := base.Parse(TABLE_HEADER)
	if err != nil {
		log.Fatal(err)
	}
	_, err = base.Parse(TABLE_EXTRA_FIELDS)
	if err != nil {
		log.Fatal(err)
	}
	_, err = base.Parse(TABLE_EXTRA_TAGS)
	if err != nil {
		log.Fatal(err)
	}
	_, err = base.Parse(TABLE_IMPORTS)
	if err != nil {
		log.Fatal(err)
	}
	_, err = base.Parse(TABLE_COMMENTS)
	if err != nil {
		log.Fatal(err)
	}
	_, err = base.Parse(TABLE_POST_DEFS)
	if err != nil {
		log.Fatal(err)
	}
	// Keep a deterministic order
	var order sort.StringSlice
	for columnName := range db.Table(tableName).Columns {
		order = append(order, columnName)
	}
	order.Sort()

	metadataFields := []MetadataField{}
	nameField := "UUID"

	for _, columnName := range order {
		columnSchema := db.Table(tableName).Columns[columnName]
		if columnName == "name" && columnSchema.Type == ovsdb.TypeString {
			nameField = modelgen.FieldName(columnName)
		}
		if columnSchema.Type == ovsdb.TypeMap && columnSchema.TypeObj.Key.Type == ovsdb.TypeString {
			metadataFields = append(metadataFields, MetadataField{
				Name:      modelgen.FieldName(columnName) + "Meta",
				FieldName: modelgen.FieldName(columnName),
			})
		}

	}
	data["MetadataFields"] = metadataFields
	data["NameField"] = nameField

	// Disable Enum Types because gendecoder cannot cope with them
	data.WithEnumTypes(false)

	return base, data
}
