package main

import (
	"log"
	"text/template"

	"github.com/ovn-org/libovsdb/modelgen"
	"github.com/ovn-org/libovsdb/ovsdb"
)

const MODEL_HEADER = ` {{ define "header" }}
// Code generated by ovnmetagen
// DO NOT EDIT.
{{ end }}
`
const MODEL_IMPORTS = `{{ define "preDBDefinitions" }}
import (
	"github.com/ovn-org/libovsdb/model"

	"github.com/skydive-project/skydive/graffiti/graph"
){{ end }}`

const MODEL_POST_DEFS = `{{ define "postDBDefinitions" }}
// Decoders returns all the decoder functions indexed by Name
func Decoders() map[string]graph.MetadataDecoder {
    return map[string] graph.MetadataDecoder {
    {{ range index . "Tables" }}
    "{{ .StructName}}" : {{ .StructName}}Decoder,
    {{ end }}
    }
} {{ end }}
`

func modelTemplate(pkgName string, db *ovsdb.DatabaseSchema) (*template.Template, map[string]interface{}) {
	base := modelgen.NewDBTemplate()
	data := modelgen.GetDBTemplateData(pkgName, db)
	_, err := base.Parse(MODEL_HEADER)
	if err != nil {
		log.Fatal(err)
	}
	_, err = base.Parse(MODEL_IMPORTS)
	if err != nil {
		log.Fatal(err)
	}
	_, err = base.Parse(MODEL_POST_DEFS)
	if err != nil {
		log.Fatal(err)
	}
	return base, data
}
