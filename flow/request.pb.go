// Code generated by protoc-gen-go.
// source: flow/request.proto
// DO NOT EDIT!

package flow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BoolFilterOp int32

const (
	BoolFilterOp_OR  BoolFilterOp = 0
	BoolFilterOp_AND BoolFilterOp = 1
	BoolFilterOp_NOT BoolFilterOp = 2
)

var BoolFilterOp_name = map[int32]string{
	0: "OR",
	1: "AND",
	2: "NOT",
}
var BoolFilterOp_value = map[string]int32{
	"OR":  0,
	"AND": 1,
	"NOT": 2,
}

func (x BoolFilterOp) String() string {
	return proto.EnumName(BoolFilterOp_name, int32(x))
}
func (BoolFilterOp) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type TermStringFilter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *TermStringFilter) Reset()                    { *m = TermStringFilter{} }
func (m *TermStringFilter) String() string            { return proto.CompactTextString(m) }
func (*TermStringFilter) ProtoMessage()               {}
func (*TermStringFilter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type TermInt64Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *TermInt64Filter) Reset()                    { *m = TermInt64Filter{} }
func (m *TermInt64Filter) String() string            { return proto.CompactTextString(m) }
func (*TermInt64Filter) ProtoMessage()               {}
func (*TermInt64Filter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type NeStringFilter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *NeStringFilter) Reset()                    { *m = NeStringFilter{} }
func (m *NeStringFilter) String() string            { return proto.CompactTextString(m) }
func (*NeStringFilter) ProtoMessage()               {}
func (*NeStringFilter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type NeInt64Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *NeInt64Filter) Reset()                    { *m = NeInt64Filter{} }
func (m *NeInt64Filter) String() string            { return proto.CompactTextString(m) }
func (*NeInt64Filter) ProtoMessage()               {}
func (*NeInt64Filter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type GtInt64Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *GtInt64Filter) Reset()                    { *m = GtInt64Filter{} }
func (m *GtInt64Filter) String() string            { return proto.CompactTextString(m) }
func (*GtInt64Filter) ProtoMessage()               {}
func (*GtInt64Filter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

type LtInt64Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *LtInt64Filter) Reset()                    { *m = LtInt64Filter{} }
func (m *LtInt64Filter) String() string            { return proto.CompactTextString(m) }
func (*LtInt64Filter) ProtoMessage()               {}
func (*LtInt64Filter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

type GteInt64Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *GteInt64Filter) Reset()                    { *m = GteInt64Filter{} }
func (m *GteInt64Filter) String() string            { return proto.CompactTextString(m) }
func (*GteInt64Filter) ProtoMessage()               {}
func (*GteInt64Filter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

type LteInt64Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *LteInt64Filter) Reset()                    { *m = LteInt64Filter{} }
func (m *LteInt64Filter) String() string            { return proto.CompactTextString(m) }
func (*LteInt64Filter) ProtoMessage()               {}
func (*LteInt64Filter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

type Filter struct {
	TermStringFilter *TermStringFilter `protobuf:"bytes,1,opt,name=TermStringFilter" json:"TermStringFilter,omitempty"`
	TermInt64Filter  *TermInt64Filter  `protobuf:"bytes,2,opt,name=TermInt64Filter" json:"TermInt64Filter,omitempty"`
	GtInt64Filter    *GtInt64Filter    `protobuf:"bytes,3,opt,name=GtInt64Filter" json:"GtInt64Filter,omitempty"`
	LtInt64Filter    *LtInt64Filter    `protobuf:"bytes,4,opt,name=LtInt64Filter" json:"LtInt64Filter,omitempty"`
	GteInt64Filter   *GteInt64Filter   `protobuf:"bytes,5,opt,name=GteInt64Filter" json:"GteInt64Filter,omitempty"`
	LteInt64Filter   *LteInt64Filter   `protobuf:"bytes,6,opt,name=LteInt64Filter" json:"LteInt64Filter,omitempty"`
	BoolFilter       *BoolFilter       `protobuf:"bytes,7,opt,name=BoolFilter" json:"BoolFilter,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *Filter) GetTermStringFilter() *TermStringFilter {
	if m != nil {
		return m.TermStringFilter
	}
	return nil
}

func (m *Filter) GetTermInt64Filter() *TermInt64Filter {
	if m != nil {
		return m.TermInt64Filter
	}
	return nil
}

func (m *Filter) GetGtInt64Filter() *GtInt64Filter {
	if m != nil {
		return m.GtInt64Filter
	}
	return nil
}

func (m *Filter) GetLtInt64Filter() *LtInt64Filter {
	if m != nil {
		return m.LtInt64Filter
	}
	return nil
}

func (m *Filter) GetGteInt64Filter() *GteInt64Filter {
	if m != nil {
		return m.GteInt64Filter
	}
	return nil
}

func (m *Filter) GetLteInt64Filter() *LteInt64Filter {
	if m != nil {
		return m.LteInt64Filter
	}
	return nil
}

func (m *Filter) GetBoolFilter() *BoolFilter {
	if m != nil {
		return m.BoolFilter
	}
	return nil
}

type BoolFilter struct {
	Op      BoolFilterOp `protobuf:"varint,1,opt,name=Op,enum=flow.BoolFilterOp" json:"Op,omitempty"`
	Filters []*Filter    `protobuf:"bytes,2,rep,name=Filters" json:"Filters,omitempty"`
}

func (m *BoolFilter) Reset()                    { *m = BoolFilter{} }
func (m *BoolFilter) String() string            { return proto.CompactTextString(m) }
func (*BoolFilter) ProtoMessage()               {}
func (*BoolFilter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *BoolFilter) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type Range struct {
	From int64 `protobuf:"varint,1,opt,name=From" json:"From,omitempty"`
	To   int64 `protobuf:"varint,2,opt,name=To" json:"To,omitempty"`
}

func (m *Range) Reset()                    { *m = Range{} }
func (m *Range) String() string            { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()               {}
func (*Range) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

type FlowSearchQuery struct {
	Filter *Filter `protobuf:"bytes,1,opt,name=Filter" json:"Filter,omitempty"`
	Range  *Range  `protobuf:"bytes,2,opt,name=Range" json:"Range,omitempty"`
	Sorted bool    `protobuf:"varint,3,opt,name=Sorted" json:"Sorted,omitempty"`
}

func (m *FlowSearchQuery) Reset()                    { *m = FlowSearchQuery{} }
func (m *FlowSearchQuery) String() string            { return proto.CompactTextString(m) }
func (*FlowSearchQuery) ProtoMessage()               {}
func (*FlowSearchQuery) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *FlowSearchQuery) GetFilter() *Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *FlowSearchQuery) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type FlowSearchReply struct {
	FlowSet *FlowSet `protobuf:"bytes,1,opt,name=FlowSet" json:"FlowSet,omitempty"`
}

func (m *FlowSearchReply) Reset()                    { *m = FlowSearchReply{} }
func (m *FlowSearchReply) String() string            { return proto.CompactTextString(m) }
func (*FlowSearchReply) ProtoMessage()               {}
func (*FlowSearchReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *FlowSearchReply) GetFlowSet() *FlowSet {
	if m != nil {
		return m.FlowSet
	}
	return nil
}

func init() {
	proto.RegisterType((*TermStringFilter)(nil), "flow.TermStringFilter")
	proto.RegisterType((*TermInt64Filter)(nil), "flow.TermInt64Filter")
	proto.RegisterType((*NeStringFilter)(nil), "flow.NeStringFilter")
	proto.RegisterType((*NeInt64Filter)(nil), "flow.NeInt64Filter")
	proto.RegisterType((*GtInt64Filter)(nil), "flow.GtInt64Filter")
	proto.RegisterType((*LtInt64Filter)(nil), "flow.LtInt64Filter")
	proto.RegisterType((*GteInt64Filter)(nil), "flow.GteInt64Filter")
	proto.RegisterType((*LteInt64Filter)(nil), "flow.LteInt64Filter")
	proto.RegisterType((*Filter)(nil), "flow.Filter")
	proto.RegisterType((*BoolFilter)(nil), "flow.BoolFilter")
	proto.RegisterType((*Range)(nil), "flow.Range")
	proto.RegisterType((*FlowSearchQuery)(nil), "flow.FlowSearchQuery")
	proto.RegisterType((*FlowSearchReply)(nil), "flow.FlowSearchReply")
	proto.RegisterEnum("flow.BoolFilterOp", BoolFilterOp_name, BoolFilterOp_value)
}

var fileDescriptor2 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x94, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0xc7, 0x69, 0xdc, 0xa6, 0x70, 0x5d, 0xd3, 0xc8, 0x8c, 0x29, 0xe2, 0x09, 0x22, 0x04, 0x13,
	0x48, 0x05, 0x15, 0x04, 0x0c, 0x4d, 0x42, 0x4c, 0xa8, 0x13, 0xa2, 0x6a, 0x85, 0x5b, 0x4d, 0xbc,
	0x76, 0x70, 0x2d, 0x13, 0x59, 0x1d, 0x1c, 0x17, 0x94, 0x8f, 0xc5, 0x37, 0xc4, 0xb1, 0x5d, 0x96,
	0x38, 0x0f, 0x9b, 0xf2, 0x76, 0xbe, 0xf3, 0xef, 0xfe, 0xf2, 0xdd, 0x5f, 0x06, 0xba, 0x4a, 0xf8,
	0x9f, 0xe7, 0x02, 0x7f, 0x6d, 0x31, 0x93, 0xc3, 0x54, 0x70, 0xc9, 0x69, 0xbb, 0xc8, 0xdd, 0x0f,
	0x74, 0x25, 0x43, 0x9b, 0x8d, 0xdf, 0x41, 0xb8, 0x40, 0x71, 0x39, 0x97, 0xe2, 0x62, 0xb3, 0x1e,
	0x5f, 0x24, 0x12, 0x05, 0x0d, 0x81, 0x7c, 0xc6, 0x3c, 0x6a, 0x3d, 0x68, 0x1d, 0xde, 0x61, 0xe4,
	0x27, 0xe6, 0x74, 0x1f, 0x3a, 0xbf, 0x97, 0xc9, 0x16, 0x23, 0x4f, 0xe7, 0xcc, 0x21, 0x3e, 0x82,
	0x41, 0xc1, 0x7e, 0xda, 0xc8, 0xd7, 0xaf, 0x6e, 0x86, 0x92, 0x1d, 0xfa, 0x16, 0x82, 0x29, 0x5e,
	0x2f, 0x7a, 0x56, 0x17, 0x7d, 0x03, 0xfd, 0x29, 0x5e, 0x2b, 0x79, 0x56, 0x97, 0x54, 0xe0, 0xa9,
	0x6c, 0x08, 0x4e, 0x1a, 0x81, 0xea, 0x91, 0xa7, 0x12, 0x1b, 0x92, 0x93, 0x66, 0xe4, 0x5f, 0x02,
	0xbe, 0x45, 0x4e, 0xea, 0xab, 0xd5, 0x7c, 0x6f, 0x74, 0x30, 0x2c, 0x5c, 0x30, 0x74, 0xab, 0x2c,
	0x94, 0xae, 0x15, 0xde, 0xd7, 0x56, 0xac, 0xe5, 0x7a, 0xa3, 0x7b, 0x57, 0x2d, 0x4a, 0x45, 0x36,
	0x90, 0x8e, 0x21, 0x8e, 0x9c, 0xa9, 0x47, 0x44, 0xe3, 0x77, 0x0d, 0x5e, 0x29, 0xb1, 0xfe, 0x5a,
	0x3a, 0x68, 0x65, 0xee, 0x51, 0xbb, 0x8c, 0x4e, 0xaa, 0x68, 0x52, 0x41, 0x8f, 0xdd, 0xc9, 0x47,
	0x1d, 0xcd, 0xee, 0xef, 0x64, 0xcb, 0x35, 0x16, 0xac, 0xab, 0xb3, 0x3e, 0x76, 0xa7, 0x1f, 0xf9,
	0x65, 0x7a, 0xe2, 0xd0, 0x49, 0x95, 0x7e, 0x01, 0x70, 0xc2, 0x79, 0x62, 0xc9, 0xae, 0x26, 0x43,
	0x43, 0x5e, 0xe5, 0x19, 0x9c, 0xff, 0x8f, 0xe3, 0xaf, 0x65, 0x82, 0xc6, 0xe0, 0xcd, 0x52, 0xbd,
	0xa8, 0x60, 0x44, 0x5d, 0x6e, 0x96, 0x32, 0x8f, 0xa7, 0xf4, 0x31, 0x74, 0xcd, 0x39, 0x53, 0xeb,
	0x20, 0x4a, 0x60, 0xcf, 0x5c, 0xb4, 0xcd, 0xbb, 0x2b, 0x53, 0x8c, 0x9f, 0x41, 0x87, 0x2d, 0x37,
	0x6b, 0xa4, 0x14, 0xda, 0x63, 0xc1, 0x2f, 0x75, 0x5b, 0xc2, 0xda, 0x2b, 0x15, 0xd3, 0x00, 0xbc,
	0x05, 0xb7, 0xee, 0xf1, 0xd4, 0x57, 0x20, 0x60, 0x30, 0x56, 0x4d, 0xe6, 0xb8, 0x14, 0xdf, 0x7e,
	0x7c, 0xd9, 0xa2, 0xc8, 0xe9, 0xa3, 0x9d, 0x99, 0xac, 0x71, 0xaa, 0x32, 0xbe, 0x91, 0xa1, 0x0f,
	0xad, 0x8a, 0xb5, 0x46, 0xcf, 0x5c, 0xd2, 0x29, 0xd6, 0x11, 0x5a, 0xff, 0x00, 0xfc, 0x39, 0x17,
	0x12, 0xbf, 0xeb, 0xfd, 0xdf, 0x66, 0x7e, 0xa6, 0x4f, 0xea, 0xfb, 0x29, 0x69, 0x32, 0x4c, 0x93,
	0x9c, 0x3e, 0x51, 0x6f, 0xd3, 0x29, 0x69, 0x45, 0xfb, 0x56, 0xd4, 0x24, 0xd5, 0xe3, 0x4c, 0xf0,
	0xf4, 0x10, 0xf6, 0xca, 0x83, 0xa1, 0xbe, 0x1a, 0x1c, 0x0b, 0x6f, 0xd1, 0x2e, 0x90, 0x0f, 0xd3,
	0x8f, 0x61, 0xab, 0x08, 0xa6, 0xb3, 0x45, 0xe8, 0x9d, 0xfb, 0xfa, 0xaf, 0x7b, 0xf9, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x9b, 0x38, 0xc7, 0xeb, 0x17, 0x05, 0x00, 0x00,
}
