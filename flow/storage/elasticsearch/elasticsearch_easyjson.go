// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package elasticsearch

import (
	json "encoding/json"
	layers "github.com/google/gopacket/layers"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	flow "github.com/skydive-project/skydive/flow"
	layers1 "github.com/skydive-project/skydive/flow/layers"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch(in *jlexer.Lexer, out *rawpacketRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.RawPacket = new(flow.RawPacket)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Flow":
			if in.IsNull() {
				in.Skip()
				out.Flow = nil
			} else {
				if out.Flow == nil {
					out.Flow = new(embeddedFlow)
				}
				(*out.Flow).UnmarshalEasyJSON(in)
			}
		case "Timestamp":
			out.Timestamp = int64(in.Int64())
		case "Index":
			out.Index = int64(in.Int64())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "LinkType":
			out.LinkType = layers.LinkType(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch(out *jwriter.Writer, in rawpacketRecord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Flow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Flow == nil {
			out.RawString("null")
		} else {
			(*in.Flow).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"Index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Index))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	if in.LinkType != 0 {
		const prefix string = ",\"LinkType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.LinkType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v rawpacketRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rawpacketRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rawpacketRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rawpacketRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch(l, v)
}
func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch1(in *jlexer.Lexer, out *metricRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.FlowMetric = new(flow.FlowMetric)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Flow":
			if in.IsNull() {
				in.Skip()
				out.Flow = nil
			} else {
				if out.Flow == nil {
					out.Flow = new(embeddedFlow)
				}
				(*out.Flow).UnmarshalEasyJSON(in)
			}
		case "ABPackets":
			out.ABPackets = int64(in.Int64())
		case "ABBytes":
			out.ABBytes = int64(in.Int64())
		case "BAPackets":
			out.BAPackets = int64(in.Int64())
		case "BABytes":
			out.BABytes = int64(in.Int64())
		case "Start":
			out.Start = int64(in.Int64())
		case "Last":
			out.Last = int64(in.Int64())
		case "RTT":
			out.RTT = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch1(out *jwriter.Writer, in metricRecord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Flow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Flow == nil {
			out.RawString("null")
		} else {
			(*in.Flow).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"ABPackets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ABPackets))
	}
	{
		const prefix string = ",\"ABBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ABBytes))
	}
	{
		const prefix string = ",\"BAPackets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BAPackets))
	}
	{
		const prefix string = ",\"BABytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BABytes))
	}
	{
		const prefix string = ",\"Start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Start))
	}
	{
		const prefix string = ",\"Last\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Last))
	}
	if in.RTT != 0 {
		const prefix string = ",\"RTT\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RTT))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v metricRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v metricRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *metricRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *metricRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch1(l, v)
}
func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch2(in *jlexer.Lexer, out *embeddedFlow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			if in.IsNull() {
				in.Skip()
				out.UUID = nil
			} else {
				if out.UUID == nil {
					out.UUID = new(string)
				}
				*out.UUID = string(in.String())
			}
		case "LayersPath":
			if in.IsNull() {
				in.Skip()
				out.LayersPath = nil
			} else {
				if out.LayersPath == nil {
					out.LayersPath = new(string)
				}
				*out.LayersPath = string(in.String())
			}
		case "Application":
			if in.IsNull() {
				in.Skip()
				out.Application = nil
			} else {
				if out.Application == nil {
					out.Application = new(string)
				}
				*out.Application = string(in.String())
			}
		case "Link":
			if in.IsNull() {
				in.Skip()
				out.Link = nil
			} else {
				if out.Link == nil {
					out.Link = new(flow.FlowLayer)
				}
				(*out.Link).UnmarshalEasyJSON(in)
			}
		case "Network":
			if in.IsNull() {
				in.Skip()
				out.Network = nil
			} else {
				if out.Network == nil {
					out.Network = new(flow.FlowLayer)
				}
				(*out.Network).UnmarshalEasyJSON(in)
			}
		case "Transport":
			if in.IsNull() {
				in.Skip()
				out.Transport = nil
			} else {
				if out.Transport == nil {
					out.Transport = new(flow.TransportLayer)
				}
				(*out.Transport).UnmarshalEasyJSON(in)
			}
		case "ICMP":
			if in.IsNull() {
				in.Skip()
				out.ICMP = nil
			} else {
				if out.ICMP == nil {
					out.ICMP = new(flow.ICMPLayer)
				}
				(*out.ICMP).UnmarshalEasyJSON(in)
			}
		case "DHCPv4":
			if in.IsNull() {
				in.Skip()
				out.DHCPv4 = nil
			} else {
				if out.DHCPv4 == nil {
					out.DHCPv4 = new(layers1.DHCPv4)
				}
				easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers(in, &*out.DHCPv4)
			}
		case "DNS":
			if in.IsNull() {
				in.Skip()
				out.DNS = nil
			} else {
				if out.DNS == nil {
					out.DNS = new(layers1.DNS)
				}
				easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers1(in, &*out.DNS)
			}
		case "VRRPv2":
			if in.IsNull() {
				in.Skip()
				out.VRRPv2 = nil
			} else {
				if out.VRRPv2 == nil {
					out.VRRPv2 = new(layers1.VRRPv2)
				}
				easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers2(in, &*out.VRRPv2)
			}
		case "TrackingID":
			if in.IsNull() {
				in.Skip()
				out.TrackingID = nil
			} else {
				if out.TrackingID == nil {
					out.TrackingID = new(string)
				}
				*out.TrackingID = string(in.String())
			}
		case "L3TrackingID":
			if in.IsNull() {
				in.Skip()
				out.L3TrackingID = nil
			} else {
				if out.L3TrackingID == nil {
					out.L3TrackingID = new(string)
				}
				*out.L3TrackingID = string(in.String())
			}
		case "ParentUUID":
			if in.IsNull() {
				in.Skip()
				out.ParentUUID = nil
			} else {
				if out.ParentUUID == nil {
					out.ParentUUID = new(string)
				}
				*out.ParentUUID = string(in.String())
			}
		case "NodeTID":
			if in.IsNull() {
				in.Skip()
				out.NodeTID = nil
			} else {
				if out.NodeTID == nil {
					out.NodeTID = new(string)
				}
				*out.NodeTID = string(in.String())
			}
		case "Start":
			out.Start = int64(in.Int64())
		case "Last":
			out.Last = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch2(out *jwriter.Writer, in embeddedFlow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UUID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UUID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.UUID))
		}
	}
	{
		const prefix string = ",\"LayersPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.LayersPath == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.LayersPath))
		}
	}
	{
		const prefix string = ",\"Application\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Application == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Application))
		}
	}
	if in.Link != nil {
		const prefix string = ",\"Link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Link).MarshalEasyJSON(out)
	}
	if in.Network != nil {
		const prefix string = ",\"Network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Network).MarshalEasyJSON(out)
	}
	if in.Transport != nil {
		const prefix string = ",\"Transport\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Transport).MarshalEasyJSON(out)
	}
	if in.ICMP != nil {
		const prefix string = ",\"ICMP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ICMP).MarshalEasyJSON(out)
	}
	if in.DHCPv4 != nil {
		const prefix string = ",\"DHCPv4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers(out, *in.DHCPv4)
	}
	if in.DNS != nil {
		const prefix string = ",\"DNS\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers1(out, *in.DNS)
	}
	if in.VRRPv2 != nil {
		const prefix string = ",\"VRRPv2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers2(out, *in.VRRPv2)
	}
	{
		const prefix string = ",\"TrackingID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TrackingID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.TrackingID))
		}
	}
	{
		const prefix string = ",\"L3TrackingID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.L3TrackingID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.L3TrackingID))
		}
	}
	{
		const prefix string = ",\"ParentUUID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ParentUUID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ParentUUID))
		}
	}
	{
		const prefix string = ",\"NodeTID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.NodeTID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.NodeTID))
		}
	}
	{
		const prefix string = ",\"Start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Start))
	}
	{
		const prefix string = ",\"Last\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Last))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v embeddedFlow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v embeddedFlow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *embeddedFlow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *embeddedFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowStorageElasticsearch2(l, v)
}
func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers2(in *jlexer.Lexer, out *layers1.VRRPv2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contents":
			if in.IsNull() {
				in.Skip()
				out.Contents = nil
			} else {
				out.Contents = in.Bytes()
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		case "version":
			out.Version = uint8(in.Uint8())
		case "VirtualRtrID":
			out.VirtualRtrID = uint8(in.Uint8())
		case "priority":
			out.Priority = uint8(in.Uint8())
		case "CountIPAddr":
			out.CountIPAddr = uint8(in.Uint8())
		case "adver_int":
			out.AdverInt = uint8(in.Uint8())
		case "checksum":
			out.Checksum = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers2(out *jwriter.Writer, in layers1.VRRPv2) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Contents) != 0 {
		const prefix string = ",\"contents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Contents)
	}
	if len(in.Payload) != 0 {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Payload)
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Version))
	}
	if in.VirtualRtrID != 0 {
		const prefix string = ",\"VirtualRtrID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.VirtualRtrID))
	}
	if in.Priority != 0 {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Priority))
	}
	if in.CountIPAddr != 0 {
		const prefix string = ",\"CountIPAddr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.CountIPAddr))
	}
	if in.AdverInt != 0 {
		const prefix string = ",\"adver_int\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.AdverInt))
	}
	if in.Checksum != 0 {
		const prefix string = ",\"checksum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Checksum))
	}
	out.RawByte('}')
}
func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers1(in *jlexer.Lexer, out *layers1.DNS) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint16(in.Uint16())
		case "QR":
			out.QR = bool(in.Bool())
		case "op_code":
			out.OpCode = string(in.String())
		case "AA":
			out.AA = bool(in.Bool())
		case "TC":
			out.TC = bool(in.Bool())
		case "RD":
			out.RD = bool(in.Bool())
		case "RA":
			out.RA = bool(in.Bool())
		case "z":
			out.Z = uint8(in.Uint8())
		case "response_code":
			out.ResponseCode = string(in.String())
		case "QDCount":
			out.QDCount = uint16(in.Uint16())
		case "ANCount":
			out.ANCount = uint16(in.Uint16())
		case "NSCount":
			out.NSCount = uint16(in.Uint16())
		case "ARCount":
			out.ARCount = uint16(in.Uint16())
		case "questions":
			if in.IsNull() {
				in.Skip()
				out.Questions = nil
			} else {
				in.Delim('[')
				if out.Questions == nil {
					if !in.IsDelim(']') {
						out.Questions = make([]layers1.DNSQuestion, 0, 1)
					} else {
						out.Questions = []layers1.DNSQuestion{}
					}
				} else {
					out.Questions = (out.Questions)[:0]
				}
				for !in.IsDelim(']') {
					var v10 layers1.DNSQuestion
					easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers3(in, &v10)
					out.Questions = append(out.Questions, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "answers":
			if in.IsNull() {
				in.Skip()
				out.Answers = nil
			} else {
				in.Delim('[')
				if out.Answers == nil {
					if !in.IsDelim(']') {
						out.Answers = make([]layers1.DNSResourceRecord, 0, 1)
					} else {
						out.Answers = []layers1.DNSResourceRecord{}
					}
				} else {
					out.Answers = (out.Answers)[:0]
				}
				for !in.IsDelim(']') {
					var v11 layers1.DNSResourceRecord
					easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers4(in, &v11)
					out.Answers = append(out.Answers, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "authorities":
			if in.IsNull() {
				in.Skip()
				out.Authorities = nil
			} else {
				in.Delim('[')
				if out.Authorities == nil {
					if !in.IsDelim(']') {
						out.Authorities = make([]layers1.DNSResourceRecord, 0, 1)
					} else {
						out.Authorities = []layers1.DNSResourceRecord{}
					}
				} else {
					out.Authorities = (out.Authorities)[:0]
				}
				for !in.IsDelim(']') {
					var v12 layers1.DNSResourceRecord
					easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers4(in, &v12)
					out.Authorities = append(out.Authorities, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "additionals":
			if in.IsNull() {
				in.Skip()
				out.Additionals = nil
			} else {
				in.Delim('[')
				if out.Additionals == nil {
					if !in.IsDelim(']') {
						out.Additionals = make([]layers1.DNSResourceRecord, 0, 1)
					} else {
						out.Additionals = []layers1.DNSResourceRecord{}
					}
				} else {
					out.Additionals = (out.Additionals)[:0]
				}
				for !in.IsDelim(']') {
					var v13 layers1.DNSResourceRecord
					easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers4(in, &v13)
					out.Additionals = append(out.Additionals, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers1(out *jwriter.Writer, in layers1.DNS) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ID))
	}
	if in.QR {
		const prefix string = ",\"QR\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.QR))
	}
	if in.OpCode != "" {
		const prefix string = ",\"op_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OpCode))
	}
	if in.AA {
		const prefix string = ",\"AA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AA))
	}
	if in.TC {
		const prefix string = ",\"TC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TC))
	}
	if in.RD {
		const prefix string = ",\"RD\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RD))
	}
	if in.RA {
		const prefix string = ",\"RA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RA))
	}
	if in.Z != 0 {
		const prefix string = ",\"z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Z))
	}
	if in.ResponseCode != "" {
		const prefix string = ",\"response_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseCode))
	}
	if in.QDCount != 0 {
		const prefix string = ",\"QDCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.QDCount))
	}
	if in.ANCount != 0 {
		const prefix string = ",\"ANCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ANCount))
	}
	if in.NSCount != 0 {
		const prefix string = ",\"NSCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.NSCount))
	}
	if in.ARCount != 0 {
		const prefix string = ",\"ARCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ARCount))
	}
	if len(in.Questions) != 0 {
		const prefix string = ",\"questions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Questions {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers3(out, v15)
			}
			out.RawByte(']')
		}
	}
	if len(in.Answers) != 0 {
		const prefix string = ",\"answers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Answers {
				if v16 > 0 {
					out.RawByte(',')
				}
				easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers4(out, v17)
			}
			out.RawByte(']')
		}
	}
	if len(in.Authorities) != 0 {
		const prefix string = ",\"authorities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Authorities {
				if v18 > 0 {
					out.RawByte(',')
				}
				easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers4(out, v19)
			}
			out.RawByte(']')
		}
	}
	if len(in.Additionals) != 0 {
		const prefix string = ",\"additionals\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Additionals {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers4(out, v21)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers4(in *jlexer.Lexer, out *layers1.DNSResourceRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "class":
			out.Class = string(in.String())
		case "TTL":
			out.TTL = uint32(in.Uint32())
		case "data_length":
			out.DataLength = uint16(in.Uint16())
		case "IP":
			out.IP = string(in.String())
		case "NS":
			out.NS = string(in.String())
		case "CNAME":
			out.CNAME = string(in.String())
		case "PTR":
			out.PTR = string(in.String())
		case "TXTs":
			if in.IsNull() {
				in.Skip()
				out.TXTs = nil
			} else {
				in.Delim('[')
				if out.TXTs == nil {
					if !in.IsDelim(']') {
						out.TXTs = make([]string, 0, 4)
					} else {
						out.TXTs = []string{}
					}
				} else {
					out.TXTs = (out.TXTs)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.TXTs = append(out.TXTs, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SOA":
			if in.IsNull() {
				in.Skip()
				out.SOA = nil
			} else {
				if out.SOA == nil {
					out.SOA = new(layers1.DNSSOA)
				}
				easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers5(in, &*out.SOA)
			}
		case "SRV":
			if in.IsNull() {
				in.Skip()
				out.SRV = nil
			} else {
				if out.SRV == nil {
					out.SRV = new(layers1.DNSSRV)
				}
				easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers6(in, &*out.SRV)
			}
		case "MX":
			if in.IsNull() {
				in.Skip()
				out.MX = nil
			} else {
				if out.MX == nil {
					out.MX = new(layers1.DNSMX)
				}
				easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers7(in, &*out.MX)
			}
		case "OPT":
			if in.IsNull() {
				in.Skip()
				out.OPT = nil
			} else {
				in.Delim('[')
				if out.OPT == nil {
					if !in.IsDelim(']') {
						out.OPT = make([]*layers1.DNSOPT, 0, 8)
					} else {
						out.OPT = []*layers1.DNSOPT{}
					}
				} else {
					out.OPT = (out.OPT)[:0]
				}
				for !in.IsDelim(']') {
					var v23 *layers1.DNSOPT
					if in.IsNull() {
						in.Skip()
						v23 = nil
					} else {
						if v23 == nil {
							v23 = new(layers1.DNSOPT)
						}
						easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers8(in, &*v23)
					}
					out.OPT = append(out.OPT, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers4(out *jwriter.Writer, in layers1.DNSResourceRecord) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Class != "" {
		const prefix string = ",\"class\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Class))
	}
	if in.TTL != 0 {
		const prefix string = ",\"TTL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.TTL))
	}
	if in.DataLength != 0 {
		const prefix string = ",\"data_length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.DataLength))
	}
	if in.IP != "" {
		const prefix string = ",\"IP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IP))
	}
	if in.NS != "" {
		const prefix string = ",\"NS\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NS))
	}
	if in.CNAME != "" {
		const prefix string = ",\"CNAME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CNAME))
	}
	if in.PTR != "" {
		const prefix string = ",\"PTR\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PTR))
	}
	if len(in.TXTs) != 0 {
		const prefix string = ",\"TXTs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.TXTs {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	if in.SOA != nil {
		const prefix string = ",\"SOA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers5(out, *in.SOA)
	}
	if in.SRV != nil {
		const prefix string = ",\"SRV\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers6(out, *in.SRV)
	}
	if in.MX != nil {
		const prefix string = ",\"MX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers7(out, *in.MX)
	}
	if len(in.OPT) != 0 {
		const prefix string = ",\"OPT\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.OPT {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers8(out, *v27)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers8(in *jlexer.Lexer, out *layers1.DNSOPT) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = string(in.String())
		case "Data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers8(out *jwriter.Writer, in layers1.DNSOPT) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != "" {
		const prefix string = ",\"Code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	if in.Data != "" {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	out.RawByte('}')
}
func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers7(in *jlexer.Lexer, out *layers1.DNSMX) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "preference":
			out.Preference = uint16(in.Uint16())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers7(out *jwriter.Writer, in layers1.DNSMX) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Preference != 0 {
		const prefix string = ",\"preference\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Preference))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers6(in *jlexer.Lexer, out *layers1.DNSSRV) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "priority":
			out.Priority = uint16(in.Uint16())
		case "weight":
			out.Weight = uint16(in.Uint16())
		case "port":
			out.Port = uint16(in.Uint16())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers6(out *jwriter.Writer, in layers1.DNSSRV) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Priority != 0 {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Priority))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Weight))
	}
	if in.Port != 0 {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Port))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers5(in *jlexer.Lexer, out *layers1.DNSSOA) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MName":
			out.MName = string(in.String())
		case "RName":
			out.RName = string(in.String())
		case "serial":
			out.Serial = uint32(in.Uint32())
		case "refresh":
			out.Refresh = uint32(in.Uint32())
		case "retry":
			out.Retry = uint32(in.Uint32())
		case "expire":
			out.Expire = uint32(in.Uint32())
		case "minimum":
			out.Minimum = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers5(out *jwriter.Writer, in layers1.DNSSOA) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MName != "" {
		const prefix string = ",\"MName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MName))
	}
	if in.RName != "" {
		const prefix string = ",\"RName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RName))
	}
	if in.Serial != 0 {
		const prefix string = ",\"serial\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Serial))
	}
	if in.Refresh != 0 {
		const prefix string = ",\"refresh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Refresh))
	}
	if in.Retry != 0 {
		const prefix string = ",\"retry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Retry))
	}
	if in.Expire != 0 {
		const prefix string = ",\"expire\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Expire))
	}
	if in.Minimum != 0 {
		const prefix string = ",\"minimum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Minimum))
	}
	out.RawByte('}')
}
func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers3(in *jlexer.Lexer, out *layers1.DNSQuestion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "class":
			out.Class = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers3(out *jwriter.Writer, in layers1.DNSQuestion) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Class != "" {
		const prefix string = ",\"class\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Class))
	}
	out.RawByte('}')
}
func easyjson71f4917DecodeGithubComSkydiveProjectSkydiveFlowLayers(in *jlexer.Lexer, out *layers1.DHCPv4) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contents":
			if in.IsNull() {
				in.Skip()
				out.Contents = nil
			} else {
				out.Contents = in.Bytes()
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		case "hardware_len":
			out.HardwareLen = uint8(in.Uint8())
		case "hardware_opts":
			out.HardwareOpts = uint8(in.Uint8())
		case "xid":
			out.Xid = uint32(in.Uint32())
		case "secs":
			out.Secs = uint16(in.Uint16())
		case "flags":
			out.Flags = uint16(in.Uint16())
		case "server_name":
			if in.IsNull() {
				in.Skip()
				out.ServerName = nil
			} else {
				out.ServerName = in.Bytes()
			}
		case "file":
			if in.IsNull() {
				in.Skip()
				out.File = nil
			} else {
				out.File = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71f4917EncodeGithubComSkydiveProjectSkydiveFlowLayers(out *jwriter.Writer, in layers1.DHCPv4) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Contents) != 0 {
		const prefix string = ",\"contents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Contents)
	}
	if len(in.Payload) != 0 {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Payload)
	}
	if in.HardwareLen != 0 {
		const prefix string = ",\"hardware_len\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.HardwareLen))
	}
	if in.HardwareOpts != 0 {
		const prefix string = ",\"hardware_opts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.HardwareOpts))
	}
	if in.Xid != 0 {
		const prefix string = ",\"xid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Xid))
	}
	if in.Secs != 0 {
		const prefix string = ",\"secs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Secs))
	}
	if in.Flags != 0 {
		const prefix string = ",\"flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Flags))
	}
	if len(in.ServerName) != 0 {
		const prefix string = ",\"server_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.ServerName)
	}
	if len(in.File) != 0 {
		const prefix string = ",\"file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.File)
	}
	out.RawByte('}')
}
