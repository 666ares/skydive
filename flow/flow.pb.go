// Code generated by protoc-gen-go.
// source: flow/flow.proto
// DO NOT EDIT!

/*
Package flow is a generated protocol buffer package.

It is generated from these files:
	flow/flow.proto
	flow/set.proto
	flow/request.proto

It has these top-level messages:
	FlowEndpointStatistics
	FlowEndpointsStatistics
	FlowStatistics
	FlowMetricRange
	Flow
	FlowSet
	TermStringFilter
	TermInt64Filter
	NeStringFilter
	NeInt64Filter
	GtInt64Filter
	LtInt64Filter
	GteInt64Filter
	LteInt64Filter
	Filter
	BoolFilter
	FlowSearchQuery
	FlowSearchReply
*/
package flow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlowEndpointLayer int32

const (
	FlowEndpointLayer_LINK      FlowEndpointLayer = 0
	FlowEndpointLayer_NETWORK   FlowEndpointLayer = 1
	FlowEndpointLayer_TRANSPORT FlowEndpointLayer = 2
)

var FlowEndpointLayer_name = map[int32]string{
	0: "LINK",
	1: "NETWORK",
	2: "TRANSPORT",
}
var FlowEndpointLayer_value = map[string]int32{
	"LINK":      0,
	"NETWORK":   1,
	"TRANSPORT": 2,
}

func (x FlowEndpointLayer) String() string {
	return proto.EnumName(FlowEndpointLayer_name, int32(x))
}
func (FlowEndpointLayer) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FlowEndpointType int32

const (
	FlowEndpointType_ETHERNET FlowEndpointType = 0
	FlowEndpointType_IPV4     FlowEndpointType = 1
	FlowEndpointType_TCPPORT  FlowEndpointType = 2
	FlowEndpointType_UDPPORT  FlowEndpointType = 3
	FlowEndpointType_SCTPPORT FlowEndpointType = 4
	FlowEndpointType_IPV6     FlowEndpointType = 5
)

var FlowEndpointType_name = map[int32]string{
	0: "ETHERNET",
	1: "IPV4",
	2: "TCPPORT",
	3: "UDPPORT",
	4: "SCTPPORT",
	5: "IPV6",
}
var FlowEndpointType_value = map[string]int32{
	"ETHERNET": 0,
	"IPV4":     1,
	"TCPPORT":  2,
	"UDPPORT":  3,
	"SCTPPORT": 4,
	"IPV6":     5,
}

func (x FlowEndpointType) String() string {
	return proto.EnumName(FlowEndpointType_name, int32(x))
}
func (FlowEndpointType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FlowEndpointStatistics struct {
	Value   string `protobuf:"bytes,2,opt,name=Value,json=value" json:"Value,omitempty"`
	Packets uint64 `protobuf:"varint,5,opt,name=Packets,json=packets" json:"Packets,omitempty"`
	Bytes   uint64 `protobuf:"varint,6,opt,name=Bytes,json=bytes" json:"Bytes,omitempty"`
}

func (m *FlowEndpointStatistics) Reset()                    { *m = FlowEndpointStatistics{} }
func (m *FlowEndpointStatistics) String() string            { return proto.CompactTextString(m) }
func (*FlowEndpointStatistics) ProtoMessage()               {}
func (*FlowEndpointStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FlowEndpointsStatistics struct {
	Type FlowEndpointType        `protobuf:"varint,1,opt,name=Type,json=type,enum=flow.FlowEndpointType" json:"Type,omitempty"`
	Hash []byte                  `protobuf:"bytes,2,opt,name=Hash,json=hash,proto3" json:"Hash,omitempty"`
	AB   *FlowEndpointStatistics `protobuf:"bytes,3,opt,name=AB,json=aB" json:"AB,omitempty"`
	BA   *FlowEndpointStatistics `protobuf:"bytes,4,opt,name=BA,json=bA" json:"BA,omitempty"`
}

func (m *FlowEndpointsStatistics) Reset()                    { *m = FlowEndpointsStatistics{} }
func (m *FlowEndpointsStatistics) String() string            { return proto.CompactTextString(m) }
func (*FlowEndpointsStatistics) ProtoMessage()               {}
func (*FlowEndpointsStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FlowEndpointsStatistics) GetAB() *FlowEndpointStatistics {
	if m != nil {
		return m.AB
	}
	return nil
}

func (m *FlowEndpointsStatistics) GetBA() *FlowEndpointStatistics {
	if m != nil {
		return m.BA
	}
	return nil
}

type FlowStatistics struct {
	Start     int64                      `protobuf:"varint,1,opt,name=Start,json=start" json:"Start,omitempty"`
	Last      int64                      `protobuf:"varint,2,opt,name=Last,json=last" json:"Last,omitempty"`
	Endpoints []*FlowEndpointsStatistics `protobuf:"bytes,3,rep,name=Endpoints,json=endpoints" json:"Endpoints,omitempty"`
}

func (m *FlowStatistics) Reset()                    { *m = FlowStatistics{} }
func (m *FlowStatistics) String() string            { return proto.CompactTextString(m) }
func (*FlowStatistics) ProtoMessage()               {}
func (*FlowStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FlowStatistics) GetEndpoints() []*FlowEndpointsStatistics {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type FlowMetricRange struct {
	Start     int64  `protobuf:"varint,1,opt,name=Start,json=start" json:"Start,omitempty"`
	Last      int64  `protobuf:"varint,2,opt,name=Last,json=last" json:"Last,omitempty"`
	ABPackets uint64 `protobuf:"varint,3,opt,name=ABPackets,json=aBPackets" json:"ABPackets,omitempty"`
	ABBytes   uint64 `protobuf:"varint,4,opt,name=ABBytes,json=aBBytes" json:"ABBytes,omitempty"`
	BAPackets uint64 `protobuf:"varint,5,opt,name=BAPackets,json=bAPackets" json:"BAPackets,omitempty"`
	BABytes   uint64 `protobuf:"varint,6,opt,name=BABytes,json=bABytes" json:"BABytes,omitempty"`
}

func (m *FlowMetricRange) Reset()                    { *m = FlowMetricRange{} }
func (m *FlowMetricRange) String() string            { return proto.CompactTextString(m) }
func (*FlowMetricRange) ProtoMessage()               {}
func (*FlowMetricRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Flow struct {
	// Flow Universally Unique IDentifier
	//
	// flow.UUID is unique in the universe, as it should be used as a key of an
	// hashtable. By design 2 different flows, their UUID are always different.
	// flow.UUID can be used as Database Index.
	UUID       string `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	LayersPath string `protobuf:"bytes,2,opt,name=LayersPath,json=layersPath" json:"LayersPath,omitempty"`
	// Data Flow info
	Statistics *FlowStatistics `protobuf:"bytes,3,opt,name=Statistics,json=statistics" json:"Statistics,omitempty"`
	// Flow Tracking IDentifier, from 1st packet bytes
	//
	// flow.TrackingID could be used to identify an unique flow whatever it has
	// been captured on the infrastructure. flow.TrackingID is calculated from
	// the bytes of the first packet of his session.
	// flow.TrackingID can be used as a Tag.
	TrackingID string `protobuf:"bytes,5,opt,name=TrackingID,json=trackingID" json:"TrackingID,omitempty"`
	// Topology info
	ProbeNodeUUID string           `protobuf:"bytes,11,opt,name=ProbeNodeUUID,json=probeNodeUUID" json:"ProbeNodeUUID,omitempty"`
	IfSrcNodeUUID string           `protobuf:"bytes,14,opt,name=IfSrcNodeUUID,json=ifSrcNodeUUID" json:"IfSrcNodeUUID,omitempty"`
	IfDstNodeUUID string           `protobuf:"bytes,19,opt,name=IfDstNodeUUID,json=ifDstNodeUUID" json:"IfDstNodeUUID,omitempty"`
	MetricRange   *FlowMetricRange `protobuf:"bytes,20,opt,name=MetricRange,json=metricRange" json:"MetricRange,omitempty"`
}

func (m *Flow) Reset()                    { *m = Flow{} }
func (m *Flow) String() string            { return proto.CompactTextString(m) }
func (*Flow) ProtoMessage()               {}
func (*Flow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Flow) GetStatistics() *FlowStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *Flow) GetMetricRange() *FlowMetricRange {
	if m != nil {
		return m.MetricRange
	}
	return nil
}

func init() {
	proto.RegisterType((*FlowEndpointStatistics)(nil), "flow.FlowEndpointStatistics")
	proto.RegisterType((*FlowEndpointsStatistics)(nil), "flow.FlowEndpointsStatistics")
	proto.RegisterType((*FlowStatistics)(nil), "flow.FlowStatistics")
	proto.RegisterType((*FlowMetricRange)(nil), "flow.FlowMetricRange")
	proto.RegisterType((*Flow)(nil), "flow.Flow")
	proto.RegisterEnum("flow.FlowEndpointLayer", FlowEndpointLayer_name, FlowEndpointLayer_value)
	proto.RegisterEnum("flow.FlowEndpointType", FlowEndpointType_name, FlowEndpointType_value)
}

func init() { proto.RegisterFile("flow/flow.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xa6, 0x8d, 0xb3, 0x2e, 0xaf, 0x6b, 0x57, 0x4c, 0x19, 0x39, 0x0c, 0x84, 0x2a, 0x0e, 0xa8,
	0x42, 0x43, 0x1a, 0x13, 0x08, 0x71, 0x4a, 0xd6, 0xa2, 0x55, 0x1b, 0x5d, 0xe4, 0xa6, 0xe3, 0x82,
	0x90, 0x9c, 0x2e, 0x5b, 0x23, 0x4a, 0x53, 0xc5, 0x1e, 0x53, 0x7f, 0x13, 0x67, 0x4e, 0xfc, 0x39,
	0x9e, 0xed, 0xb6, 0xf1, 0xd8, 0x05, 0x2e, 0xa9, 0xbf, 0xe7, 0xef, 0xf3, 0xfb, 0xfc, 0xbe, 0x34,
	0xb0, 0x7b, 0x35, 0xcb, 0x6f, 0x5f, 0xab, 0xc7, 0xc1, 0xa2, 0xc8, 0x65, 0x4e, 0x89, 0x5a, 0x77,
	0xbe, 0xc2, 0xde, 0x47, 0xfc, 0xed, 0xcf, 0x2f, 0x17, 0x79, 0x36, 0x97, 0x23, 0xc9, 0x65, 0x26,
	0x64, 0x36, 0x11, 0xb4, 0x0d, 0xee, 0x05, 0x9f, 0xdd, 0xa4, 0x7e, 0xf5, 0x79, 0xe5, 0xa5, 0xc7,
	0xdc, 0x1f, 0x0a, 0x50, 0x1f, 0x6a, 0x11, 0x9f, 0x7c, 0x4b, 0xa5, 0xf0, 0x5d, 0xac, 0x13, 0x56,
	0x5b, 0x18, 0xa8, 0xf8, 0xe1, 0x52, 0xa6, 0xc2, 0xdf, 0xd2, 0x75, 0x37, 0x51, 0xa0, 0xf3, 0xab,
	0x02, 0x4f, 0xec, 0x06, 0xc2, 0xea, 0xd0, 0x05, 0x12, 0x2f, 0x17, 0xa9, 0x5f, 0x41, 0x41, 0xf3,
	0x70, 0xef, 0x40, 0x9b, 0xb3, 0xc9, 0x6a, 0x97, 0x11, 0x89, 0x4f, 0x4a, 0x81, 0x9c, 0x70, 0x31,
	0xd5, 0x66, 0x76, 0x18, 0x99, 0xe2, 0x9a, 0xbe, 0x82, 0x6a, 0x10, 0xfa, 0x0e, 0x56, 0xea, 0x87,
	0xfb, 0xf7, 0xd5, 0x65, 0x27, 0x56, 0xe5, 0xa1, 0x62, 0x87, 0x81, 0x4f, 0xfe, 0x85, 0x9d, 0x04,
	0x9d, 0x5b, 0x68, 0xaa, 0xdd, 0xbb, 0xf3, 0x40, 0x54, 0x48, 0x6d, 0xd7, 0x61, 0xae, 0x50, 0x40,
	0xf9, 0x3a, 0xe3, 0x42, 0x6a, 0x5f, 0x0e, 0x23, 0x33, 0x5c, 0xd3, 0x0f, 0xe0, 0x6d, 0xae, 0x8b,
	0xf6, 0x1c, 0x6c, 0xf8, 0xf4, 0x7e, 0x43, 0x6b, 0x12, 0xcc, 0x4b, 0xd7, 0xc5, 0xce, 0xcf, 0x0a,
	0xec, 0x2a, 0xda, 0xa7, 0x54, 0x16, 0xd9, 0x84, 0xf1, 0xf9, 0x75, 0xfa, 0x1f, 0xad, 0xf7, 0xc1,
	0x0b, 0xc2, 0x75, 0x40, 0x8e, 0x0e, 0xc2, 0xe3, 0xeb, 0x82, 0x0a, 0x2f, 0x08, 0x4d, 0x48, 0xc4,
	0x84, 0xc7, 0x0d, 0x54, 0xba, 0x30, 0xb8, 0x1b, 0xac, 0x97, 0x04, 0x96, 0x2e, 0x0c, 0xec, 0x70,
	0x6b, 0x89, 0x81, 0x9d, 0xdf, 0x55, 0x20, 0xca, 0xad, 0x32, 0x33, 0x1e, 0x0f, 0x7a, 0xda, 0xa1,
	0xc7, 0xc8, 0x0d, 0xae, 0xe9, 0x33, 0x80, 0x33, 0xbe, 0x4c, 0x0b, 0x11, 0x71, 0x39, 0x5d, 0xbd,
	0x46, 0x30, 0xdb, 0x54, 0xe8, 0x11, 0x40, 0x39, 0x83, 0x55, 0x8e, 0xed, 0x72, 0x50, 0xd6, 0x7c,
	0x40, 0x94, 0x39, 0xe0, 0xa9, 0x71, 0x81, 0xc6, 0xb2, 0xf9, 0x35, 0xf6, 0x73, 0xcd, 0xa9, 0x72,
	0x53, 0xa1, 0x2f, 0xa0, 0x11, 0x15, 0x79, 0x92, 0x0e, 0xf3, 0xcb, 0x54, 0x5b, 0xaa, 0x6b, 0x4a,
	0x63, 0x61, 0x17, 0x15, 0x6b, 0x70, 0x35, 0x2a, 0x26, 0x1b, 0x56, 0xd3, 0xb0, 0x32, 0xbb, 0x68,
	0x58, 0x3d, 0x21, 0x37, 0xac, 0x47, 0x6b, 0x96, 0x55, 0xa4, 0xef, 0xa0, 0x6e, 0xa5, 0xe5, 0xb7,
	0xf5, 0x45, 0x1e, 0x97, 0x17, 0xb1, 0x36, 0x59, 0xfd, 0x7b, 0x09, 0xba, 0xef, 0xe1, 0xa1, 0xfd,
	0x46, 0xe8, 0x61, 0xd1, 0x6d, 0x8c, 0x75, 0x30, 0x3c, 0x6d, 0x3d, 0xa0, 0x75, 0xa8, 0x0d, 0xfb,
	0xf1, 0xe7, 0x73, 0x76, 0xda, 0xaa, 0xd0, 0x06, 0x78, 0x31, 0x0b, 0x86, 0xa3, 0xe8, 0x9c, 0xc5,
	0xad, 0x6a, 0xf7, 0x0b, 0xb4, 0xfe, 0xfe, 0xa7, 0xd0, 0x1d, 0xd8, 0xee, 0xc7, 0x27, 0x7d, 0x86,
	0x22, 0x54, 0xe3, 0x39, 0x83, 0xe8, 0xe2, 0x08, 0xa5, 0x78, 0x4e, 0x7c, 0x1c, 0x19, 0xa1, 0x02,
	0xe3, 0x9e, 0x01, 0x8e, 0x52, 0x8c, 0x8e, 0x63, 0x83, 0xc8, 0x4a, 0xf1, 0xb6, 0xe5, 0x26, 0x5b,
	0xfa, 0x13, 0xf1, 0xe6, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x83, 0x44, 0x20, 0x93, 0x35, 0x04,
	0x00, 0x00,
}
