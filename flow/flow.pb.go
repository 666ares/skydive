// Code generated by protoc-gen-go.
// source: flow/flow.proto
// DO NOT EDIT!

/*
Package flow is a generated protocol buffer package.

It is generated from these files:
	flow/flow.proto
	flow/set.proto
	flow/request.proto

It has these top-level messages:
	FlowLayer
	FlowMetric
	Flow
	FlowSet
	TermStringFilter
	TermInt64Filter
	NeStringFilter
	NeInt64Filter
	GtInt64Filter
	LtInt64Filter
	GteInt64Filter
	LteInt64Filter
	Filter
	BoolFilter
	Range
	FlowSearchQuery
	FlowSearchReply
*/
package flow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type FlowProtocol int32

const (
	FlowProtocol_ETHERNET FlowProtocol = 0
	FlowProtocol_IPV4     FlowProtocol = 1
	FlowProtocol_TCPPORT  FlowProtocol = 2
	FlowProtocol_UDPPORT  FlowProtocol = 3
	FlowProtocol_SCTPPORT FlowProtocol = 4
	FlowProtocol_IPV6     FlowProtocol = 5
)

var FlowProtocol_name = map[int32]string{
	0: "ETHERNET",
	1: "IPV4",
	2: "TCPPORT",
	3: "UDPPORT",
	4: "SCTPPORT",
	5: "IPV6",
}
var FlowProtocol_value = map[string]int32{
	"ETHERNET": 0,
	"IPV4":     1,
	"TCPPORT":  2,
	"UDPPORT":  3,
	"SCTPPORT": 4,
	"IPV6":     5,
}

func (x FlowProtocol) String() string {
	return proto.EnumName(FlowProtocol_name, int32(x))
}
func (FlowProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FlowLayer struct {
	Protocol FlowProtocol `protobuf:"varint,1,opt,name=Protocol,enum=flow.FlowProtocol" json:"Protocol,omitempty"`
	A        string       `protobuf:"bytes,3,opt,name=A" json:"A,omitempty"`
	B        string       `protobuf:"bytes,4,opt,name=B" json:"B,omitempty"`
}

func (m *FlowLayer) Reset()                    { *m = FlowLayer{} }
func (m *FlowLayer) String() string            { return proto.CompactTextString(m) }
func (*FlowLayer) ProtoMessage()               {}
func (*FlowLayer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FlowMetric struct {
	Start     int64 `protobuf:"varint,1,opt,name=Start" json:"Start,omitempty"`
	Last      int64 `protobuf:"varint,2,opt,name=Last" json:"Last,omitempty"`
	ABPackets int64 `protobuf:"varint,3,opt,name=ABPackets" json:"ABPackets,omitempty"`
	ABBytes   int64 `protobuf:"varint,4,opt,name=ABBytes" json:"ABBytes,omitempty"`
	BAPackets int64 `protobuf:"varint,5,opt,name=BAPackets" json:"BAPackets,omitempty"`
	BABytes   int64 `protobuf:"varint,6,opt,name=BABytes" json:"BABytes,omitempty"`
}

func (m *FlowMetric) Reset()                    { *m = FlowMetric{} }
func (m *FlowMetric) String() string            { return proto.CompactTextString(m) }
func (*FlowMetric) ProtoMessage()               {}
func (*FlowMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Flow struct {
	// Flow Universally Unique IDentifier
	// flow.UUID is unique in the universe, as it should be used as a key of an
	// hashtable. By design 2 different flows, their UUID are always different.
	// flow.UUID can be used as Database Index.
	UUID       string `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
	LayersPath string `protobuf:"bytes,2,opt,name=LayersPath" json:"LayersPath,omitempty"`
	// Data Flow info
	Link      *FlowLayer `protobuf:"bytes,20,opt,name=Link" json:"Link,omitempty"`
	Network   *FlowLayer `protobuf:"bytes,21,opt,name=Network" json:"Network,omitempty"`
	Transport *FlowLayer `protobuf:"bytes,22,opt,name=Transport" json:"Transport,omitempty"`
	// Data Flow Metric info from the 1st layer
	// amount of data between two updates
	LastUpdateMetric *FlowMetric `protobuf:"bytes,31,opt,name=LastUpdateMetric" json:"LastUpdateMetric,omitempty"`
	// Total amount of data for the whole flow duration
	Metric *FlowMetric `protobuf:"bytes,32,opt,name=Metric" json:"Metric,omitempty"`
	// Flow Tracking IDentifier, from 1st packet bytes
	// flow.TrackingID could be used to identify an unique flow whatever it has
	// been captured on the infrastructure. flow.TrackingID is calculated from
	// the bytes of the first packet of his session.
	// flow.TrackingID can be used as a Tag.
	TrackingID string `protobuf:"bytes,5,opt,name=TrackingID" json:"TrackingID,omitempty"`
	// Flow Parent UUID is used as reference to the parent flow
	// Flow.ParentUUID is the same value that point to his parent flow.UUID
	ParentUUID string `protobuf:"bytes,6,opt,name=ParentUUID" json:"ParentUUID,omitempty"`
	// Topology info
	NodeUUID  string `protobuf:"bytes,11,opt,name=NodeUUID" json:"NodeUUID,omitempty"`
	ANodeUUID string `protobuf:"bytes,14,opt,name=ANodeUUID" json:"ANodeUUID,omitempty"`
	BNodeUUID string `protobuf:"bytes,19,opt,name=BNodeUUID" json:"BNodeUUID,omitempty"`
}

func (m *Flow) Reset()                    { *m = Flow{} }
func (m *Flow) String() string            { return proto.CompactTextString(m) }
func (*Flow) ProtoMessage()               {}
func (*Flow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Flow) GetLink() *FlowLayer {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *Flow) GetNetwork() *FlowLayer {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Flow) GetTransport() *FlowLayer {
	if m != nil {
		return m.Transport
	}
	return nil
}

func (m *Flow) GetLastUpdateMetric() *FlowMetric {
	if m != nil {
		return m.LastUpdateMetric
	}
	return nil
}

func (m *Flow) GetMetric() *FlowMetric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func init() {
	proto.RegisterType((*FlowLayer)(nil), "flow.FlowLayer")
	proto.RegisterType((*FlowMetric)(nil), "flow.FlowMetric")
	proto.RegisterType((*Flow)(nil), "flow.Flow")
	proto.RegisterEnum("flow.FlowProtocol", FlowProtocol_name, FlowProtocol_value)
}

var fileDescriptor0 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x71, 0xfd, 0x77, 0x27, 0x55, 0x6b, 0x0d, 0x05, 0x59, 0x08, 0x41, 0x15, 0x2e, 0x05,
	0x89, 0x20, 0x15, 0xc4, 0x89, 0x8b, 0xdd, 0x06, 0x51, 0xa9, 0x04, 0x6b, 0xeb, 0x00, 0xd7, 0x75,
	0x6a, 0x20, 0x8a, 0xb1, 0x2d, 0x7b, 0x51, 0xd5, 0x17, 0xe2, 0x1d, 0x78, 0x3b, 0x76, 0x67, 0x6d,
	0x37, 0x42, 0xe1, 0x92, 0xcc, 0x37, 0xdf, 0xfc, 0x36, 0xb3, 0x5f, 0x16, 0x0e, 0xbf, 0x95, 0xf5,
	0xcd, 0x2b, 0xfd, 0x31, 0x6b, 0xda, 0x5a, 0xd6, 0xe8, 0xe8, 0x7a, 0xfa, 0x05, 0xd8, 0x7b, 0xf5,
	0x7d, 0x29, 0x6e, 0x8b, 0x16, 0x67, 0x10, 0xa4, 0xda, 0x5b, 0xd5, 0x65, 0x64, 0x1d, 0x5b, 0x27,
	0x07, 0xa7, 0x38, 0x23, 0x42, 0x8f, 0x0c, 0x0e, 0x0f, 0x9a, 0xbe, 0xc2, 0x7d, 0xb0, 0xe2, 0xc8,
	0x56, 0x83, 0x8c, 0x5b, 0x42, 0xab, 0x24, 0x72, 0x8c, 0xca, 0xa7, 0xbf, 0x2d, 0x00, 0x8d, 0x7d,
	0x2c, 0x64, 0xbb, 0x5e, 0xe1, 0x11, 0xb8, 0x57, 0x52, 0xb4, 0x92, 0xce, 0xb5, 0xb9, 0xdb, 0x69,
	0x81, 0x08, 0xce, 0xa5, 0xe8, 0x64, 0xb4, 0x47, 0x4d, 0xa7, 0x54, 0x35, 0x3e, 0x06, 0x16, 0x27,
	0xa9, 0x58, 0x6d, 0x0a, 0xd9, 0xd1, 0xe1, 0x36, 0x67, 0x62, 0x68, 0x60, 0x04, 0x7e, 0x9c, 0x24,
	0xb7, 0xb2, 0xe8, 0xe8, 0xa7, 0x6c, 0xee, 0x0b, 0x23, 0x35, 0x97, 0xc4, 0x03, 0xe7, 0x1a, 0x2e,
	0x8f, 0xb7, 0xb8, 0x24, 0x36, 0x9c, 0x67, 0xb8, 0xdc, 0xc8, 0xe9, 0x1f, 0x1b, 0x1c, 0xbd, 0xa8,
	0x5e, 0x66, 0xb9, 0xbc, 0x38, 0xa7, 0x0d, 0x19, 0x77, 0x7e, 0xa9, 0x1a, 0x9f, 0x00, 0x50, 0x34,
	0x5d, 0x2a, 0xe4, 0x0f, 0x5a, 0x93, 0x71, 0x28, 0xc7, 0x0e, 0x3e, 0x53, 0x17, 0x58, 0x57, 0x9b,
	0xe8, 0x48, 0x39, 0x93, 0xd3, 0xc3, 0xbb, 0xb4, 0x88, 0x52, 0x37, 0x52, 0x26, 0x3e, 0x07, 0x7f,
	0x51, 0xc8, 0x9b, 0xba, 0xdd, 0x44, 0x0f, 0x76, 0xcf, 0xf9, 0x95, 0xf1, 0xf1, 0x25, 0xb0, 0xac,
	0x15, 0x55, 0xd7, 0xd4, 0x2a, 0xaa, 0x87, 0xbb, 0x87, 0x99, 0x1c, 0x26, 0xf0, 0x1d, 0x84, 0x3a,
	0xbf, 0x65, 0x73, 0x2d, 0x64, 0x61, 0x92, 0x8e, 0x9e, 0x12, 0x15, 0xde, 0x51, 0xa6, 0xcf, 0xc3,
	0xf2, 0x9f, 0x49, 0x3c, 0x01, 0xaf, 0x67, 0x8e, 0xff, 0xc3, 0x78, 0x3f, 0xcd, 0xa4, 0x8a, 0x41,
	0xad, 0xb5, 0xda, 0xac, 0xab, 0xef, 0x2a, 0x20, 0xd7, 0xc4, 0x20, 0xc7, 0x8e, 0xf6, 0x53, 0xd1,
	0x16, 0x95, 0xa4, 0x00, 0x3d, 0xe3, 0x37, 0x63, 0x07, 0x1f, 0x41, 0xb0, 0xa8, 0xaf, 0x0b, 0x72,
	0x27, 0xe4, 0x06, 0x55, 0xaf, 0xe9, 0xff, 0x1e, 0xcd, 0x03, 0x32, 0x99, 0x58, 0x6c, 0xb9, 0xc9,
	0xe8, 0xde, 0x37, 0x6e, 0x3e, 0x34, 0x5e, 0x7c, 0x85, 0xfd, 0xed, 0xa7, 0xa9, 0x9e, 0x60, 0x30,
	0xcf, 0x3e, 0xcc, 0xf9, 0x62, 0x9e, 0x85, 0xf7, 0x30, 0x00, 0xe7, 0x22, 0xfd, 0xfc, 0x26, 0xb4,
	0x70, 0x02, 0x7e, 0x76, 0x96, 0xa6, 0x9f, 0x78, 0x16, 0xee, 0x69, 0xb1, 0x3c, 0x37, 0xc2, 0xd6,
	0xc4, 0xd5, 0x59, 0x66, 0x94, 0xd3, 0x13, 0x6f, 0x43, 0x37, 0xf7, 0xe8, 0x91, 0xbf, 0xfe, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0x4c, 0x09, 0xd6, 0xf4, 0x37, 0x03, 0x00, 0x00,
}
