//go:generate go run github.com/skydive-project/skydive/graffiti/gendecoder
//
// Copyright (C) 2015 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy ofthe License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specificlanguage governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT MODIFY
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.12.4
// source: flow/flow.proto

package flow

import (
	layers "github.com/skydive-project/skydive/flow/layers"
	filters "github.com/skydive-project/skydive/graffiti/filters"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlowProtocol int32

const (
	FlowProtocol_ETHERNET FlowProtocol = 0
	FlowProtocol_IPV4     FlowProtocol = 1
	FlowProtocol_TCP      FlowProtocol = 2
	FlowProtocol_UDP      FlowProtocol = 3
	FlowProtocol_SCTP     FlowProtocol = 4
	FlowProtocol_IPV6     FlowProtocol = 5
	FlowProtocol_ICMPV4   FlowProtocol = 6
	FlowProtocol_ICMPV6   FlowProtocol = 7
)

// Enum value maps for FlowProtocol.
var (
	FlowProtocol_name = map[int32]string{
		0: "ETHERNET",
		1: "IPV4",
		2: "TCP",
		3: "UDP",
		4: "SCTP",
		5: "IPV6",
		6: "ICMPV4",
		7: "ICMPV6",
	}
	FlowProtocol_value = map[string]int32{
		"ETHERNET": 0,
		"IPV4":     1,
		"TCP":      2,
		"UDP":      3,
		"SCTP":     4,
		"IPV6":     5,
		"ICMPV4":   6,
		"ICMPV6":   7,
	}
)

func (x FlowProtocol) Enum() *FlowProtocol {
	p := new(FlowProtocol)
	*p = x
	return p
}

func (x FlowProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_flow_proto_enumTypes[0].Descriptor()
}

func (FlowProtocol) Type() protoreflect.EnumType {
	return &file_flow_flow_proto_enumTypes[0]
}

func (x FlowProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowProtocol.Descriptor instead.
func (FlowProtocol) EnumDescriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{0}
}

type FlowFinishType int32

const (
	FlowFinishType_NOT_FINISHED FlowFinishType = 0
	FlowFinishType_TIMEOUT      FlowFinishType = 1
	FlowFinishType_TCP_FIN      FlowFinishType = 2
	FlowFinishType_TCP_RST      FlowFinishType = 3
)

// Enum value maps for FlowFinishType.
var (
	FlowFinishType_name = map[int32]string{
		0: "NOT_FINISHED",
		1: "TIMEOUT",
		2: "TCP_FIN",
		3: "TCP_RST",
	}
	FlowFinishType_value = map[string]int32{
		"NOT_FINISHED": 0,
		"TIMEOUT":      1,
		"TCP_FIN":      2,
		"TCP_RST":      3,
	}
)

func (x FlowFinishType) Enum() *FlowFinishType {
	p := new(FlowFinishType)
	*p = x
	return p
}

func (x FlowFinishType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowFinishType) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_flow_proto_enumTypes[1].Descriptor()
}

func (FlowFinishType) Type() protoreflect.EnumType {
	return &file_flow_flow_proto_enumTypes[1]
}

func (x FlowFinishType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowFinishType.Descriptor instead.
func (FlowFinishType) EnumDescriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{1}
}

type ICMPType int32

const (
	ICMPType_UNKNOWN                 ICMPType = 0
	ICMPType_DESTINATION_UNREACHABLE ICMPType = 1
	ICMPType_ECHO                    ICMPType = 2
	ICMPType_NEIGHBOR                ICMPType = 3
	ICMPType_ADDRESS_MASK            ICMPType = 4
	ICMPType_INFO                    ICMPType = 5
	ICMPType_PARAMETER_PROBLEM       ICMPType = 6
	ICMPType_REDIRECT                ICMPType = 7
	ICMPType_ROUTER                  ICMPType = 8
	ICMPType_SOURCE_QUENCH           ICMPType = 9
	ICMPType_TIME_EXCEEDED           ICMPType = 10
	ICMPType_TIMESTAMP               ICMPType = 11
	ICMPType_PACKET_TOO_BIG          ICMPType = 12
)

// Enum value maps for ICMPType.
var (
	ICMPType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "DESTINATION_UNREACHABLE",
		2:  "ECHO",
		3:  "NEIGHBOR",
		4:  "ADDRESS_MASK",
		5:  "INFO",
		6:  "PARAMETER_PROBLEM",
		7:  "REDIRECT",
		8:  "ROUTER",
		9:  "SOURCE_QUENCH",
		10: "TIME_EXCEEDED",
		11: "TIMESTAMP",
		12: "PACKET_TOO_BIG",
	}
	ICMPType_value = map[string]int32{
		"UNKNOWN":                 0,
		"DESTINATION_UNREACHABLE": 1,
		"ECHO":                    2,
		"NEIGHBOR":                3,
		"ADDRESS_MASK":            4,
		"INFO":                    5,
		"PARAMETER_PROBLEM":       6,
		"REDIRECT":                7,
		"ROUTER":                  8,
		"SOURCE_QUENCH":           9,
		"TIME_EXCEEDED":           10,
		"TIMESTAMP":               11,
		"PACKET_TOO_BIG":          12,
	}
)

func (x ICMPType) Enum() *ICMPType {
	p := new(ICMPType)
	*p = x
	return p
}

func (x ICMPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ICMPType) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_flow_proto_enumTypes[2].Descriptor()
}

func (ICMPType) Type() protoreflect.EnumType {
	return &file_flow_flow_proto_enumTypes[2]
}

func (x ICMPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ICMPType.Descriptor instead.
func (ICMPType) EnumDescriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{2}
}

// gendecoder
type FlowLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol FlowProtocol `protobuf:"varint,1,opt,name=Protocol,proto3,enum=flow.FlowProtocol" json:"Protocol"`
	A        string       `protobuf:"bytes,3,opt,name=A,proto3" json:"A,omitempty"`
	B        string       `protobuf:"bytes,4,opt,name=B,proto3" json:"B,omitempty"`
	ID       int64        `protobuf:"varint,5,opt,name=ID,proto3" json:"ID"`
}

func (x *FlowLayer) Reset() {
	*x = FlowLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowLayer) ProtoMessage() {}

func (x *FlowLayer) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowLayer.ProtoReflect.Descriptor instead.
func (*FlowLayer) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{0}
}

func (x *FlowLayer) GetProtocol() FlowProtocol {
	if x != nil {
		return x.Protocol
	}
	return FlowProtocol_ETHERNET
}

func (x *FlowLayer) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *FlowLayer) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

func (x *FlowLayer) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

// gendecoder
type TransportLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol FlowProtocol `protobuf:"varint,1,opt,name=Protocol,proto3,enum=flow.FlowProtocol" json:"Protocol"`
	A        int64        `protobuf:"varint,2,opt,name=A,proto3" json:"A"`
	B        int64        `protobuf:"varint,3,opt,name=B,proto3" json:"B"`
	ID       int64        `protobuf:"varint,4,opt,name=ID,proto3" json:"ID"`
}

func (x *TransportLayer) Reset() {
	*x = TransportLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportLayer) ProtoMessage() {}

func (x *TransportLayer) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportLayer.ProtoReflect.Descriptor instead.
func (*TransportLayer) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{1}
}

func (x *TransportLayer) GetProtocol() FlowProtocol {
	if x != nil {
		return x.Protocol
	}
	return FlowProtocol_ETHERNET
}

func (x *TransportLayer) GetA() int64 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *TransportLayer) GetB() int64 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *TransportLayer) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

// gendecoder
type ICMPLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ICMPType `protobuf:"varint,1,opt,name=Type,proto3,enum=flow.ICMPType" json:"Type"`
	Code uint32   `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	ID   uint32   `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ICMPLayer) Reset() {
	*x = ICMPLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICMPLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICMPLayer) ProtoMessage() {}

func (x *ICMPLayer) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICMPLayer.ProtoReflect.Descriptor instead.
func (*ICMPLayer) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{2}
}

func (x *ICMPLayer) GetType() ICMPType {
	if x != nil {
		return x.Type
	}
	return ICMPType_UNKNOWN
}

func (x *ICMPLayer) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ICMPLayer) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

// gendecoder
type FlowMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ABPackets int64 `protobuf:"varint,2,opt,name=ABPackets,proto3" json:"ABPackets"`
	ABBytes   int64 `protobuf:"varint,3,opt,name=ABBytes,proto3" json:"ABBytes"`
	BAPackets int64 `protobuf:"varint,4,opt,name=BAPackets,proto3" json:"BAPackets"`
	BABytes   int64 `protobuf:"varint,5,opt,name=BABytes,proto3" json:"BABytes"`
	Start     int64 `protobuf:"varint,6,opt,name=Start,proto3" json:"Start"`
	Last      int64 `protobuf:"varint,7,opt,name=Last,proto3" json:"Last"`
	RTT       int64 `protobuf:"varint,8,opt,name=RTT,proto3" json:"RTT,omitempty"`
}

func (x *FlowMetric) Reset() {
	*x = FlowMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMetric) ProtoMessage() {}

func (x *FlowMetric) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMetric.ProtoReflect.Descriptor instead.
func (*FlowMetric) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{3}
}

func (x *FlowMetric) GetABPackets() int64 {
	if x != nil {
		return x.ABPackets
	}
	return 0
}

func (x *FlowMetric) GetABBytes() int64 {
	if x != nil {
		return x.ABBytes
	}
	return 0
}

func (x *FlowMetric) GetBAPackets() int64 {
	if x != nil {
		return x.BAPackets
	}
	return 0
}

func (x *FlowMetric) GetBABytes() int64 {
	if x != nil {
		return x.BABytes
	}
	return 0
}

func (x *FlowMetric) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *FlowMetric) GetLast() int64 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *FlowMetric) GetRTT() int64 {
	if x != nil {
		return x.RTT
	}
	return 0
}

type RawPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64  `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp"`
	Index     int64  `protobuf:"varint,2,opt,name=Index,proto3" json:"Index"`
	Data      []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	LinkType  uint32 `protobuf:"varint,4,opt,name=LinkType,proto3" json:"LinkType,omitempty"`
}

func (x *RawPacket) Reset() {
	*x = RawPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawPacket) ProtoMessage() {}

func (x *RawPacket) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawPacket.ProtoReflect.Descriptor instead.
func (*RawPacket) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{4}
}

func (x *RawPacket) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RawPacket) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RawPacket) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RawPacket) GetLinkType() uint32 {
	if x != nil {
		return x.LinkType
	}
	return 0
}

// gendecoder
type IPMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fragments      int64 `protobuf:"varint,1,opt,name=Fragments,proto3" json:"Fragments"`
	FragmentErrors int64 `protobuf:"varint,2,opt,name=FragmentErrors,proto3" json:"FragmentErrors"`
}

func (x *IPMetric) Reset() {
	*x = IPMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPMetric) ProtoMessage() {}

func (x *IPMetric) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPMetric.ProtoReflect.Descriptor instead.
func (*IPMetric) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{5}
}

func (x *IPMetric) GetFragments() int64 {
	if x != nil {
		return x.Fragments
	}
	return 0
}

func (x *IPMetric) GetFragmentErrors() int64 {
	if x != nil {
		return x.FragmentErrors
	}
	return 0
}

// gendecoder
type TCPMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ABSynStart            int64  `protobuf:"varint,1,opt,name=ABSynStart,proto3" json:"ABSynStart"`
	BASynStart            int64  `protobuf:"varint,2,opt,name=BASynStart,proto3" json:"BASynStart"`
	ABSynTTL              uint32 `protobuf:"varint,3,opt,name=ABSynTTL,proto3" json:"ABSynTTL,omitempty"`
	BASynTTL              uint32 `protobuf:"varint,4,opt,name=BASynTTL,proto3" json:"BASynTTL,omitempty"`
	ABFinStart            int64  `protobuf:"varint,5,opt,name=ABFinStart,proto3" json:"ABFinStart"`
	BAFinStart            int64  `protobuf:"varint,6,opt,name=BAFinStart,proto3" json:"BAFinStart"`
	ABRstStart            int64  `protobuf:"varint,7,opt,name=ABRstStart,proto3" json:"ABRstStart"`
	BARstStart            int64  `protobuf:"varint,8,opt,name=BARstStart,proto3" json:"BARstStart"`
	ABSegmentOutOfOrder   int64  `protobuf:"varint,9,opt,name=ABSegmentOutOfOrder,proto3" json:"ABSegmentOutOfOrder"`
	ABSegmentSkipped      int64  `protobuf:"varint,10,opt,name=ABSegmentSkipped,proto3" json:"ABSegmentSkipped"`
	ABSegmentSkippedBytes int64  `protobuf:"varint,11,opt,name=ABSegmentSkippedBytes,proto3" json:"ABSegmentSkippedBytes"`
	ABPackets             int64  `protobuf:"varint,12,opt,name=ABPackets,proto3" json:"ABPackets"`
	ABBytes               int64  `protobuf:"varint,13,opt,name=ABBytes,proto3" json:"ABBytes"`
	ABSawStart            int64  `protobuf:"varint,14,opt,name=ABSawStart,proto3" json:"ABSawStart"`
	ABSawEnd              int64  `protobuf:"varint,15,opt,name=ABSawEnd,proto3" json:"ABSawEnd"`
	BASegmentOutOfOrder   int64  `protobuf:"varint,16,opt,name=BASegmentOutOfOrder,proto3" json:"BASegmentOutOfOrder"`
	BASegmentSkipped      int64  `protobuf:"varint,17,opt,name=BASegmentSkipped,proto3" json:"BASegmentSkipped"`
	BASegmentSkippedBytes int64  `protobuf:"varint,18,opt,name=BASegmentSkippedBytes,proto3" json:"BASegmentSkippedBytes"`
	BAPackets             int64  `protobuf:"varint,19,opt,name=BAPackets,proto3" json:"BAPackets"`
	BABytes               int64  `protobuf:"varint,20,opt,name=BABytes,proto3" json:"BABytes"`
	BASawStart            int64  `protobuf:"varint,21,opt,name=BASawStart,proto3" json:"BASawStart"`
	BASawEnd              int64  `protobuf:"varint,22,opt,name=BASawEnd,proto3" json:"BASawEnd"`
}

func (x *TCPMetric) Reset() {
	*x = TCPMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPMetric) ProtoMessage() {}

func (x *TCPMetric) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPMetric.ProtoReflect.Descriptor instead.
func (*TCPMetric) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{6}
}

func (x *TCPMetric) GetABSynStart() int64 {
	if x != nil {
		return x.ABSynStart
	}
	return 0
}

func (x *TCPMetric) GetBASynStart() int64 {
	if x != nil {
		return x.BASynStart
	}
	return 0
}

func (x *TCPMetric) GetABSynTTL() uint32 {
	if x != nil {
		return x.ABSynTTL
	}
	return 0
}

func (x *TCPMetric) GetBASynTTL() uint32 {
	if x != nil {
		return x.BASynTTL
	}
	return 0
}

func (x *TCPMetric) GetABFinStart() int64 {
	if x != nil {
		return x.ABFinStart
	}
	return 0
}

func (x *TCPMetric) GetBAFinStart() int64 {
	if x != nil {
		return x.BAFinStart
	}
	return 0
}

func (x *TCPMetric) GetABRstStart() int64 {
	if x != nil {
		return x.ABRstStart
	}
	return 0
}

func (x *TCPMetric) GetBARstStart() int64 {
	if x != nil {
		return x.BARstStart
	}
	return 0
}

func (x *TCPMetric) GetABSegmentOutOfOrder() int64 {
	if x != nil {
		return x.ABSegmentOutOfOrder
	}
	return 0
}

func (x *TCPMetric) GetABSegmentSkipped() int64 {
	if x != nil {
		return x.ABSegmentSkipped
	}
	return 0
}

func (x *TCPMetric) GetABSegmentSkippedBytes() int64 {
	if x != nil {
		return x.ABSegmentSkippedBytes
	}
	return 0
}

func (x *TCPMetric) GetABPackets() int64 {
	if x != nil {
		return x.ABPackets
	}
	return 0
}

func (x *TCPMetric) GetABBytes() int64 {
	if x != nil {
		return x.ABBytes
	}
	return 0
}

func (x *TCPMetric) GetABSawStart() int64 {
	if x != nil {
		return x.ABSawStart
	}
	return 0
}

func (x *TCPMetric) GetABSawEnd() int64 {
	if x != nil {
		return x.ABSawEnd
	}
	return 0
}

func (x *TCPMetric) GetBASegmentOutOfOrder() int64 {
	if x != nil {
		return x.BASegmentOutOfOrder
	}
	return 0
}

func (x *TCPMetric) GetBASegmentSkipped() int64 {
	if x != nil {
		return x.BASegmentSkipped
	}
	return 0
}

func (x *TCPMetric) GetBASegmentSkippedBytes() int64 {
	if x != nil {
		return x.BASegmentSkippedBytes
	}
	return 0
}

func (x *TCPMetric) GetBAPackets() int64 {
	if x != nil {
		return x.BAPackets
	}
	return 0
}

func (x *TCPMetric) GetBABytes() int64 {
	if x != nil {
		return x.BABytes
	}
	return 0
}

func (x *TCPMetric) GetBASawStart() int64 {
	if x != nil {
		return x.BASawStart
	}
	return 0
}

func (x *TCPMetric) GetBASawEnd() int64 {
	if x != nil {
		return x.BASawEnd
	}
	return 0
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flows []*Flow `protobuf:"bytes,1,rep,name=Flows,proto3" json:"Flows,omitempty"`
	Stats *Stats  `protobuf:"bytes,2,opt,name=Stats,proto3" json:"Stats,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{7}
}

func (x *Message) GetFlows() []*Flow {
	if x != nil {
		return x.Flows
	}
	return nil
}

func (x *Message) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureID         string `protobuf:"bytes,1,opt,name=CaptureID,proto3" json:"CaptureID,omitempty"`
	FlowCount         int64  `protobuf:"varint,2,opt,name=FlowCount,proto3" json:"FlowCount"`
	FlowDropped       int64  `protobuf:"varint,3,opt,name=FlowDropped,proto3" json:"FlowDropped"`
	KernelFlowDropped int64  `protobuf:"varint,4,opt,name=KernelFlowDropped,proto3" json:"KernelFlowDropped"`
	PacketsDropped    int64  `protobuf:"varint,5,opt,name=PacketsDropped,proto3" json:"PacketsDropped"`
	PacketsReceived   int64  `protobuf:"varint,6,opt,name=PacketsReceived,proto3" json:"PacketsReceived"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{8}
}

func (x *Stats) GetCaptureID() string {
	if x != nil {
		return x.CaptureID
	}
	return ""
}

func (x *Stats) GetFlowCount() int64 {
	if x != nil {
		return x.FlowCount
	}
	return 0
}

func (x *Stats) GetFlowDropped() int64 {
	if x != nil {
		return x.FlowDropped
	}
	return 0
}

func (x *Stats) GetKernelFlowDropped() int64 {
	if x != nil {
		return x.KernelFlowDropped
	}
	return 0
}

func (x *Stats) GetPacketsDropped() int64 {
	if x != nil {
		return x.PacketsDropped
	}
	return 0
}

func (x *Stats) GetPacketsReceived() int64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

type Flow struct {
	XXX_state     flowState `json:"-"`
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flow Universally Unique IDentifier
	// flow.UUID is unique in the universe, as it should be used as a key of an
	// hashtable. By design 2 different flows, their UUID are always different.
	// flow.UUID can be used as Database Index.
	UUID       string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	LayersPath string `protobuf:"bytes,2,opt,name=LayersPath,proto3" json:"LayersPath,omitempty"`
	// Application is the last layer which is not a payload.
	Application string `protobuf:"bytes,3,opt,name=Application,proto3" json:"Application,omitempty"`
	// Data Flow info
	Link      *FlowLayer      `protobuf:"bytes,20,opt,name=Link,proto3" json:"Link,omitempty"`
	Network   *FlowLayer      `protobuf:"bytes,21,opt,name=Network,proto3" json:"Network,omitempty"`
	Transport *TransportLayer `protobuf:"bytes,22,opt,name=Transport,proto3" json:"Transport,omitempty"`
	ICMP      *ICMPLayer      `protobuf:"bytes,23,opt,name=ICMP,proto3" json:"ICMP,omitempty"`
	// extra layers
	DHCPv4 *layers.DHCPv4 `protobuf:"bytes,1000,opt,name=DHCPv4,proto3" json:"DHCPv4,omitempty"`
	DNS    *layers.DNS    `protobuf:"bytes,1001,opt,name=DNS,proto3" json:"DNS,omitempty"`
	VRRPv2 *layers.VRRPv2 `protobuf:"bytes,1002,opt,name=VRRPv2,proto3" json:"VRRPv2,omitempty"`
	// Data Flow Metric info from the 1st layer
	// amount of data between two updates
	LastUpdateMetric *FlowMetric `protobuf:"bytes,31,opt,name=LastUpdateMetric,proto3" json:"LastUpdateMetric,omitempty"`
	// Total amount of data for the whole flow duration
	Metric *FlowMetric `protobuf:"bytes,32,opt,name=Metric,proto3" json:"Metric,omitempty"`
	// Metric specific to the TCP and IPs Protocols and optional
	TCPMetric *TCPMetric `protobuf:"bytes,38,opt,name=TCPMetric,proto3" json:"TCPMetric,omitempty"`
	IPMetric  *IPMetric  `protobuf:"bytes,39,opt,name=IPMetric,proto3" json:"IPMetric,omitempty"`
	Start     int64      `protobuf:"varint,10,opt,name=Start,proto3" json:"Start"`
	Last      int64      `protobuf:"varint,11,opt,name=Last,proto3" json:"Last"`
	// Flow Tracking IDentifier, from 1st packet bytes
	// flow.TrackingID could be used to identify an unique flow whatever it has
	// been captured on the infrastructure. flow.TrackingID is calculated from
	// the bytes of the first packet of his session.
	// flow.TrackingID can be used as a Tag.
	TrackingID   string `protobuf:"bytes,50,opt,name=TrackingID,proto3" json:"TrackingID,omitempty"`
	L3TrackingID string `protobuf:"bytes,51,opt,name=L3TrackingID,proto3" json:"L3TrackingID,omitempty"`
	// Flow Parent UUID is used as reference to the parent flow
	// Flow.ParentUUID is the same value that point to his parent flow.UUID
	ParentUUID string `protobuf:"bytes,6,opt,name=ParentUUID,proto3" json:"ParentUUID"`
	// Topology info
	NodeTID string `protobuf:"bytes,33,opt,name=NodeTID,proto3" json:"NodeTID,omitempty"`
	// Capture info
	CaptureID string `protobuf:"bytes,34,opt,name=CaptureID,proto3" json:"CaptureID,omitempty"`
	// raw packets, will not be exported, see Makefile
	LastRawPackets []*RawPacket `protobuf:"bytes,36,rep,name=LastRawPackets,proto3" json:"-"`
	// number of raw packet captured
	RawPacketsCaptured int64 `protobuf:"varint,37,opt,name=RawPacketsCaptured,proto3" json:"RawPacketsCaptured"`
	// describes the way the flow was ended (e.g. by RST, FIN)
	FinishType FlowFinishType `protobuf:"varint,60,opt,name=FinishType,proto3,enum=flow.FlowFinishType" json:"FinishType,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{9}
}

func (x *Flow) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Flow) GetLayersPath() string {
	if x != nil {
		return x.LayersPath
	}
	return ""
}

func (x *Flow) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *Flow) GetLink() *FlowLayer {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *Flow) GetNetwork() *FlowLayer {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Flow) GetTransport() *TransportLayer {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *Flow) GetICMP() *ICMPLayer {
	if x != nil {
		return x.ICMP
	}
	return nil
}

func (x *Flow) GetDHCPv4() *layers.DHCPv4 {
	if x != nil {
		return x.DHCPv4
	}
	return nil
}

func (x *Flow) GetDNS() *layers.DNS {
	if x != nil {
		return x.DNS
	}
	return nil
}

func (x *Flow) GetVRRPv2() *layers.VRRPv2 {
	if x != nil {
		return x.VRRPv2
	}
	return nil
}

func (x *Flow) GetLastUpdateMetric() *FlowMetric {
	if x != nil {
		return x.LastUpdateMetric
	}
	return nil
}

func (x *Flow) GetMetric() *FlowMetric {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *Flow) GetTCPMetric() *TCPMetric {
	if x != nil {
		return x.TCPMetric
	}
	return nil
}

func (x *Flow) GetIPMetric() *IPMetric {
	if x != nil {
		return x.IPMetric
	}
	return nil
}

func (x *Flow) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Flow) GetLast() int64 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *Flow) GetTrackingID() string {
	if x != nil {
		return x.TrackingID
	}
	return ""
}

func (x *Flow) GetL3TrackingID() string {
	if x != nil {
		return x.L3TrackingID
	}
	return ""
}

func (x *Flow) GetParentUUID() string {
	if x != nil {
		return x.ParentUUID
	}
	return ""
}

func (x *Flow) GetNodeTID() string {
	if x != nil {
		return x.NodeTID
	}
	return ""
}

func (x *Flow) GetCaptureID() string {
	if x != nil {
		return x.CaptureID
	}
	return ""
}

func (x *Flow) GetLastRawPackets() []*RawPacket {
	if x != nil {
		return x.LastRawPackets
	}
	return nil
}

func (x *Flow) GetRawPacketsCaptured() int64 {
	if x != nil {
		return x.RawPacketsCaptured
	}
	return 0
}

func (x *Flow) GetFinishType() FlowFinishType {
	if x != nil {
		return x.FinishType
	}
	return FlowFinishType_NOT_FINISHED
}

type FlowSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flows []*Flow `protobuf:"bytes,1,rep,name=Flows,proto3" json:"Flows,omitempty"`
	Start int64   `protobuf:"varint,2,opt,name=Start,proto3" json:"Start"`
	End   int64   `protobuf:"varint,3,opt,name=End,proto3" json:"End"`
}

func (x *FlowSet) Reset() {
	*x = FlowSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSet) ProtoMessage() {}

func (x *FlowSet) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSet.ProtoReflect.Descriptor instead.
func (*FlowSet) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{10}
}

func (x *FlowSet) GetFlows() []*Flow {
	if x != nil {
		return x.Flows
	}
	return nil
}

func (x *FlowSet) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *FlowSet) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type FlowSearchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowSet *FlowSet `protobuf:"bytes,1,opt,name=FlowSet,proto3" json:"FlowSet,omitempty"`
}

func (x *FlowSearchReply) Reset() {
	*x = FlowSearchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSearchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSearchReply) ProtoMessage() {}

func (x *FlowSearchReply) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSearchReply.ProtoReflect.Descriptor instead.
func (*FlowSearchReply) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{11}
}

func (x *FlowSearchReply) GetFlowSet() *FlowSet {
	if x != nil {
		return x.FlowSet
	}
	return nil
}

type TableQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string               `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Query *filters.SearchQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *TableQuery) Reset() {
	*x = TableQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableQuery) ProtoMessage() {}

func (x *TableQuery) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableQuery.ProtoReflect.Descriptor instead.
func (*TableQuery) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{12}
}

func (x *TableQuery) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TableQuery) GetQuery() *filters.SearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type TableReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       int32    `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	FlowSetBytes [][]byte `protobuf:"bytes,2,rep,name=FlowSetBytes,proto3" json:"FlowSetBytes,omitempty"`
}

func (x *TableReply) Reset() {
	*x = TableReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_flow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableReply) ProtoMessage() {}

func (x *TableReply) ProtoReflect() protoreflect.Message {
	mi := &file_flow_flow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableReply.ProtoReflect.Descriptor instead.
func (*TableReply) Descriptor() ([]byte, []int) {
	return file_flow_flow_proto_rawDescGZIP(), []int{13}
}

func (x *TableReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TableReply) GetFlowSetBytes() [][]byte {
	if x != nil {
		return x.FlowSetBytes
	}
	return nil
}

var File_flow_flow_proto protoreflect.FileDescriptor

var file_flow_flow_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x09, 0x64, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x76, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x76, 0x72, 0x72, 0x70, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x72, 0x61, 0x66, 0x66, 0x69, 0x74, 0x69, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67,
	0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x41,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x41, 0x12, 0x0c, 0x0a, 0x01, 0x42, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x6c, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52,
	0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x41, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x41, 0x12, 0x0c, 0x0a, 0x01, 0x42, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x01, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x09, 0x49, 0x43, 0x4d, 0x50, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x46,
	0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x42, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x42,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x42, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x42, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x41, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x41, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x41, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x42, 0x41, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x4c,
	0x61, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x54, 0x54, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x52, 0x54, 0x54, 0x22, 0x6f, 0x0a, 0x09, 0x52, 0x61, 0x77, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x08, 0x49, 0x50, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x93, 0x06, 0x0a, 0x09, 0x54, 0x43, 0x50,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x42, 0x53, 0x79, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x42, 0x53, 0x79,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x41, 0x53, 0x79, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x41, 0x53, 0x79,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x42, 0x53, 0x79, 0x6e, 0x54,
	0x54, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x41, 0x42, 0x53, 0x79, 0x6e, 0x54,
	0x54, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x41, 0x53, 0x79, 0x6e, 0x54, 0x54, 0x4c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x42, 0x41, 0x53, 0x79, 0x6e, 0x54, 0x54, 0x4c, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x42, 0x46, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x41, 0x42, 0x46, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x41, 0x46, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x42, 0x41, 0x46, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x42, 0x52, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x41, 0x42, 0x52, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x41, 0x52, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x42, 0x41, 0x52, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x41, 0x42, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x4f, 0x66,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x41, 0x42, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x41, 0x42, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x41, 0x42, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15,
	0x41, 0x42, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x41, 0x42, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x42, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x42, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x41, 0x42, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x42,
	0x53, 0x61, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x41, 0x42, 0x53, 0x61, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x42,
	0x53, 0x61, 0x77, 0x45, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x42,
	0x53, 0x61, 0x77, 0x45, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x41, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x42, 0x41, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x41, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x42, 0x41, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x41, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x42, 0x41, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x41,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42,
	0x41, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x41, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x41, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x41, 0x53, 0x61, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x41, 0x53, 0x61, 0x77, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x41, 0x53, 0x61, 0x77, 0x45, 0x6e, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x41, 0x53, 0x61, 0x77, 0x45, 0x6e, 0x64, 0x22, 0x4e,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xe5,
	0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x44,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x46, 0x6c, 0x6f, 0x77, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x9f, 0x07, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x29, 0x0a, 0x07, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x49, 0x43, 0x4d,
	0x50, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49,
	0x43, 0x4d, 0x50, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x12, 0x27,
	0x0a, 0x06, 0x44, 0x48, 0x43, 0x50, 0x76, 0x34, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x76, 0x34, 0x52,
	0x06, 0x44, 0x48, 0x43, 0x50, 0x76, 0x34, 0x12, 0x1e, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x18, 0xe9,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x44,
	0x4e, 0x53, 0x52, 0x03, 0x44, 0x4e, 0x53, 0x12, 0x27, 0x0a, 0x06, 0x56, 0x52, 0x52, 0x50, 0x76,
	0x32, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x2e, 0x56, 0x52, 0x52, 0x50, 0x76, 0x32, 0x52, 0x06, 0x56, 0x52, 0x52, 0x50, 0x76, 0x32,
	0x12, 0x3c, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x10, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x28,
	0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2d, 0x0a, 0x09, 0x54, 0x43, 0x50, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x54, 0x43, 0x50, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x09, 0x54, 0x43,
	0x50, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x08, 0x49, 0x50, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x49, 0x50, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x08, 0x49, 0x50, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x61, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x4c, 0x33, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x33, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x49, 0x44, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x0e, 0x4c, 0x61, 0x73,
	0x74, 0x52, 0x61, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x61, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x52, 0x61, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x53, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x05,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0x3a, 0x0a,
	0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x27, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74,
	0x52, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x22, 0x4c, 0x0a, 0x0a, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x48, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x2a, 0x64, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x43, 0x54, 0x50, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x34, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x43, 0x4d, 0x50, 0x56, 0x36, 0x10, 0x07, 0x2a, 0x49, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x43, 0x50, 0x5f,
	0x46, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x43, 0x50, 0x5f, 0x52, 0x53, 0x54,
	0x10, 0x03, 0x2a, 0xe2, 0x01, 0x0a, 0x08, 0x49, 0x43, 0x4d, 0x50, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x43, 0x48,
	0x4f, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x53,
	0x4b, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c,
	0x45, 0x4d, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x08, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x48, 0x10,
	0x09, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x42, 0x49, 0x47, 0x10, 0x0c, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6b, 0x79, 0x64, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x73, 0x6b, 0x79, 0x64, 0x69, 0x76, 0x65, 0x2f, 0x66, 0x6c,
	0x6f, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flow_flow_proto_rawDescOnce sync.Once
	file_flow_flow_proto_rawDescData = file_flow_flow_proto_rawDesc
)

func file_flow_flow_proto_rawDescGZIP() []byte {
	file_flow_flow_proto_rawDescOnce.Do(func() {
		file_flow_flow_proto_rawDescData = protoimpl.X.CompressGZIP(file_flow_flow_proto_rawDescData)
	})
	return file_flow_flow_proto_rawDescData
}

var file_flow_flow_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_flow_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_flow_flow_proto_goTypes = []interface{}{
	(FlowProtocol)(0),           // 0: flow.FlowProtocol
	(FlowFinishType)(0),         // 1: flow.FlowFinishType
	(ICMPType)(0),               // 2: flow.ICMPType
	(*FlowLayer)(nil),           // 3: flow.FlowLayer
	(*TransportLayer)(nil),      // 4: flow.TransportLayer
	(*ICMPLayer)(nil),           // 5: flow.ICMPLayer
	(*FlowMetric)(nil),          // 6: flow.FlowMetric
	(*RawPacket)(nil),           // 7: flow.RawPacket
	(*IPMetric)(nil),            // 8: flow.IPMetric
	(*TCPMetric)(nil),           // 9: flow.TCPMetric
	(*Message)(nil),             // 10: flow.Message
	(*Stats)(nil),               // 11: flow.Stats
	(*Flow)(nil),                // 12: flow.Flow
	(*FlowSet)(nil),             // 13: flow.FlowSet
	(*FlowSearchReply)(nil),     // 14: flow.FlowSearchReply
	(*TableQuery)(nil),          // 15: flow.TableQuery
	(*TableReply)(nil),          // 16: flow.TableReply
	(*layers.DHCPv4)(nil),       // 17: layers.DHCPv4
	(*layers.DNS)(nil),          // 18: layers.DNS
	(*layers.VRRPv2)(nil),       // 19: layers.VRRPv2
	(*filters.SearchQuery)(nil), // 20: filters.SearchQuery
}
var file_flow_flow_proto_depIdxs = []int32{
	0,  // 0: flow.FlowLayer.Protocol:type_name -> flow.FlowProtocol
	0,  // 1: flow.TransportLayer.Protocol:type_name -> flow.FlowProtocol
	2,  // 2: flow.ICMPLayer.Type:type_name -> flow.ICMPType
	12, // 3: flow.Message.Flows:type_name -> flow.Flow
	11, // 4: flow.Message.Stats:type_name -> flow.Stats
	3,  // 5: flow.Flow.Link:type_name -> flow.FlowLayer
	3,  // 6: flow.Flow.Network:type_name -> flow.FlowLayer
	4,  // 7: flow.Flow.Transport:type_name -> flow.TransportLayer
	5,  // 8: flow.Flow.ICMP:type_name -> flow.ICMPLayer
	17, // 9: flow.Flow.DHCPv4:type_name -> layers.DHCPv4
	18, // 10: flow.Flow.DNS:type_name -> layers.DNS
	19, // 11: flow.Flow.VRRPv2:type_name -> layers.VRRPv2
	6,  // 12: flow.Flow.LastUpdateMetric:type_name -> flow.FlowMetric
	6,  // 13: flow.Flow.Metric:type_name -> flow.FlowMetric
	9,  // 14: flow.Flow.TCPMetric:type_name -> flow.TCPMetric
	8,  // 15: flow.Flow.IPMetric:type_name -> flow.IPMetric
	7,  // 16: flow.Flow.LastRawPackets:type_name -> flow.RawPacket
	1,  // 17: flow.Flow.FinishType:type_name -> flow.FlowFinishType
	12, // 18: flow.FlowSet.Flows:type_name -> flow.Flow
	13, // 19: flow.FlowSearchReply.FlowSet:type_name -> flow.FlowSet
	20, // 20: flow.TableQuery.query:type_name -> filters.SearchQuery
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_flow_flow_proto_init() }
func file_flow_flow_proto_init() {
	if File_flow_flow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flow_flow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransportLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICMPLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSearchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_flow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flow_flow_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flow_flow_proto_goTypes,
		DependencyIndexes: file_flow_flow_proto_depIdxs,
		EnumInfos:         file_flow_flow_proto_enumTypes,
		MessageInfos:      file_flow_flow_proto_msgTypes,
	}.Build()
	File_flow_flow_proto = out.File
	file_flow_flow_proto_rawDesc = nil
	file_flow_flow_proto_goTypes = nil
	file_flow_flow_proto_depIdxs = nil
}
