// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	graph "github.com/skydive-project/skydive/graffiti/graph"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComSkydiveProjectSkydiveApiTypes(in *jlexer.Lexer, out *PacketInjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Src":
			out.Src = string(in.String())
		case "Dst":
			out.Dst = string(in.String())
		case "SrcIP":
			out.SrcIP = string(in.String())
		case "DstIP":
			out.DstIP = string(in.String())
		case "SrcMAC":
			out.SrcMAC = string(in.String())
		case "DstMAC":
			out.DstMAC = string(in.String())
		case "SrcPort":
			out.SrcPort = uint16(in.Uint16())
		case "DstPort":
			out.DstPort = uint16(in.Uint16())
		case "Type":
			out.Type = string(in.String())
		case "Payload":
			out.Payload = string(in.String())
		case "ICMPID":
			out.ICMPID = uint16(in.Uint16())
		case "Count":
			out.Count = uint64(in.Uint64())
		case "Interval":
			out.Interval = uint64(in.Uint64())
		case "Mode":
			out.Mode = string(in.String())
		case "IncrementPayload":
			out.IncrementPayload = int64(in.Int64())
		case "StartTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartTime).UnmarshalJSON(data))
			}
		case "Pcap":
			if in.IsNull() {
				in.Skip()
				out.Pcap = nil
			} else {
				out.Pcap = in.Bytes()
			}
		case "TTL":
			out.TTL = uint8(in.Uint8())
		case "UUID":
			out.UUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSkydiveProjectSkydiveApiTypes(out *jwriter.Writer, in PacketInjection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Src\":"
		out.RawString(prefix[1:])
		out.String(string(in.Src))
	}
	{
		const prefix string = ",\"Dst\":"
		out.RawString(prefix)
		out.String(string(in.Dst))
	}
	{
		const prefix string = ",\"SrcIP\":"
		out.RawString(prefix)
		out.String(string(in.SrcIP))
	}
	{
		const prefix string = ",\"DstIP\":"
		out.RawString(prefix)
		out.String(string(in.DstIP))
	}
	{
		const prefix string = ",\"SrcMAC\":"
		out.RawString(prefix)
		out.String(string(in.SrcMAC))
	}
	{
		const prefix string = ",\"DstMAC\":"
		out.RawString(prefix)
		out.String(string(in.DstMAC))
	}
	{
		const prefix string = ",\"SrcPort\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.SrcPort))
	}
	{
		const prefix string = ",\"DstPort\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.DstPort))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"ICMPID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ICMPID))
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Count))
	}
	{
		const prefix string = ",\"Interval\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Interval))
	}
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	{
		const prefix string = ",\"IncrementPayload\":"
		out.RawString(prefix)
		out.Int64(int64(in.IncrementPayload))
	}
	{
		const prefix string = ",\"StartTime\":"
		out.RawString(prefix)
		out.Raw((in.StartTime).MarshalJSON())
	}
	{
		const prefix string = ",\"Pcap\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Pcap)
	}
	{
		const prefix string = ",\"TTL\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TTL))
	}
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix)
		out.String(string(in.UUID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PacketInjection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSkydiveProjectSkydiveApiTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PacketInjection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSkydiveProjectSkydiveApiTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PacketInjection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSkydiveProjectSkydiveApiTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PacketInjection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSkydiveProjectSkydiveApiTypes(l, v)
}
func easyjson6601e8cdDecodeGithubComSkydiveProjectSkydiveApiTypes1(in *jlexer.Lexer, out *NodeRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Metadata = make(graph.Metadata)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Metadata)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Action":
			out.Action = string(in.String())
		case "Query":
			out.Query = string(in.String())
		case "UUID":
			out.UUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSkydiveProjectSkydiveApiTypes1(out *jwriter.Writer, in NodeRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Metadata {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				if m, ok := v5Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v5Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v5Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Action\":"
		out.RawString(prefix)
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"Query\":"
		out.RawString(prefix)
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix)
		out.String(string(in.UUID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodeRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSkydiveProjectSkydiveApiTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodeRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSkydiveProjectSkydiveApiTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodeRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSkydiveProjectSkydiveApiTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodeRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSkydiveProjectSkydiveApiTypes1(l, v)
}
func easyjson6601e8cdDecodeGithubComSkydiveProjectSkydiveApiTypes2(in *jlexer.Lexer, out *EdgeRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Src":
			out.Src = string(in.String())
		case "Dst":
			out.Dst = string(in.String())
		case "Metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Metadata = make(graph.Metadata)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 interface{}
					if m, ok := v6.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v6.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v6 = in.Interface()
					}
					(out.Metadata)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "UUID":
			out.UUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSkydiveProjectSkydiveApiTypes2(out *jwriter.Writer, in EdgeRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Src\":"
		out.RawString(prefix)
		out.String(string(in.Src))
	}
	{
		const prefix string = ",\"Dst\":"
		out.RawString(prefix)
		out.String(string(in.Dst))
	}
	{
		const prefix string = ",\"Metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Metadata {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if m, ok := v7Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v7Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v7Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix)
		out.String(string(in.UUID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EdgeRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSkydiveProjectSkydiveApiTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EdgeRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSkydiveProjectSkydiveApiTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EdgeRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSkydiveProjectSkydiveApiTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EdgeRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSkydiveProjectSkydiveApiTypes2(l, v)
}
func easyjson6601e8cdDecodeGithubComSkydiveProjectSkydiveApiTypes3(in *jlexer.Lexer, out *Capture) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GremlinQuery":
			out.GremlinQuery = string(in.String())
		case "BPFFilter":
			out.BPFFilter = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Count":
			out.Count = int(in.Int())
		case "Port":
			out.Port = int(in.Int())
		case "SamplingRate":
			out.SamplingRate = uint32(in.Uint32())
		case "PollingInterval":
			out.PollingInterval = uint32(in.Uint32())
		case "RawPacketLimit":
			out.RawPacketLimit = int(in.Int())
		case "HeaderSize":
			out.HeaderSize = int(in.Int())
		case "ExtraTCPMetric":
			out.ExtraTCPMetric = bool(in.Bool())
		case "IPDefrag":
			out.IPDefrag = bool(in.Bool())
		case "ReassembleTCP":
			out.ReassembleTCP = bool(in.Bool())
		case "LayerKeyMode":
			out.LayerKeyMode = string(in.String())
		case "ExtraLayers":
			out.ExtraLayers = int(in.Int())
		case "Target":
			out.Target = string(in.String())
		case "TargetType":
			out.TargetType = string(in.String())
		case "UUID":
			out.UUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSkydiveProjectSkydiveApiTypes3(out *jwriter.Writer, in Capture) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GremlinQuery != "" {
		const prefix string = ",\"GremlinQuery\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.GremlinQuery))
	}
	if in.BPFFilter != "" {
		const prefix string = ",\"BPFFilter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BPFFilter))
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Type != "" {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	if in.Port != 0 {
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"SamplingRate\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.SamplingRate))
	}
	{
		const prefix string = ",\"PollingInterval\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.PollingInterval))
	}
	if in.RawPacketLimit != 0 {
		const prefix string = ",\"RawPacketLimit\":"
		out.RawString(prefix)
		out.Int(int(in.RawPacketLimit))
	}
	if in.HeaderSize != 0 {
		const prefix string = ",\"HeaderSize\":"
		out.RawString(prefix)
		out.Int(int(in.HeaderSize))
	}
	{
		const prefix string = ",\"ExtraTCPMetric\":"
		out.RawString(prefix)
		out.Bool(bool(in.ExtraTCPMetric))
	}
	{
		const prefix string = ",\"IPDefrag\":"
		out.RawString(prefix)
		out.Bool(bool(in.IPDefrag))
	}
	{
		const prefix string = ",\"ReassembleTCP\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReassembleTCP))
	}
	if in.LayerKeyMode != "" {
		const prefix string = ",\"LayerKeyMode\":"
		out.RawString(prefix)
		out.String(string(in.LayerKeyMode))
	}
	if in.ExtraLayers != 0 {
		const prefix string = ",\"ExtraLayers\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraLayers))
	}
	if in.Target != "" {
		const prefix string = ",\"Target\":"
		out.RawString(prefix)
		out.String(string(in.Target))
	}
	if in.TargetType != "" {
		const prefix string = ",\"TargetType\":"
		out.RawString(prefix)
		out.String(string(in.TargetType))
	}
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix)
		out.String(string(in.UUID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Capture) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSkydiveProjectSkydiveApiTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Capture) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSkydiveProjectSkydiveApiTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Capture) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSkydiveProjectSkydiveApiTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Capture) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSkydiveProjectSkydiveApiTypes3(l, v)
}
